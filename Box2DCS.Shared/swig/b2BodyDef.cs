/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Box2DCS {

using System;
using System.Runtime.InteropServices;

public class b2BodyDef : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal b2BodyDef(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(b2BodyDef obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~b2BodyDef() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Box2DPINVOKE.delete_b2BodyDef(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public b2BodyDef() : this(Box2DPINVOKE.new_b2BodyDef(), true) {
  }

  public b2BodyType type {
    set {
      Box2DPINVOKE.b2BodyDef_type_set(swigCPtr, (int)value);
    } 
    get {
      b2BodyType ret = (b2BodyType)Box2DPINVOKE.b2BodyDef_type_get(swigCPtr);
      return ret;
    } 
  }

  public b2Vec2 position {
    set {
      Box2DPINVOKE.b2BodyDef_position_set(swigCPtr, b2Vec2.getCPtr(value));
    } 
    get {
      IntPtr cPtr = Box2DPINVOKE.b2BodyDef_position_get(swigCPtr);
      b2Vec2 ret = (cPtr == IntPtr.Zero) ? null : new b2Vec2(cPtr, false);
      return ret;
    } 
  }

  public float angle {
    set {
      Box2DPINVOKE.b2BodyDef_angle_set(swigCPtr, value);
    } 
    get {
      float ret = Box2DPINVOKE.b2BodyDef_angle_get(swigCPtr);
      return ret;
    } 
  }

  public b2Vec2 linearVelocity {
    set {
      Box2DPINVOKE.b2BodyDef_linearVelocity_set(swigCPtr, b2Vec2.getCPtr(value));
    } 
    get {
      IntPtr cPtr = Box2DPINVOKE.b2BodyDef_linearVelocity_get(swigCPtr);
      b2Vec2 ret = (cPtr == IntPtr.Zero) ? null : new b2Vec2(cPtr, false);
      return ret;
    } 
  }

  public float angularVelocity {
    set {
      Box2DPINVOKE.b2BodyDef_angularVelocity_set(swigCPtr, value);
    } 
    get {
      float ret = Box2DPINVOKE.b2BodyDef_angularVelocity_get(swigCPtr);
      return ret;
    } 
  }

  public float linearDamping {
    set {
      Box2DPINVOKE.b2BodyDef_linearDamping_set(swigCPtr, value);
    } 
    get {
      float ret = Box2DPINVOKE.b2BodyDef_linearDamping_get(swigCPtr);
      return ret;
    } 
  }

  public float angularDamping {
    set {
      Box2DPINVOKE.b2BodyDef_angularDamping_set(swigCPtr, value);
    } 
    get {
      float ret = Box2DPINVOKE.b2BodyDef_angularDamping_get(swigCPtr);
      return ret;
    } 
  }

  public bool allowSleep {
    set {
      Box2DPINVOKE.b2BodyDef_allowSleep_set(swigCPtr, value);
    } 
    get {
      bool ret = Box2DPINVOKE.b2BodyDef_allowSleep_get(swigCPtr);
      return ret;
    } 
  }

  public bool awake {
    set {
      Box2DPINVOKE.b2BodyDef_awake_set(swigCPtr, value);
    } 
    get {
      bool ret = Box2DPINVOKE.b2BodyDef_awake_get(swigCPtr);
      return ret;
    } 
  }

  public bool fixedRotation {
    set {
      Box2DPINVOKE.b2BodyDef_fixedRotation_set(swigCPtr, value);
    } 
    get {
      bool ret = Box2DPINVOKE.b2BodyDef_fixedRotation_get(swigCPtr);
      return ret;
    } 
  }

  public bool bullet {
    set {
      Box2DPINVOKE.b2BodyDef_bullet_set(swigCPtr, value);
    } 
    get {
      bool ret = Box2DPINVOKE.b2BodyDef_bullet_get(swigCPtr);
      return ret;
    } 
  }

  public bool active {
    set {
      Box2DPINVOKE.b2BodyDef_active_set(swigCPtr, value);
    } 
    get {
      bool ret = Box2DPINVOKE.b2BodyDef_active_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_void userData {
    set {
      Box2DPINVOKE.b2BodyDef_userData_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      IntPtr cPtr = Box2DPINVOKE.b2BodyDef_userData_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public float gravityScale {
    set {
      Box2DPINVOKE.b2BodyDef_gravityScale_set(swigCPtr, value);
    } 
    get {
      float ret = Box2DPINVOKE.b2BodyDef_gravityScale_get(swigCPtr);
      return ret;
    } 
  }

}

}
