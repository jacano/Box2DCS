/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Box2DCS {

using System;
using System.Runtime.InteropServices;

public class b2CircleShape : b2Shape {
  private HandleRef swigCPtr;

  internal b2CircleShape(IntPtr cPtr, bool cMemoryOwn) : base(Box2DPINVOKE.b2CircleShape_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(b2CircleShape obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~b2CircleShape() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Box2DPINVOKE.delete_b2CircleShape(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public b2CircleShape() : this(Box2DPINVOKE.new_b2CircleShape(), true) {
  }

  public override b2Shape Clone(b2BlockAllocator allocator) {
    IntPtr cPtr = Box2DPINVOKE.b2CircleShape_Clone(swigCPtr, b2BlockAllocator.getCPtr(allocator));
    b2Shape ret = (cPtr == IntPtr.Zero) ? null : new b2Shape(cPtr, false);
    return ret;
  }

  public override int GetChildCount() {
    int ret = Box2DPINVOKE.b2CircleShape_GetChildCount(swigCPtr);
    return ret;
  }

  public override bool TestPoint(b2Transform transform, b2Vec2 p) {
    bool ret = Box2DPINVOKE.b2CircleShape_TestPoint(swigCPtr, b2Transform.getCPtr(transform), b2Vec2.getCPtr(p));
    
    return ret;
  }

  public override bool RayCast(b2RayCastOutput output, b2RayCastInput input, b2Transform transform, int childIndex) {
    bool ret = Box2DPINVOKE.b2CircleShape_RayCast(swigCPtr, b2RayCastOutput.getCPtr(output), b2RayCastInput.getCPtr(input), b2Transform.getCPtr(transform), childIndex);
    
    return ret;
  }

  public override void ComputeAABB(b2AABB aabb, b2Transform transform, int childIndex) {
    Box2DPINVOKE.b2CircleShape_ComputeAABB(swigCPtr, b2AABB.getCPtr(aabb), b2Transform.getCPtr(transform), childIndex);
    
  }

  public override void ComputeMass(b2MassData massData, float density) {
    Box2DPINVOKE.b2CircleShape_ComputeMass(swigCPtr, b2MassData.getCPtr(massData), density);
  }

  public int GetSupport(b2Vec2 d) {
    int ret = Box2DPINVOKE.b2CircleShape_GetSupport(swigCPtr, b2Vec2.getCPtr(d));
    
    return ret;
  }

  public b2Vec2 GetSupportVertex(b2Vec2 d) {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2CircleShape_GetSupportVertex(swigCPtr, b2Vec2.getCPtr(d)), false);
    
    return ret;
  }

  public int GetVertexCount() {
    int ret = Box2DPINVOKE.b2CircleShape_GetVertexCount(swigCPtr);
    return ret;
  }

  public b2Vec2 GetVertex(int index) {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2CircleShape_GetVertex(swigCPtr, index), false);
    return ret;
  }

  public b2Vec2 m_p {
    set {
      Box2DPINVOKE.b2CircleShape_m_p_set(swigCPtr, b2Vec2.getCPtr(value));
    } 
    get {
      IntPtr cPtr = Box2DPINVOKE.b2CircleShape_m_p_get(swigCPtr);
      b2Vec2 ret = (cPtr == IntPtr.Zero) ? null : new b2Vec2(cPtr, false);
      return ret;
    } 
  }

}

}
