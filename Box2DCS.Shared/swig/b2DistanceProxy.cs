/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Box2DCS {

using System;
using System.Runtime.InteropServices;

public class b2DistanceProxy : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal b2DistanceProxy(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(b2DistanceProxy obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~b2DistanceProxy() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Box2DPINVOKE.delete_b2DistanceProxy(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public b2DistanceProxy() : this(Box2DPINVOKE.new_b2DistanceProxy(), true) {
  }

  public void Set(b2Shape shape, int index) {
    Box2DPINVOKE.b2DistanceProxy_Set(swigCPtr, b2Shape.getCPtr(shape), index);
  }

  public int GetSupport(b2Vec2 d) {
    int ret = Box2DPINVOKE.b2DistanceProxy_GetSupport(swigCPtr, b2Vec2.getCPtr(d));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public b2Vec2 GetSupportVertex(b2Vec2 d) {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2DistanceProxy_GetSupportVertex(swigCPtr, b2Vec2.getCPtr(d)), false);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetVertexCount() {
    int ret = Box2DPINVOKE.b2DistanceProxy_GetVertexCount(swigCPtr);
    return ret;
  }

  public b2Vec2 GetVertex(int index) {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2DistanceProxy_GetVertex(swigCPtr, index), false);
    return ret;
  }

  public b2Vec2 m_buffer {
    set {
      Box2DPINVOKE.b2DistanceProxy_m_buffer_set(swigCPtr, b2Vec2.getCPtr(value));
    } 
    get {
      IntPtr cPtr = Box2DPINVOKE.b2DistanceProxy_m_buffer_get(swigCPtr);
      b2Vec2 ret = (cPtr == IntPtr.Zero) ? null : new b2Vec2(cPtr, false);
      return ret;
    } 
  }

  public b2Vec2 m_vertices {
    set {
      Box2DPINVOKE.b2DistanceProxy_m_vertices_set(swigCPtr, b2Vec2.getCPtr(value));
    } 
    get {
      IntPtr cPtr = Box2DPINVOKE.b2DistanceProxy_m_vertices_get(swigCPtr);
      b2Vec2 ret = (cPtr == IntPtr.Zero) ? null : new b2Vec2(cPtr, false);
      return ret;
    } 
  }

  public int m_count {
    set {
      Box2DPINVOKE.b2DistanceProxy_m_count_set(swigCPtr, value);
    } 
    get {
      int ret = Box2DPINVOKE.b2DistanceProxy_m_count_get(swigCPtr);
      return ret;
    } 
  }

  public float m_radius {
    set {
      Box2DPINVOKE.b2DistanceProxy_m_radius_set(swigCPtr, value);
    } 
    get {
      float ret = Box2DPINVOKE.b2DistanceProxy_m_radius_get(swigCPtr);
      return ret;
    } 
  }

}

}
