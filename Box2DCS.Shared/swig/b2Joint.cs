/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Box2DCS {

using System;
using System.Runtime.InteropServices;

public class b2Joint : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal b2Joint(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(b2Joint obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public b2JointType GetType() {
    b2JointType ret = (b2JointType)Box2DPINVOKE.b2Joint_GetType(swigCPtr);
    return ret;
  }

  public b2Body GetBodyA() {
    IntPtr cPtr = Box2DPINVOKE.b2Joint_GetBodyA(swigCPtr);
    b2Body ret = (cPtr == IntPtr.Zero) ? null : new b2Body(cPtr, false);
    return ret;
  }

  public b2Body GetBodyB() {
    IntPtr cPtr = Box2DPINVOKE.b2Joint_GetBodyB(swigCPtr);
    b2Body ret = (cPtr == IntPtr.Zero) ? null : new b2Body(cPtr, false);
    return ret;
  }

  public virtual b2Vec2 GetAnchorA() {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2Joint_GetAnchorA(swigCPtr), true);
    return ret;
  }

  public virtual b2Vec2 GetAnchorB() {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2Joint_GetAnchorB(swigCPtr), true);
    return ret;
  }

  public virtual b2Vec2 GetReactionForce(float inv_dt) {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2Joint_GetReactionForce(swigCPtr, inv_dt), true);
    return ret;
  }

  public virtual float GetReactionTorque(float inv_dt) {
    float ret = Box2DPINVOKE.b2Joint_GetReactionTorque(swigCPtr, inv_dt);
    return ret;
  }

  public b2Joint GetNext() {
    IntPtr cPtr = Box2DPINVOKE.b2Joint_GetNext__SWIG_0(swigCPtr);
    b2Joint ret = (cPtr == IntPtr.Zero) ? null : new b2Joint(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_void GetUserData() {
    IntPtr cPtr = Box2DPINVOKE.b2Joint_GetUserData(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public void SetUserData(SWIGTYPE_p_void data) {
    Box2DPINVOKE.b2Joint_SetUserData(swigCPtr, SWIGTYPE_p_void.getCPtr(data));
  }

  public bool IsActive() {
    bool ret = Box2DPINVOKE.b2Joint_IsActive(swigCPtr);
    return ret;
  }

  public bool GetCollideConnected() {
    bool ret = Box2DPINVOKE.b2Joint_GetCollideConnected(swigCPtr);
    return ret;
  }

  public virtual void Dump() {
    Box2DPINVOKE.b2Joint_Dump(swigCPtr);
  }

}

}
