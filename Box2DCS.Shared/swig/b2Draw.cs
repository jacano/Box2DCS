/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Box2DCS {

using System;
using System.Runtime.InteropServices;

public class b2Draw : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal b2Draw(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(b2Draw obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~b2Draw() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Box2DPINVOKE.delete_b2Draw(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public void SetFlags(uint flags) {
    Box2DPINVOKE.b2Draw_SetFlags(swigCPtr, flags);
  }

  public uint GetFlags() {
    uint ret = Box2DPINVOKE.b2Draw_GetFlags(swigCPtr);
    return ret;
  }

  public void AppendFlags(uint flags) {
    Box2DPINVOKE.b2Draw_AppendFlags(swigCPtr, flags);
  }

  public void ClearFlags(uint flags) {
    Box2DPINVOKE.b2Draw_ClearFlags(swigCPtr, flags);
  }

  public virtual void DrawPolygon(b2Vec2 vertices, int vertexCount, b2Color color) {
    Box2DPINVOKE.b2Draw_DrawPolygon(swigCPtr, b2Vec2.getCPtr(vertices), vertexCount, b2Color.getCPtr(color));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void DrawSolidPolygon(b2Vec2 vertices, int vertexCount, b2Color color) {
    Box2DPINVOKE.b2Draw_DrawSolidPolygon(swigCPtr, b2Vec2.getCPtr(vertices), vertexCount, b2Color.getCPtr(color));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void DrawCircle(b2Vec2 center, float radius, b2Color color) {
    Box2DPINVOKE.b2Draw_DrawCircle(swigCPtr, b2Vec2.getCPtr(center), radius, b2Color.getCPtr(color));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void DrawSolidCircle(b2Vec2 center, float radius, b2Vec2 axis, b2Color color) {
    Box2DPINVOKE.b2Draw_DrawSolidCircle(swigCPtr, b2Vec2.getCPtr(center), radius, b2Vec2.getCPtr(axis), b2Color.getCPtr(color));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void DrawSegment(b2Vec2 p1, b2Vec2 p2, b2Color color) {
    Box2DPINVOKE.b2Draw_DrawSegment(swigCPtr, b2Vec2.getCPtr(p1), b2Vec2.getCPtr(p2), b2Color.getCPtr(color));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void DrawTransform(b2Transform xf) {
    Box2DPINVOKE.b2Draw_DrawTransform(swigCPtr, b2Transform.getCPtr(xf));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
  }

  public static readonly int e_shapeBit = Box2DPINVOKE.b2Draw_e_shapeBit_get();
  public static readonly int e_jointBit = Box2DPINVOKE.b2Draw_e_jointBit_get();
  public static readonly int e_aabbBit = Box2DPINVOKE.b2Draw_e_aabbBit_get();
  public static readonly int e_pairBit = Box2DPINVOKE.b2Draw_e_pairBit_get();
  public static readonly int e_centerOfMassBit = Box2DPINVOKE.b2Draw_e_centerOfMassBit_get();

}

}
