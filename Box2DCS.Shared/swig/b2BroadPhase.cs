/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Box2DCS {

using System;
using System.Runtime.InteropServices;

public class b2BroadPhase : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal b2BroadPhase(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(b2BroadPhase obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~b2BroadPhase() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Box2DPINVOKE.delete_b2BroadPhase(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public b2BroadPhase() : this(Box2DPINVOKE.new_b2BroadPhase(), true) {
  }

  public int CreateProxy(b2AABB aabb, SWIGTYPE_p_void userData) {
    int ret = Box2DPINVOKE.b2BroadPhase_CreateProxy(swigCPtr, b2AABB.getCPtr(aabb), SWIGTYPE_p_void.getCPtr(userData));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void DestroyProxy(int proxyId) {
    Box2DPINVOKE.b2BroadPhase_DestroyProxy(swigCPtr, proxyId);
  }

  public void MoveProxy(int proxyId, b2AABB aabb, b2Vec2 displacement) {
    Box2DPINVOKE.b2BroadPhase_MoveProxy(swigCPtr, proxyId, b2AABB.getCPtr(aabb), b2Vec2.getCPtr(displacement));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
  }

  public void TouchProxy(int proxyId) {
    Box2DPINVOKE.b2BroadPhase_TouchProxy(swigCPtr, proxyId);
  }

  public b2AABB GetFatAABB(int proxyId) {
    b2AABB ret = new b2AABB(Box2DPINVOKE.b2BroadPhase_GetFatAABB(swigCPtr, proxyId), false);
    return ret;
  }

  public SWIGTYPE_p_void GetUserData(int proxyId) {
    IntPtr cPtr = Box2DPINVOKE.b2BroadPhase_GetUserData(swigCPtr, proxyId);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public bool TestOverlap(int proxyIdA, int proxyIdB) {
    bool ret = Box2DPINVOKE.b2BroadPhase_TestOverlap(swigCPtr, proxyIdA, proxyIdB);
    return ret;
  }

  public int GetProxyCount() {
    int ret = Box2DPINVOKE.b2BroadPhase_GetProxyCount(swigCPtr);
    return ret;
  }

  public int GetTreeHeight() {
    int ret = Box2DPINVOKE.b2BroadPhase_GetTreeHeight(swigCPtr);
    return ret;
  }

  public int GetTreeBalance() {
    int ret = Box2DPINVOKE.b2BroadPhase_GetTreeBalance(swigCPtr);
    return ret;
  }

  public float GetTreeQuality() {
    float ret = Box2DPINVOKE.b2BroadPhase_GetTreeQuality(swigCPtr);
    return ret;
  }

  public static readonly int e_nullProxy = Box2DPINVOKE.b2BroadPhase_e_nullProxy_get();

}

}
