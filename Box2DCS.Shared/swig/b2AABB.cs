/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Box2DCS {

using System;
using System.Runtime.InteropServices;

public class b2AABB : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal b2AABB(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(b2AABB obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~b2AABB() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Box2DPINVOKE.delete_b2AABB(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public bool IsValid() {
    bool ret = Box2DPINVOKE.b2AABB_IsValid(swigCPtr);
    return ret;
  }

  public b2Vec2 GetCenter() {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2AABB_GetCenter(swigCPtr), true);
    return ret;
  }

  public b2Vec2 GetExtents() {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2AABB_GetExtents(swigCPtr), true);
    return ret;
  }

  public float GetPerimeter() {
    float ret = Box2DPINVOKE.b2AABB_GetPerimeter(swigCPtr);
    return ret;
  }

  public void Combine(b2AABB aabb) {
    Box2DPINVOKE.b2AABB_Combine__SWIG_0(swigCPtr, b2AABB.getCPtr(aabb));
    ////if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Combine(b2AABB aabb1, b2AABB aabb2) {
    Box2DPINVOKE.b2AABB_Combine__SWIG_1(swigCPtr, b2AABB.getCPtr(aabb1), b2AABB.getCPtr(aabb2));
    ////if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Contains(b2AABB aabb) {
    bool ret = Box2DPINVOKE.b2AABB_Contains(swigCPtr, b2AABB.getCPtr(aabb));
    ////if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool RayCast(b2RayCastOutput output, b2RayCastInput input) {
    bool ret = Box2DPINVOKE.b2AABB_RayCast(swigCPtr, b2RayCastOutput.getCPtr(output), b2RayCastInput.getCPtr(input));
    ////if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public b2Vec2 lowerBound {
    set {
      Box2DPINVOKE.b2AABB_lowerBound_set(swigCPtr, b2Vec2.getCPtr(value));
    } 
    get {
      IntPtr cPtr = Box2DPINVOKE.b2AABB_lowerBound_get(swigCPtr);
      b2Vec2 ret = (cPtr == IntPtr.Zero) ? null : new b2Vec2(cPtr, false);
      return ret;
    } 
  }

  public b2Vec2 upperBound {
    set {
      Box2DPINVOKE.b2AABB_upperBound_set(swigCPtr, b2Vec2.getCPtr(value));
    } 
    get {
      IntPtr cPtr = Box2DPINVOKE.b2AABB_upperBound_get(swigCPtr);
      b2Vec2 ret = (cPtr == IntPtr.Zero) ? null : new b2Vec2(cPtr, false);
      return ret;
    } 
  }

  public b2AABB() : this(Box2DPINVOKE.new_b2AABB(), true) {
  }

}

}
