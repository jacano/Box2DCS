/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>



#include "Box2D/Box2D.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT double SWIGSTDCALL CSharp_b2_pi_get() {
  double jresult ;
  double result;
  
  result = (double)(3.14159265359);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2_maxManifoldPoints_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2_maxPolygonVertices_get() {
  int jresult ;
  int result;
  
  result = (int)(8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_aabbExtension_get() {
  double jresult ;
  double result;
  
  result = (double)(0.1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_aabbMultiplier_get() {
  double jresult ;
  double result;
  
  result = (double)(2.0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_linearSlop_get() {
  double jresult ;
  double result;
  
  result = (double)(0.005);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_angularSlop_get() {
  double jresult ;
  double result;
  
  result = (double)((2.0/180.0*3.14159265359));
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_polygonRadius_get() {
  double jresult ;
  double result;
  
  result = (double)((2.0*0.005));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2_maxSubSteps_get() {
  int jresult ;
  int result;
  
  result = (int)(8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2_maxTOIContacts_get() {
  int jresult ;
  int result;
  
  result = (int)(32);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_velocityThreshold_get() {
  double jresult ;
  double result;
  
  result = (double)(1.0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_maxLinearCorrection_get() {
  double jresult ;
  double result;
  
  result = (double)(0.2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_maxAngularCorrection_get() {
  double jresult ;
  double result;
  
  result = (double)((8.0/180.0*3.14159265359));
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_maxTranslation_get() {
  double jresult ;
  double result;
  
  result = (double)(2.0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_maxTranslationSquared_get() {
  double jresult ;
  double result;
  
  result = (double)((2.0*2.0));
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_maxRotation_get() {
  double jresult ;
  double result;
  
  result = (double)((0.5*3.14159265359));
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_maxRotationSquared_get() {
  double jresult ;
  double result;
  
  result = (double)(((0.5*3.14159265359)*(0.5*3.14159265359)));
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_baumgarte_get() {
  double jresult ;
  double result;
  
  result = (double)(0.2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_toiBaugarte_get() {
  double jresult ;
  double result;
  
  result = (double)(0.75);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_timeToSleep_get() {
  double jresult ;
  double result;
  
  result = (double)(0.5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_linearSleepTolerance_get() {
  double jresult ;
  double result;
  
  result = (double)(0.01);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_angularSleepTolerance_get() {
  double jresult ;
  double result;
  
  result = (double)((2.0/180.0*3.14159265359));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Alloc(int jarg1) {
  void * jresult ;
  int32 arg1 ;
  void *result = 0 ;
  
  arg1 = (int32)jarg1; 
  result = (void *)b2Alloc(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Free(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = (void *)jarg1; 
  b2Free(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Log(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  b2Log((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Version_major_set(void * jarg1, int jarg2) {
  b2Version *arg1 = (b2Version *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2Version *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->major = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2Version_major_get(void * jarg1) {
  int jresult ;
  b2Version *arg1 = (b2Version *) 0 ;
  int32 result;
  
  arg1 = (b2Version *)jarg1; 
  result = (int32) ((arg1)->major);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Version_minor_set(void * jarg1, int jarg2) {
  b2Version *arg1 = (b2Version *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2Version *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->minor = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2Version_minor_get(void * jarg1) {
  int jresult ;
  b2Version *arg1 = (b2Version *) 0 ;
  int32 result;
  
  arg1 = (b2Version *)jarg1; 
  result = (int32) ((arg1)->minor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Version_revision_set(void * jarg1, int jarg2) {
  b2Version *arg1 = (b2Version *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2Version *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->revision = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2Version_revision_get(void * jarg1) {
  int jresult ;
  b2Version *arg1 = (b2Version *) 0 ;
  int32 result;
  
  arg1 = (b2Version *)jarg1; 
  result = (int32) ((arg1)->revision);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2Version() {
  void * jresult ;
  b2Version *result = 0 ;
  
  result = (b2Version *)new b2Version();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2Version(void * jarg1) {
  b2Version *arg1 = (b2Version *) 0 ;
  
  arg1 = (b2Version *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2_version_set(void * jarg1) {
  b2Version *arg1 = (b2Version *) 0 ;
  
  arg1 = (b2Version *)jarg1; 
  b2_version = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2_version_get() {
  void * jresult ;
  b2Version *result = 0 ;
  
  result = (b2Version *)&b2_version;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2IsValid(float jarg1) {
  unsigned int jresult ;
  float32 arg1 ;
  bool result;
  
  arg1 = (float32)jarg1; 
  result = (bool)b2IsValid(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2InvSqrt(float jarg1) {
  float jresult ;
  float32 arg1 ;
  float32 result;
  
  arg1 = (float32)jarg1; 
  result = (float32)b2InvSqrt(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2Vec2__SWIG_0() {
  void * jresult ;
  b2Vec2 *result = 0 ;
  
  result = (b2Vec2 *)new b2Vec2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2Vec2__SWIG_1(float jarg1, float jarg2) {
  void * jresult ;
  float32 arg1 ;
  float32 arg2 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (float32)jarg1; 
  arg2 = (float32)jarg2; 
  result = (b2Vec2 *)new b2Vec2(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Vec2_SetZero(void * jarg1) {
  b2Vec2 *arg1 = (b2Vec2 *) 0 ;
  
  arg1 = (b2Vec2 *)jarg1; 
  (arg1)->SetZero();
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Vec2_Set(void * jarg1, float jarg2, float jarg3) {
  b2Vec2 *arg1 = (b2Vec2 *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  
  arg1 = (b2Vec2 *)jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (float32)jarg3; 
  (arg1)->Set(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Vec2_Length(void * jarg1) {
  float jresult ;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ;
  float32 result;
  
  arg1 = (b2Vec2 *)jarg1; 
  result = (float32)((b2Vec2 const *)arg1)->Length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Vec2_LengthSquared(void * jarg1) {
  float jresult ;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ;
  float32 result;
  
  arg1 = (b2Vec2 *)jarg1; 
  result = (float32)((b2Vec2 const *)arg1)->LengthSquared();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Vec2_Normalize(void * jarg1) {
  float jresult ;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ;
  float32 result;
  
  arg1 = (b2Vec2 *)jarg1; 
  result = (float32)(arg1)->Normalize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2Vec2_IsValid(void * jarg1) {
  unsigned int jresult ;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ;
  bool result;
  
  arg1 = (b2Vec2 *)jarg1; 
  result = (bool)((b2Vec2 const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Vec2_Skew(void * jarg1) {
  void * jresult ;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2Vec2 *)jarg1; 
  result = ((b2Vec2 const *)arg1)->Skew();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Vec2_x_set(void * jarg1, float jarg2) {
  b2Vec2 *arg1 = (b2Vec2 *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Vec2 *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Vec2_x_get(void * jarg1) {
  float jresult ;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ;
  float32 result;
  
  arg1 = (b2Vec2 *)jarg1; 
  result = (float32) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Vec2_y_set(void * jarg1, float jarg2) {
  b2Vec2 *arg1 = (b2Vec2 *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Vec2 *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Vec2_y_get(void * jarg1) {
  float jresult ;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ;
  float32 result;
  
  arg1 = (b2Vec2 *)jarg1; 
  result = (float32) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2Vec2(void * jarg1) {
  b2Vec2 *arg1 = (b2Vec2 *) 0 ;
  
  arg1 = (b2Vec2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2Vec3__SWIG_0() {
  void * jresult ;
  b2Vec3 *result = 0 ;
  
  result = (b2Vec3 *)new b2Vec3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2Vec3__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float32 arg1 ;
  float32 arg2 ;
  float32 arg3 ;
  b2Vec3 *result = 0 ;
  
  arg1 = (float32)jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (float32)jarg3; 
  result = (b2Vec3 *)new b2Vec3(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Vec3_SetZero(void * jarg1) {
  b2Vec3 *arg1 = (b2Vec3 *) 0 ;
  
  arg1 = (b2Vec3 *)jarg1; 
  (arg1)->SetZero();
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Vec3_Set(void * jarg1, float jarg2, float jarg3, float jarg4) {
  b2Vec3 *arg1 = (b2Vec3 *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  float32 arg4 ;
  
  arg1 = (b2Vec3 *)jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (float32)jarg3; 
  arg4 = (float32)jarg4; 
  (arg1)->Set(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Vec3_x_set(void * jarg1, float jarg2) {
  b2Vec3 *arg1 = (b2Vec3 *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Vec3 *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Vec3_x_get(void * jarg1) {
  float jresult ;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ;
  float32 result;
  
  arg1 = (b2Vec3 *)jarg1; 
  result = (float32) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Vec3_y_set(void * jarg1, float jarg2) {
  b2Vec3 *arg1 = (b2Vec3 *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Vec3 *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Vec3_y_get(void * jarg1) {
  float jresult ;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ;
  float32 result;
  
  arg1 = (b2Vec3 *)jarg1; 
  result = (float32) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Vec3_z_set(void * jarg1, float jarg2) {
  b2Vec3 *arg1 = (b2Vec3 *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Vec3 *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Vec3_z_get(void * jarg1) {
  float jresult ;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ;
  float32 result;
  
  arg1 = (b2Vec3 *)jarg1; 
  result = (float32) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2Vec3(void * jarg1) {
  b2Vec3 *arg1 = (b2Vec3 *) 0 ;
  
  arg1 = (b2Vec3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2Mat22__SWIG_0() {
  void * jresult ;
  b2Mat22 *result = 0 ;
  
  result = (b2Mat22 *)new b2Mat22();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2Mat22__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Vec2 *arg1 = 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Mat22 *result = 0 ;
  
  arg1 = (b2Vec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = (b2Mat22 *)new b2Mat22((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2Mat22__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float32 arg1 ;
  float32 arg2 ;
  float32 arg3 ;
  float32 arg4 ;
  b2Mat22 *result = 0 ;
  
  arg1 = (float32)jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (float32)jarg3; 
  arg4 = (float32)jarg4; 
  result = (b2Mat22 *)new b2Mat22(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Mat22_Set(void * jarg1, void * jarg2, void * jarg3) {
  b2Mat22 *arg1 = (b2Mat22 *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 *arg3 = 0 ;
  
  arg1 = (b2Mat22 *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  arg3 = (b2Vec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  (arg1)->Set((b2Vec2 const &)*arg2,(b2Vec2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Mat22_SetIdentity(void * jarg1) {
  b2Mat22 *arg1 = (b2Mat22 *) 0 ;
  
  arg1 = (b2Mat22 *)jarg1; 
  (arg1)->SetIdentity();
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Mat22_SetZero(void * jarg1) {
  b2Mat22 *arg1 = (b2Mat22 *) 0 ;
  
  arg1 = (b2Mat22 *)jarg1; 
  (arg1)->SetZero();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Mat22_GetInverse(void * jarg1) {
  void * jresult ;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ;
  b2Mat22 result;
  
  arg1 = (b2Mat22 *)jarg1; 
  result = ((b2Mat22 const *)arg1)->GetInverse();
  jresult = new b2Mat22((const b2Mat22 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Mat22_Solve(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = (b2Mat22 *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = ((b2Mat22 const *)arg1)->Solve((b2Vec2 const &)*arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Mat22_ex_set(void * jarg1, void * jarg2) {
  b2Mat22 *arg1 = (b2Mat22 *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2Mat22 *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->ex = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Mat22_ex_get(void * jarg1) {
  void * jresult ;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2Mat22 *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->ex);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Mat22_ey_set(void * jarg1, void * jarg2) {
  b2Mat22 *arg1 = (b2Mat22 *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2Mat22 *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->ey = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Mat22_ey_get(void * jarg1) {
  void * jresult ;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2Mat22 *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->ey);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2Mat22(void * jarg1) {
  b2Mat22 *arg1 = (b2Mat22 *) 0 ;
  
  arg1 = (b2Mat22 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2Mat33__SWIG_0() {
  void * jresult ;
  b2Mat33 *result = 0 ;
  
  result = (b2Mat33 *)new b2Mat33();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2Mat33__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  b2Vec3 *arg1 = 0 ;
  b2Vec3 *arg2 = 0 ;
  b2Vec3 *arg3 = 0 ;
  b2Mat33 *result = 0 ;
  
  arg1 = (b2Vec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec3 const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec3 const & type is null", 0);
    return 0;
  } 
  arg3 = (b2Vec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec3 const & type is null", 0);
    return 0;
  } 
  result = (b2Mat33 *)new b2Mat33((b2Vec3 const &)*arg1,(b2Vec3 const &)*arg2,(b2Vec3 const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Mat33_SetZero(void * jarg1) {
  b2Mat33 *arg1 = (b2Mat33 *) 0 ;
  
  arg1 = (b2Mat33 *)jarg1; 
  (arg1)->SetZero();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Mat33_Solve33(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ;
  b2Vec3 *arg2 = 0 ;
  b2Vec3 result;
  
  arg1 = (b2Mat33 *)jarg1; 
  arg2 = (b2Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec3 const & type is null", 0);
    return 0;
  } 
  result = ((b2Mat33 const *)arg1)->Solve33((b2Vec3 const &)*arg2);
  jresult = new b2Vec3((const b2Vec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Mat33_Solve22(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = (b2Mat33 *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = ((b2Mat33 const *)arg1)->Solve22((b2Vec2 const &)*arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Mat33_GetInverse22(void * jarg1, void * jarg2) {
  b2Mat33 *arg1 = (b2Mat33 *) 0 ;
  b2Mat33 *arg2 = (b2Mat33 *) 0 ;
  
  arg1 = (b2Mat33 *)jarg1; 
  arg2 = (b2Mat33 *)jarg2; 
  ((b2Mat33 const *)arg1)->GetInverse22(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Mat33_GetSymInverse33(void * jarg1, void * jarg2) {
  b2Mat33 *arg1 = (b2Mat33 *) 0 ;
  b2Mat33 *arg2 = (b2Mat33 *) 0 ;
  
  arg1 = (b2Mat33 *)jarg1; 
  arg2 = (b2Mat33 *)jarg2; 
  ((b2Mat33 const *)arg1)->GetSymInverse33(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Mat33_ex_set(void * jarg1, void * jarg2) {
  b2Mat33 *arg1 = (b2Mat33 *) 0 ;
  b2Vec3 *arg2 = (b2Vec3 *) 0 ;
  
  arg1 = (b2Mat33 *)jarg1; 
  arg2 = (b2Vec3 *)jarg2; 
  if (arg1) (arg1)->ex = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Mat33_ex_get(void * jarg1) {
  void * jresult ;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ;
  b2Vec3 *result = 0 ;
  
  arg1 = (b2Mat33 *)jarg1; 
  result = (b2Vec3 *)& ((arg1)->ex);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Mat33_ey_set(void * jarg1, void * jarg2) {
  b2Mat33 *arg1 = (b2Mat33 *) 0 ;
  b2Vec3 *arg2 = (b2Vec3 *) 0 ;
  
  arg1 = (b2Mat33 *)jarg1; 
  arg2 = (b2Vec3 *)jarg2; 
  if (arg1) (arg1)->ey = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Mat33_ey_get(void * jarg1) {
  void * jresult ;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ;
  b2Vec3 *result = 0 ;
  
  arg1 = (b2Mat33 *)jarg1; 
  result = (b2Vec3 *)& ((arg1)->ey);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Mat33_ez_set(void * jarg1, void * jarg2) {
  b2Mat33 *arg1 = (b2Mat33 *) 0 ;
  b2Vec3 *arg2 = (b2Vec3 *) 0 ;
  
  arg1 = (b2Mat33 *)jarg1; 
  arg2 = (b2Vec3 *)jarg2; 
  if (arg1) (arg1)->ez = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Mat33_ez_get(void * jarg1) {
  void * jresult ;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ;
  b2Vec3 *result = 0 ;
  
  arg1 = (b2Mat33 *)jarg1; 
  result = (b2Vec3 *)& ((arg1)->ez);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2Mat33(void * jarg1) {
  b2Mat33 *arg1 = (b2Mat33 *) 0 ;
  
  arg1 = (b2Mat33 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2Rot__SWIG_0() {
  void * jresult ;
  b2Rot *result = 0 ;
  
  result = (b2Rot *)new b2Rot();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2Rot__SWIG_1(float jarg1) {
  void * jresult ;
  float32 arg1 ;
  b2Rot *result = 0 ;
  
  arg1 = (float32)jarg1; 
  result = (b2Rot *)new b2Rot(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Rot_Set(void * jarg1, float jarg2) {
  b2Rot *arg1 = (b2Rot *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Rot *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->Set(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Rot_SetIdentity(void * jarg1) {
  b2Rot *arg1 = (b2Rot *) 0 ;
  
  arg1 = (b2Rot *)jarg1; 
  (arg1)->SetIdentity();
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Rot_GetAngle(void * jarg1) {
  float jresult ;
  b2Rot *arg1 = (b2Rot *) 0 ;
  float32 result;
  
  arg1 = (b2Rot *)jarg1; 
  result = (float32)((b2Rot const *)arg1)->GetAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Rot_GetXAxis(void * jarg1) {
  void * jresult ;
  b2Rot *arg1 = (b2Rot *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2Rot *)jarg1; 
  result = ((b2Rot const *)arg1)->GetXAxis();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Rot_GetYAxis(void * jarg1) {
  void * jresult ;
  b2Rot *arg1 = (b2Rot *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2Rot *)jarg1; 
  result = ((b2Rot const *)arg1)->GetYAxis();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Rot_s_set(void * jarg1, float jarg2) {
  b2Rot *arg1 = (b2Rot *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Rot *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->s = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Rot_s_get(void * jarg1) {
  float jresult ;
  b2Rot *arg1 = (b2Rot *) 0 ;
  float32 result;
  
  arg1 = (b2Rot *)jarg1; 
  result = (float32) ((arg1)->s);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Rot_c_set(void * jarg1, float jarg2) {
  b2Rot *arg1 = (b2Rot *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Rot *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->c = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Rot_c_get(void * jarg1) {
  float jresult ;
  b2Rot *arg1 = (b2Rot *) 0 ;
  float32 result;
  
  arg1 = (b2Rot *)jarg1; 
  result = (float32) ((arg1)->c);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2Rot(void * jarg1) {
  b2Rot *arg1 = (b2Rot *) 0 ;
  
  arg1 = (b2Rot *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2Transform__SWIG_0() {
  void * jresult ;
  b2Transform *result = 0 ;
  
  result = (b2Transform *)new b2Transform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2Transform__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Vec2 *arg1 = 0 ;
  b2Rot *arg2 = 0 ;
  b2Transform *result = 0 ;
  
  arg1 = (b2Vec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Rot *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Rot const & type is null", 0);
    return 0;
  } 
  result = (b2Transform *)new b2Transform((b2Vec2 const &)*arg1,(b2Rot const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Transform_SetIdentity(void * jarg1) {
  b2Transform *arg1 = (b2Transform *) 0 ;
  
  arg1 = (b2Transform *)jarg1; 
  (arg1)->SetIdentity();
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Transform_Set(void * jarg1, void * jarg2, float jarg3) {
  b2Transform *arg1 = (b2Transform *) 0 ;
  b2Vec2 *arg2 = 0 ;
  float32 arg3 ;
  
  arg1 = (b2Transform *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  arg3 = (float32)jarg3; 
  (arg1)->Set((b2Vec2 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Transform_p_set(void * jarg1, void * jarg2) {
  b2Transform *arg1 = (b2Transform *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2Transform *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->p = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Transform_p_get(void * jarg1) {
  void * jresult ;
  b2Transform *arg1 = (b2Transform *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2Transform *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->p);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Transform_q_set(void * jarg1, void * jarg2) {
  b2Transform *arg1 = (b2Transform *) 0 ;
  b2Rot *arg2 = (b2Rot *) 0 ;
  
  arg1 = (b2Transform *)jarg1; 
  arg2 = (b2Rot *)jarg2; 
  if (arg1) (arg1)->q = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Transform_q_get(void * jarg1) {
  void * jresult ;
  b2Transform *arg1 = (b2Transform *) 0 ;
  b2Rot *result = 0 ;
  
  arg1 = (b2Transform *)jarg1; 
  result = (b2Rot *)& ((arg1)->q);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2Transform(void * jarg1) {
  b2Transform *arg1 = (b2Transform *) 0 ;
  
  arg1 = (b2Transform *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Sweep_GetTransform(void * jarg1, void * jarg2, float jarg3) {
  b2Sweep *arg1 = (b2Sweep *) 0 ;
  b2Transform *arg2 = (b2Transform *) 0 ;
  float32 arg3 ;
  
  arg1 = (b2Sweep *)jarg1; 
  arg2 = (b2Transform *)jarg2; 
  arg3 = (float32)jarg3; 
  ((b2Sweep const *)arg1)->GetTransform(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Sweep_Advance(void * jarg1, float jarg2) {
  b2Sweep *arg1 = (b2Sweep *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Sweep *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->Advance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Sweep_Normalize(void * jarg1) {
  b2Sweep *arg1 = (b2Sweep *) 0 ;
  
  arg1 = (b2Sweep *)jarg1; 
  (arg1)->Normalize();
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Sweep_localCenter_set(void * jarg1, void * jarg2) {
  b2Sweep *arg1 = (b2Sweep *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2Sweep *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->localCenter = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Sweep_localCenter_get(void * jarg1) {
  void * jresult ;
  b2Sweep *arg1 = (b2Sweep *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2Sweep *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->localCenter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Sweep_c0_set(void * jarg1, void * jarg2) {
  b2Sweep *arg1 = (b2Sweep *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2Sweep *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->c0 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Sweep_c0_get(void * jarg1) {
  void * jresult ;
  b2Sweep *arg1 = (b2Sweep *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2Sweep *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->c0);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Sweep_c_set(void * jarg1, void * jarg2) {
  b2Sweep *arg1 = (b2Sweep *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2Sweep *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->c = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Sweep_c_get(void * jarg1) {
  void * jresult ;
  b2Sweep *arg1 = (b2Sweep *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2Sweep *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->c);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Sweep_a0_set(void * jarg1, float jarg2) {
  b2Sweep *arg1 = (b2Sweep *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Sweep *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->a0 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Sweep_a0_get(void * jarg1) {
  float jresult ;
  b2Sweep *arg1 = (b2Sweep *) 0 ;
  float32 result;
  
  arg1 = (b2Sweep *)jarg1; 
  result = (float32) ((arg1)->a0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Sweep_a_set(void * jarg1, float jarg2) {
  b2Sweep *arg1 = (b2Sweep *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Sweep *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Sweep_a_get(void * jarg1) {
  float jresult ;
  b2Sweep *arg1 = (b2Sweep *) 0 ;
  float32 result;
  
  arg1 = (b2Sweep *)jarg1; 
  result = (float32) ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Sweep_alpha0_set(void * jarg1, float jarg2) {
  b2Sweep *arg1 = (b2Sweep *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Sweep *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->alpha0 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Sweep_alpha0_get(void * jarg1) {
  float jresult ;
  b2Sweep *arg1 = (b2Sweep *) 0 ;
  float32 result;
  
  arg1 = (b2Sweep *)jarg1; 
  result = (float32) ((arg1)->alpha0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2Sweep() {
  void * jresult ;
  b2Sweep *result = 0 ;
  
  result = (b2Sweep *)new b2Sweep();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2Sweep(void * jarg1) {
  b2Sweep *arg1 = (b2Sweep *) 0 ;
  
  arg1 = (b2Sweep *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Vec2_zero_get() {
  void * jresult ;
  b2Vec2 *result = 0 ;
  
  result = (b2Vec2 *)&b2Vec2_zero;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Dot__SWIG_0(void * jarg1, void * jarg2) {
  float jresult ;
  b2Vec2 *arg1 = 0 ;
  b2Vec2 *arg2 = 0 ;
  float32 result;
  
  arg1 = (b2Vec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = (float32)b2Dot((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Cross__SWIG_0(void * jarg1, void * jarg2) {
  float jresult ;
  b2Vec2 *arg1 = 0 ;
  b2Vec2 *arg2 = 0 ;
  float32 result;
  
  arg1 = (b2Vec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = (float32)b2Cross((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Cross__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  b2Vec2 *arg1 = 0 ;
  float32 arg2 ;
  b2Vec2 result;
  
  arg1 = (b2Vec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  arg2 = (float32)jarg2; 
  result = b2Cross((b2Vec2 const &)*arg1,arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Cross__SWIG_2(float jarg1, void * jarg2) {
  void * jresult ;
  float32 arg1 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = (float32)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = b2Cross(arg1,(b2Vec2 const &)*arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Mul__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Mat22 *arg1 = 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = (b2Mat22 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Mat22 const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = b2Mul((b2Mat22 const &)*arg1,(b2Vec2 const &)*arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2MulT__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Mat22 *arg1 = 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = (b2Mat22 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Mat22 const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = b2MulT((b2Mat22 const &)*arg1,(b2Vec2 const &)*arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Distance__SWIG_0(void * jarg1, void * jarg2) {
  float jresult ;
  b2Vec2 *arg1 = 0 ;
  b2Vec2 *arg2 = 0 ;
  float32 result;
  
  arg1 = (b2Vec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = (float32)b2Distance((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2DistanceSquared(void * jarg1, void * jarg2) {
  float jresult ;
  b2Vec2 *arg1 = 0 ;
  b2Vec2 *arg2 = 0 ;
  float32 result;
  
  arg1 = (b2Vec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = (float32)b2DistanceSquared((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Dot__SWIG_1(void * jarg1, void * jarg2) {
  float jresult ;
  b2Vec3 *arg1 = 0 ;
  b2Vec3 *arg2 = 0 ;
  float32 result;
  
  arg1 = (b2Vec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec3 const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec3 const & type is null", 0);
    return 0;
  } 
  result = (float32)b2Dot((b2Vec3 const &)*arg1,(b2Vec3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Cross__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Vec3 *arg1 = 0 ;
  b2Vec3 *arg2 = 0 ;
  b2Vec3 result;
  
  arg1 = (b2Vec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec3 const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec3 const & type is null", 0);
    return 0;
  } 
  result = b2Cross((b2Vec3 const &)*arg1,(b2Vec3 const &)*arg2);
  jresult = new b2Vec3((const b2Vec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Mul__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Mat22 *arg1 = 0 ;
  b2Mat22 *arg2 = 0 ;
  b2Mat22 result;
  
  arg1 = (b2Mat22 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Mat22 const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Mat22 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Mat22 const & type is null", 0);
    return 0;
  } 
  result = b2Mul((b2Mat22 const &)*arg1,(b2Mat22 const &)*arg2);
  jresult = new b2Mat22((const b2Mat22 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2MulT__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Mat22 *arg1 = 0 ;
  b2Mat22 *arg2 = 0 ;
  b2Mat22 result;
  
  arg1 = (b2Mat22 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Mat22 const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Mat22 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Mat22 const & type is null", 0);
    return 0;
  } 
  result = b2MulT((b2Mat22 const &)*arg1,(b2Mat22 const &)*arg2);
  jresult = new b2Mat22((const b2Mat22 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Mul__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Mat33 *arg1 = 0 ;
  b2Vec3 *arg2 = 0 ;
  b2Vec3 result;
  
  arg1 = (b2Mat33 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Mat33 const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec3 const & type is null", 0);
    return 0;
  } 
  result = b2Mul((b2Mat33 const &)*arg1,(b2Vec3 const &)*arg2);
  jresult = new b2Vec3((const b2Vec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Mul22(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Mat33 *arg1 = 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = (b2Mat33 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Mat33 const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = b2Mul22((b2Mat33 const &)*arg1,(b2Vec2 const &)*arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Mul__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Rot *arg1 = 0 ;
  b2Rot *arg2 = 0 ;
  b2Rot result;
  
  arg1 = (b2Rot *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Rot const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Rot *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Rot const & type is null", 0);
    return 0;
  } 
  result = b2Mul((b2Rot const &)*arg1,(b2Rot const &)*arg2);
  jresult = new b2Rot((const b2Rot &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2MulT__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Rot *arg1 = 0 ;
  b2Rot *arg2 = 0 ;
  b2Rot result;
  
  arg1 = (b2Rot *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Rot const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Rot *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Rot const & type is null", 0);
    return 0;
  } 
  result = b2MulT((b2Rot const &)*arg1,(b2Rot const &)*arg2);
  jresult = new b2Rot((const b2Rot &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Mul__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Rot *arg1 = 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = (b2Rot *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Rot const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = b2Mul((b2Rot const &)*arg1,(b2Vec2 const &)*arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2MulT__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Rot *arg1 = 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = (b2Rot *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Rot const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = b2MulT((b2Rot const &)*arg1,(b2Vec2 const &)*arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Mul__SWIG_5(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Transform *arg1 = 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = (b2Transform *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = b2Mul((b2Transform const &)*arg1,(b2Vec2 const &)*arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2MulT__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Transform *arg1 = 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = (b2Transform *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = b2MulT((b2Transform const &)*arg1,(b2Vec2 const &)*arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Mul__SWIG_6(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Transform *arg1 = 0 ;
  b2Transform *arg2 = 0 ;
  b2Transform result;
  
  arg1 = (b2Transform *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Transform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return 0;
  } 
  result = b2Mul((b2Transform const &)*arg1,(b2Transform const &)*arg2);
  jresult = new b2Transform((const b2Transform &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2MulT__SWIG_5(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Transform *arg1 = 0 ;
  b2Transform *arg2 = 0 ;
  b2Transform result;
  
  arg1 = (b2Transform *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Transform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return 0;
  } 
  result = b2MulT((b2Transform const &)*arg1,(b2Transform const &)*arg2);
  jresult = new b2Transform((const b2Transform &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Abs__SWIG_1(void * jarg1) {
  void * jresult ;
  b2Vec2 *arg1 = 0 ;
  b2Vec2 result;
  
  arg1 = (b2Vec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = b2Abs((b2Vec2 const &)*arg1);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Abs__SWIG_2(void * jarg1) {
  void * jresult ;
  b2Mat22 *arg1 = 0 ;
  b2Mat22 result;
  
  arg1 = (b2Mat22 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Mat22 const & type is null", 0);
    return 0;
  } 
  result = b2Abs((b2Mat22 const &)*arg1);
  jresult = new b2Mat22((const b2Mat22 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Min(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Vec2 *arg1 = 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = (b2Vec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = b2Min((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Max(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Vec2 *arg1 = 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = (b2Vec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = b2Max((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Clamp(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  b2Vec2 *arg1 = 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 *arg3 = 0 ;
  b2Vec2 result;
  
  arg1 = (b2Vec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  arg3 = (b2Vec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = b2Clamp((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2,(b2Vec2 const &)*arg3);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2NextPowerOfTwo(unsigned int jarg1) {
  unsigned int jresult ;
  uint32 arg1 ;
  uint32 result;
  
  arg1 = (uint32)jarg1; 
  result = (uint32)b2NextPowerOfTwo(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2IsPowerOfTwo(unsigned int jarg1) {
  unsigned int jresult ;
  uint32 arg1 ;
  bool result;
  
  arg1 = (uint32)jarg1; 
  result = (bool)b2IsPowerOfTwo(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2Color__SWIG_0() {
  void * jresult ;
  b2Color *result = 0 ;
  
  result = (b2Color *)new b2Color();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2Color__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float32 arg1 ;
  float32 arg2 ;
  float32 arg3 ;
  b2Color *result = 0 ;
  
  arg1 = (float32)jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (float32)jarg3; 
  result = (b2Color *)new b2Color(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Color_Set(void * jarg1, float jarg2, float jarg3, float jarg4) {
  b2Color *arg1 = (b2Color *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  float32 arg4 ;
  
  arg1 = (b2Color *)jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (float32)jarg3; 
  arg4 = (float32)jarg4; 
  (arg1)->Set(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Color_r_set(void * jarg1, float jarg2) {
  b2Color *arg1 = (b2Color *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Color *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Color_r_get(void * jarg1) {
  float jresult ;
  b2Color *arg1 = (b2Color *) 0 ;
  float32 result;
  
  arg1 = (b2Color *)jarg1; 
  result = (float32) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Color_g_set(void * jarg1, float jarg2) {
  b2Color *arg1 = (b2Color *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Color *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Color_g_get(void * jarg1) {
  float jresult ;
  b2Color *arg1 = (b2Color *) 0 ;
  float32 result;
  
  arg1 = (b2Color *)jarg1; 
  result = (float32) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Color_b_set(void * jarg1, float jarg2) {
  b2Color *arg1 = (b2Color *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Color *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Color_b_get(void * jarg1) {
  float jresult ;
  b2Color *arg1 = (b2Color *) 0 ;
  float32 result;
  
  arg1 = (b2Color *)jarg1; 
  result = (float32) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2Color(void * jarg1) {
  b2Color *arg1 = (b2Color *) 0 ;
  
  arg1 = (b2Color *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2Draw(void * jarg1) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  
  arg1 = (b2Draw *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2Draw_e_shapeBit_get() {
  int jresult ;
  int result;
  
  result = (int)b2Draw::e_shapeBit;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2Draw_e_jointBit_get() {
  int jresult ;
  int result;
  
  result = (int)b2Draw::e_jointBit;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2Draw_e_aabbBit_get() {
  int jresult ;
  int result;
  
  result = (int)b2Draw::e_aabbBit;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2Draw_e_pairBit_get() {
  int jresult ;
  int result;
  
  result = (int)b2Draw::e_pairBit;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2Draw_e_centerOfMassBit_get() {
  int jresult ;
  int result;
  
  result = (int)b2Draw::e_centerOfMassBit;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Draw_SetFlags(void * jarg1, unsigned int jarg2) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  uint32 arg2 ;
  
  arg1 = (b2Draw *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetFlags(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2Draw_GetFlags(void * jarg1) {
  unsigned int jresult ;
  b2Draw *arg1 = (b2Draw *) 0 ;
  uint32 result;
  
  arg1 = (b2Draw *)jarg1; 
  result = (uint32)((b2Draw const *)arg1)->GetFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Draw_AppendFlags(void * jarg1, unsigned int jarg2) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  uint32 arg2 ;
  
  arg1 = (b2Draw *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->AppendFlags(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Draw_ClearFlags(void * jarg1, unsigned int jarg2) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  uint32 arg2 ;
  
  arg1 = (b2Draw *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->ClearFlags(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Draw_DrawPolygon(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  int32 arg3 ;
  b2Color *arg4 = 0 ;
  
  arg1 = (b2Draw *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  arg3 = (int32)jarg3; 
  arg4 = (b2Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Color const & type is null", 0);
    return ;
  } 
  (arg1)->DrawPolygon((b2Vec2 const *)arg2,arg3,(b2Color const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Draw_DrawSolidPolygon(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  int32 arg3 ;
  b2Color *arg4 = 0 ;
  
  arg1 = (b2Draw *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  arg3 = (int32)jarg3; 
  arg4 = (b2Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Color const & type is null", 0);
    return ;
  } 
  (arg1)->DrawSolidPolygon((b2Vec2 const *)arg2,arg3,(b2Color const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Draw_DrawCircle(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  b2Vec2 *arg2 = 0 ;
  float32 arg3 ;
  b2Color *arg4 = 0 ;
  
  arg1 = (b2Draw *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  arg3 = (float32)jarg3; 
  arg4 = (b2Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Color const & type is null", 0);
    return ;
  } 
  (arg1)->DrawCircle((b2Vec2 const &)*arg2,arg3,(b2Color const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Draw_DrawSolidCircle(void * jarg1, void * jarg2, float jarg3, void * jarg4, void * jarg5) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  b2Vec2 *arg2 = 0 ;
  float32 arg3 ;
  b2Vec2 *arg4 = 0 ;
  b2Color *arg5 = 0 ;
  
  arg1 = (b2Draw *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  arg3 = (float32)jarg3; 
  arg4 = (b2Vec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  arg5 = (b2Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Color const & type is null", 0);
    return ;
  } 
  (arg1)->DrawSolidCircle((b2Vec2 const &)*arg2,arg3,(b2Vec2 const &)*arg4,(b2Color const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Draw_DrawSegment(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 *arg3 = 0 ;
  b2Color *arg4 = 0 ;
  
  arg1 = (b2Draw *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  arg3 = (b2Vec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  arg4 = (b2Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Color const & type is null", 0);
    return ;
  } 
  (arg1)->DrawSegment((b2Vec2 const &)*arg2,(b2Vec2 const &)*arg3,(b2Color const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Draw_DrawTransform(void * jarg1, void * jarg2) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  b2Transform *arg2 = 0 ;
  
  arg1 = (b2Draw *)jarg1; 
  arg2 = (b2Transform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  (arg1)->DrawTransform((b2Transform const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2Timer() {
  void * jresult ;
  b2Timer *result = 0 ;
  
  result = (b2Timer *)new b2Timer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Timer_Reset(void * jarg1) {
  b2Timer *arg1 = (b2Timer *) 0 ;
  
  arg1 = (b2Timer *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Timer_GetMilliseconds(void * jarg1) {
  float jresult ;
  b2Timer *arg1 = (b2Timer *) 0 ;
  float32 result;
  
  arg1 = (b2Timer *)jarg1; 
  result = (float32)((b2Timer const *)arg1)->GetMilliseconds();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2Timer(void * jarg1) {
  b2Timer *arg1 = (b2Timer *) 0 ;
  
  arg1 = (b2Timer *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2_chunkSize_get() {
  int jresult ;
  int32 result;
  
  result = (int32)(int32)b2_chunkSize;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2_maxBlockSize_get() {
  int jresult ;
  int32 result;
  
  result = (int32)(int32)b2_maxBlockSize;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2_blockSizes_get() {
  int jresult ;
  int32 result;
  
  result = (int32)(int32)b2_blockSizes;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2_chunkArrayIncrement_get() {
  int jresult ;
  int32 result;
  
  result = (int32)(int32)b2_chunkArrayIncrement;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2BlockAllocator() {
  void * jresult ;
  b2BlockAllocator *result = 0 ;
  
  result = (b2BlockAllocator *)new b2BlockAllocator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2BlockAllocator(void * jarg1) {
  b2BlockAllocator *arg1 = (b2BlockAllocator *) 0 ;
  
  arg1 = (b2BlockAllocator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2BlockAllocator_Allocate(void * jarg1, int jarg2) {
  void * jresult ;
  b2BlockAllocator *arg1 = (b2BlockAllocator *) 0 ;
  int32 arg2 ;
  void *result = 0 ;
  
  arg1 = (b2BlockAllocator *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (void *)(arg1)->Allocate(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2BlockAllocator_Free(void * jarg1, void * jarg2, int jarg3) {
  b2BlockAllocator *arg1 = (b2BlockAllocator *) 0 ;
  void *arg2 = (void *) 0 ;
  int32 arg3 ;
  
  arg1 = (b2BlockAllocator *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (int32)jarg3; 
  (arg1)->Free(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2BlockAllocator_Clear(void * jarg1) {
  b2BlockAllocator *arg1 = (b2BlockAllocator *) 0 ;
  
  arg1 = (b2BlockAllocator *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_b2_nullFeature_get() {
  unsigned char jresult ;
  uint8 result;
  
  result = (uint8)(uint8)b2_nullFeature;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactFeature_indexA_set(void * jarg1, unsigned char jarg2) {
  b2ContactFeature *arg1 = (b2ContactFeature *) 0 ;
  uint8 arg2 ;
  
  arg1 = (b2ContactFeature *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->indexA = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_b2ContactFeature_indexA_get(void * jarg1) {
  unsigned char jresult ;
  b2ContactFeature *arg1 = (b2ContactFeature *) 0 ;
  uint8 result;
  
  arg1 = (b2ContactFeature *)jarg1; 
  result = (uint8) ((arg1)->indexA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactFeature_indexB_set(void * jarg1, unsigned char jarg2) {
  b2ContactFeature *arg1 = (b2ContactFeature *) 0 ;
  uint8 arg2 ;
  
  arg1 = (b2ContactFeature *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->indexB = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_b2ContactFeature_indexB_get(void * jarg1) {
  unsigned char jresult ;
  b2ContactFeature *arg1 = (b2ContactFeature *) 0 ;
  uint8 result;
  
  arg1 = (b2ContactFeature *)jarg1; 
  result = (uint8) ((arg1)->indexB);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactFeature_typeA_set(void * jarg1, unsigned char jarg2) {
  b2ContactFeature *arg1 = (b2ContactFeature *) 0 ;
  uint8 arg2 ;
  
  arg1 = (b2ContactFeature *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->typeA = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_b2ContactFeature_typeA_get(void * jarg1) {
  unsigned char jresult ;
  b2ContactFeature *arg1 = (b2ContactFeature *) 0 ;
  uint8 result;
  
  arg1 = (b2ContactFeature *)jarg1; 
  result = (uint8) ((arg1)->typeA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactFeature_typeB_set(void * jarg1, unsigned char jarg2) {
  b2ContactFeature *arg1 = (b2ContactFeature *) 0 ;
  uint8 arg2 ;
  
  arg1 = (b2ContactFeature *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->typeB = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_b2ContactFeature_typeB_get(void * jarg1) {
  unsigned char jresult ;
  b2ContactFeature *arg1 = (b2ContactFeature *) 0 ;
  uint8 result;
  
  arg1 = (b2ContactFeature *)jarg1; 
  result = (uint8) ((arg1)->typeB);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2ContactFeature() {
  void * jresult ;
  b2ContactFeature *result = 0 ;
  
  result = (b2ContactFeature *)new b2ContactFeature();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2ContactFeature(void * jarg1) {
  b2ContactFeature *arg1 = (b2ContactFeature *) 0 ;
  
  arg1 = (b2ContactFeature *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactID_cf_set(void * jarg1, void * jarg2) {
  b2ContactID *arg1 = (b2ContactID *) 0 ;
  b2ContactFeature *arg2 = (b2ContactFeature *) 0 ;
  
  arg1 = (b2ContactID *)jarg1; 
  arg2 = (b2ContactFeature *)jarg2; 
  if (arg1) (arg1)->cf = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2ContactID_cf_get(void * jarg1) {
  void * jresult ;
  b2ContactID *arg1 = (b2ContactID *) 0 ;
  b2ContactFeature *result = 0 ;
  
  arg1 = (b2ContactID *)jarg1; 
  result = (b2ContactFeature *)& ((arg1)->cf);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactID_key_set(void * jarg1, unsigned int jarg2) {
  b2ContactID *arg1 = (b2ContactID *) 0 ;
  uint32 arg2 ;
  
  arg1 = (b2ContactID *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->key = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2ContactID_key_get(void * jarg1) {
  unsigned int jresult ;
  b2ContactID *arg1 = (b2ContactID *) 0 ;
  uint32 result;
  
  arg1 = (b2ContactID *)jarg1; 
  result = (uint32) ((arg1)->key);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2ContactID() {
  void * jresult ;
  b2ContactID *result = 0 ;
  
  result = (b2ContactID *)new b2ContactID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2ContactID(void * jarg1) {
  b2ContactID *arg1 = (b2ContactID *) 0 ;
  
  arg1 = (b2ContactID *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ManifoldPoint_localPoint_set(void * jarg1, void * jarg2) {
  b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2ManifoldPoint *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->localPoint = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2ManifoldPoint_localPoint_get(void * jarg1) {
  void * jresult ;
  b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2ManifoldPoint *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->localPoint);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ManifoldPoint_normalImpulse_set(void * jarg1, float jarg2) {
  b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2ManifoldPoint *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->normalImpulse = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2ManifoldPoint_normalImpulse_get(void * jarg1) {
  float jresult ;
  b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ;
  float32 result;
  
  arg1 = (b2ManifoldPoint *)jarg1; 
  result = (float32) ((arg1)->normalImpulse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ManifoldPoint_tangentImpulse_set(void * jarg1, float jarg2) {
  b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2ManifoldPoint *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->tangentImpulse = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2ManifoldPoint_tangentImpulse_get(void * jarg1) {
  float jresult ;
  b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ;
  float32 result;
  
  arg1 = (b2ManifoldPoint *)jarg1; 
  result = (float32) ((arg1)->tangentImpulse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ManifoldPoint_id_set(void * jarg1, void * jarg2) {
  b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ;
  b2ContactID *arg2 = (b2ContactID *) 0 ;
  
  arg1 = (b2ManifoldPoint *)jarg1; 
  arg2 = (b2ContactID *)jarg2; 
  if (arg1) (arg1)->id = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2ManifoldPoint_id_get(void * jarg1) {
  void * jresult ;
  b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ;
  b2ContactID *result = 0 ;
  
  arg1 = (b2ManifoldPoint *)jarg1; 
  result = (b2ContactID *)& ((arg1)->id);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2ManifoldPoint() {
  void * jresult ;
  b2ManifoldPoint *result = 0 ;
  
  result = (b2ManifoldPoint *)new b2ManifoldPoint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2ManifoldPoint(void * jarg1) {
  b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ;
  
  arg1 = (b2ManifoldPoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Manifold_points_set(void * jarg1, void * jarg2) {
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  b2ManifoldPoint *arg2 ;
  
  arg1 = (b2Manifold *)jarg1; 
  arg2 = (b2ManifoldPoint *)jarg2; 
  {
    size_t ii;
    b2ManifoldPoint *b = (b2ManifoldPoint *) arg1->points;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((b2ManifoldPoint *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Manifold_points_get(void * jarg1) {
  void * jresult ;
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  b2ManifoldPoint *result = 0 ;
  
  arg1 = (b2Manifold *)jarg1; 
  result = (b2ManifoldPoint *)(b2ManifoldPoint *) ((arg1)->points);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Manifold_localNormal_set(void * jarg1, void * jarg2) {
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2Manifold *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->localNormal = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Manifold_localNormal_get(void * jarg1) {
  void * jresult ;
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2Manifold *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->localNormal);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Manifold_localPoint_set(void * jarg1, void * jarg2) {
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2Manifold *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->localPoint = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Manifold_localPoint_get(void * jarg1) {
  void * jresult ;
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2Manifold *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->localPoint);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Manifold_type_set(void * jarg1, int jarg2) {
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  b2Manifold::Type arg2 ;
  
  arg1 = (b2Manifold *)jarg1; 
  arg2 = (b2Manifold::Type)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2Manifold_type_get(void * jarg1) {
  int jresult ;
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  b2Manifold::Type result;
  
  arg1 = (b2Manifold *)jarg1; 
  result = (b2Manifold::Type) ((arg1)->type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Manifold_pointCount_set(void * jarg1, int jarg2) {
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2Manifold *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->pointCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2Manifold_pointCount_get(void * jarg1) {
  int jresult ;
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  int32 result;
  
  arg1 = (b2Manifold *)jarg1; 
  result = (int32) ((arg1)->pointCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2Manifold() {
  void * jresult ;
  b2Manifold *result = 0 ;
  
  result = (b2Manifold *)new b2Manifold();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2Manifold(void * jarg1) {
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  
  arg1 = (b2Manifold *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2WorldManifold_Initialize(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5, float jarg6) {
  b2WorldManifold *arg1 = (b2WorldManifold *) 0 ;
  b2Manifold *arg2 = (b2Manifold *) 0 ;
  b2Transform *arg3 = 0 ;
  float32 arg4 ;
  b2Transform *arg5 = 0 ;
  float32 arg6 ;
  
  arg1 = (b2WorldManifold *)jarg1; 
  arg2 = (b2Manifold *)jarg2; 
  arg3 = (b2Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  arg4 = (float32)jarg4; 
  arg5 = (b2Transform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  arg6 = (float32)jarg6; 
  (arg1)->Initialize((b2Manifold const *)arg2,(b2Transform const &)*arg3,arg4,(b2Transform const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2WorldManifold_normal_set(void * jarg1, void * jarg2) {
  b2WorldManifold *arg1 = (b2WorldManifold *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2WorldManifold *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->normal = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2WorldManifold_normal_get(void * jarg1) {
  void * jresult ;
  b2WorldManifold *arg1 = (b2WorldManifold *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2WorldManifold *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->normal);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2WorldManifold_points_set(void * jarg1, void * jarg2) {
  b2WorldManifold *arg1 = (b2WorldManifold *) 0 ;
  b2Vec2 *arg2 ;
  
  arg1 = (b2WorldManifold *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  {
    size_t ii;
    b2Vec2 *b = (b2Vec2 *) arg1->points;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((b2Vec2 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2WorldManifold_points_get(void * jarg1) {
  void * jresult ;
  b2WorldManifold *arg1 = (b2WorldManifold *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2WorldManifold *)jarg1; 
  result = (b2Vec2 *)(b2Vec2 *) ((arg1)->points);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2WorldManifold() {
  void * jresult ;
  b2WorldManifold *result = 0 ;
  
  result = (b2WorldManifold *)new b2WorldManifold();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2WorldManifold(void * jarg1) {
  b2WorldManifold *arg1 = (b2WorldManifold *) 0 ;
  
  arg1 = (b2WorldManifold *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2GetPointStates(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  b2PointState *arg1 ;
  b2PointState *arg2 ;
  b2Manifold *arg3 = (b2Manifold *) 0 ;
  b2Manifold *arg4 = (b2Manifold *) 0 ;
  
  arg1 = (b2PointState *)jarg1; 
  arg2 = (b2PointState *)jarg2; 
  arg3 = (b2Manifold *)jarg3; 
  arg4 = (b2Manifold *)jarg4; 
  b2GetPointStates(arg1,arg2,(b2Manifold const *)arg3,(b2Manifold const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ClipVertex_v_set(void * jarg1, void * jarg2) {
  b2ClipVertex *arg1 = (b2ClipVertex *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2ClipVertex *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->v = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2ClipVertex_v_get(void * jarg1) {
  void * jresult ;
  b2ClipVertex *arg1 = (b2ClipVertex *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2ClipVertex *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->v);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ClipVertex_id_set(void * jarg1, void * jarg2) {
  b2ClipVertex *arg1 = (b2ClipVertex *) 0 ;
  b2ContactID *arg2 = (b2ContactID *) 0 ;
  
  arg1 = (b2ClipVertex *)jarg1; 
  arg2 = (b2ContactID *)jarg2; 
  if (arg1) (arg1)->id = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2ClipVertex_id_get(void * jarg1) {
  void * jresult ;
  b2ClipVertex *arg1 = (b2ClipVertex *) 0 ;
  b2ContactID *result = 0 ;
  
  arg1 = (b2ClipVertex *)jarg1; 
  result = (b2ContactID *)& ((arg1)->id);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2ClipVertex() {
  void * jresult ;
  b2ClipVertex *result = 0 ;
  
  result = (b2ClipVertex *)new b2ClipVertex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2ClipVertex(void * jarg1) {
  b2ClipVertex *arg1 = (b2ClipVertex *) 0 ;
  
  arg1 = (b2ClipVertex *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2RayCastInput_p1_set(void * jarg1, void * jarg2) {
  b2RayCastInput *arg1 = (b2RayCastInput *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2RayCastInput *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->p1 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2RayCastInput_p1_get(void * jarg1) {
  void * jresult ;
  b2RayCastInput *arg1 = (b2RayCastInput *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2RayCastInput *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->p1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2RayCastInput_p2_set(void * jarg1, void * jarg2) {
  b2RayCastInput *arg1 = (b2RayCastInput *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2RayCastInput *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->p2 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2RayCastInput_p2_get(void * jarg1) {
  void * jresult ;
  b2RayCastInput *arg1 = (b2RayCastInput *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2RayCastInput *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->p2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2RayCastInput_maxFraction_set(void * jarg1, float jarg2) {
  b2RayCastInput *arg1 = (b2RayCastInput *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2RayCastInput *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->maxFraction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2RayCastInput_maxFraction_get(void * jarg1) {
  float jresult ;
  b2RayCastInput *arg1 = (b2RayCastInput *) 0 ;
  float32 result;
  
  arg1 = (b2RayCastInput *)jarg1; 
  result = (float32) ((arg1)->maxFraction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2RayCastInput() {
  void * jresult ;
  b2RayCastInput *result = 0 ;
  
  result = (b2RayCastInput *)new b2RayCastInput();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2RayCastInput(void * jarg1) {
  b2RayCastInput *arg1 = (b2RayCastInput *) 0 ;
  
  arg1 = (b2RayCastInput *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2RayCastOutput_normal_set(void * jarg1, void * jarg2) {
  b2RayCastOutput *arg1 = (b2RayCastOutput *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2RayCastOutput *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->normal = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2RayCastOutput_normal_get(void * jarg1) {
  void * jresult ;
  b2RayCastOutput *arg1 = (b2RayCastOutput *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2RayCastOutput *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->normal);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2RayCastOutput_fraction_set(void * jarg1, float jarg2) {
  b2RayCastOutput *arg1 = (b2RayCastOutput *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2RayCastOutput *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->fraction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2RayCastOutput_fraction_get(void * jarg1) {
  float jresult ;
  b2RayCastOutput *arg1 = (b2RayCastOutput *) 0 ;
  float32 result;
  
  arg1 = (b2RayCastOutput *)jarg1; 
  result = (float32) ((arg1)->fraction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2RayCastOutput() {
  void * jresult ;
  b2RayCastOutput *result = 0 ;
  
  result = (b2RayCastOutput *)new b2RayCastOutput();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2RayCastOutput(void * jarg1) {
  b2RayCastOutput *arg1 = (b2RayCastOutput *) 0 ;
  
  arg1 = (b2RayCastOutput *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2AABB_IsValid(void * jarg1) {
  unsigned int jresult ;
  b2AABB *arg1 = (b2AABB *) 0 ;
  bool result;
  
  arg1 = (b2AABB *)jarg1; 
  result = (bool)((b2AABB const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2AABB_GetCenter(void * jarg1) {
  void * jresult ;
  b2AABB *arg1 = (b2AABB *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2AABB *)jarg1; 
  result = ((b2AABB const *)arg1)->GetCenter();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2AABB_GetExtents(void * jarg1) {
  void * jresult ;
  b2AABB *arg1 = (b2AABB *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2AABB *)jarg1; 
  result = ((b2AABB const *)arg1)->GetExtents();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2AABB_GetPerimeter(void * jarg1) {
  float jresult ;
  b2AABB *arg1 = (b2AABB *) 0 ;
  float32 result;
  
  arg1 = (b2AABB *)jarg1; 
  result = (float32)((b2AABB const *)arg1)->GetPerimeter();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2AABB_Combine__SWIG_0(void * jarg1, void * jarg2) {
  b2AABB *arg1 = (b2AABB *) 0 ;
  b2AABB *arg2 = 0 ;
  
  arg1 = (b2AABB *)jarg1; 
  arg2 = (b2AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2AABB const & type is null", 0);
    return ;
  } 
  (arg1)->Combine((b2AABB const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2AABB_Combine__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  b2AABB *arg1 = (b2AABB *) 0 ;
  b2AABB *arg2 = 0 ;
  b2AABB *arg3 = 0 ;
  
  arg1 = (b2AABB *)jarg1; 
  arg2 = (b2AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2AABB const & type is null", 0);
    return ;
  } 
  arg3 = (b2AABB *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2AABB const & type is null", 0);
    return ;
  } 
  (arg1)->Combine((b2AABB const &)*arg2,(b2AABB const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2AABB_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  b2AABB *arg1 = (b2AABB *) 0 ;
  b2AABB *arg2 = 0 ;
  bool result;
  
  arg1 = (b2AABB *)jarg1; 
  arg2 = (b2AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2AABB const & type is null", 0);
    return 0;
  } 
  result = (bool)((b2AABB const *)arg1)->Contains((b2AABB const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2AABB_RayCast(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  b2AABB *arg1 = (b2AABB *) 0 ;
  b2RayCastOutput *arg2 = (b2RayCastOutput *) 0 ;
  b2RayCastInput *arg3 = 0 ;
  bool result;
  
  arg1 = (b2AABB *)jarg1; 
  arg2 = (b2RayCastOutput *)jarg2; 
  arg3 = (b2RayCastInput *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2RayCastInput const & type is null", 0);
    return 0;
  } 
  result = (bool)((b2AABB const *)arg1)->RayCast(arg2,(b2RayCastInput const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2AABB_lowerBound_set(void * jarg1, void * jarg2) {
  b2AABB *arg1 = (b2AABB *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2AABB *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->lowerBound = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2AABB_lowerBound_get(void * jarg1) {
  void * jresult ;
  b2AABB *arg1 = (b2AABB *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2AABB *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->lowerBound);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2AABB_upperBound_set(void * jarg1, void * jarg2) {
  b2AABB *arg1 = (b2AABB *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2AABB *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->upperBound = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2AABB_upperBound_get(void * jarg1) {
  void * jresult ;
  b2AABB *arg1 = (b2AABB *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2AABB *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->upperBound);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2AABB() {
  void * jresult ;
  b2AABB *result = 0 ;
  
  result = (b2AABB *)new b2AABB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2AABB(void * jarg1) {
  b2AABB *arg1 = (b2AABB *) 0 ;
  
  arg1 = (b2AABB *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2CollideCircles(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  b2CircleShape *arg2 = (b2CircleShape *) 0 ;
  b2Transform *arg3 = 0 ;
  b2CircleShape *arg4 = (b2CircleShape *) 0 ;
  b2Transform *arg5 = 0 ;
  
  arg1 = (b2Manifold *)jarg1; 
  arg2 = (b2CircleShape *)jarg2; 
  arg3 = (b2Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  arg4 = (b2CircleShape *)jarg4; 
  arg5 = (b2Transform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  b2CollideCircles(arg1,(b2CircleShape const *)arg2,(b2Transform const &)*arg3,(b2CircleShape const *)arg4,(b2Transform const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2CollidePolygonAndCircle(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  b2PolygonShape *arg2 = (b2PolygonShape *) 0 ;
  b2Transform *arg3 = 0 ;
  b2CircleShape *arg4 = (b2CircleShape *) 0 ;
  b2Transform *arg5 = 0 ;
  
  arg1 = (b2Manifold *)jarg1; 
  arg2 = (b2PolygonShape *)jarg2; 
  arg3 = (b2Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  arg4 = (b2CircleShape *)jarg4; 
  arg5 = (b2Transform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  b2CollidePolygonAndCircle(arg1,(b2PolygonShape const *)arg2,(b2Transform const &)*arg3,(b2CircleShape const *)arg4,(b2Transform const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2CollidePolygons(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  b2PolygonShape *arg2 = (b2PolygonShape *) 0 ;
  b2Transform *arg3 = 0 ;
  b2PolygonShape *arg4 = (b2PolygonShape *) 0 ;
  b2Transform *arg5 = 0 ;
  
  arg1 = (b2Manifold *)jarg1; 
  arg2 = (b2PolygonShape *)jarg2; 
  arg3 = (b2Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  arg4 = (b2PolygonShape *)jarg4; 
  arg5 = (b2Transform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  b2CollidePolygons(arg1,(b2PolygonShape const *)arg2,(b2Transform const &)*arg3,(b2PolygonShape const *)arg4,(b2Transform const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2CollideEdgeAndCircle(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  b2EdgeShape *arg2 = (b2EdgeShape *) 0 ;
  b2Transform *arg3 = 0 ;
  b2CircleShape *arg4 = (b2CircleShape *) 0 ;
  b2Transform *arg5 = 0 ;
  
  arg1 = (b2Manifold *)jarg1; 
  arg2 = (b2EdgeShape *)jarg2; 
  arg3 = (b2Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  arg4 = (b2CircleShape *)jarg4; 
  arg5 = (b2Transform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  b2CollideEdgeAndCircle(arg1,(b2EdgeShape const *)arg2,(b2Transform const &)*arg3,(b2CircleShape const *)arg4,(b2Transform const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2CollideEdgeAndPolygon(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  b2EdgeShape *arg2 = (b2EdgeShape *) 0 ;
  b2Transform *arg3 = 0 ;
  b2PolygonShape *arg4 = (b2PolygonShape *) 0 ;
  b2Transform *arg5 = 0 ;
  
  arg1 = (b2Manifold *)jarg1; 
  arg2 = (b2EdgeShape *)jarg2; 
  arg3 = (b2Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  arg4 = (b2PolygonShape *)jarg4; 
  arg5 = (b2Transform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  b2CollideEdgeAndPolygon(arg1,(b2EdgeShape const *)arg2,(b2Transform const &)*arg3,(b2PolygonShape const *)arg4,(b2Transform const &)*arg5);
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2ClipSegmentToLine(void * jarg1, void * jarg2, void * jarg3, float jarg4, int jarg5) {
  int jresult ;
  b2ClipVertex *arg1 ;
  b2ClipVertex *arg2 ;
  b2Vec2 *arg3 = 0 ;
  float32 arg4 ;
  int32 arg5 ;
  int32 result;
  
  arg1 = (b2ClipVertex *)jarg1; 
  arg2 = (b2ClipVertex *)jarg2; 
  arg3 = (b2Vec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  arg4 = (float32)jarg4; 
  arg5 = (int32)jarg5; 
  result = (int32)b2ClipSegmentToLine(arg1,(b2ClipVertex const (*))arg2,(b2Vec2 const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2TestOverlap__SWIG_0(void * jarg1, int jarg2, void * jarg3, int jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  b2Shape *arg1 = (b2Shape *) 0 ;
  int32 arg2 ;
  b2Shape *arg3 = (b2Shape *) 0 ;
  int32 arg4 ;
  b2Transform *arg5 = 0 ;
  b2Transform *arg6 = 0 ;
  bool result;
  
  arg1 = (b2Shape *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (b2Shape *)jarg3; 
  arg4 = (int32)jarg4; 
  arg5 = (b2Transform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return 0;
  } 
  arg6 = (b2Transform *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return 0;
  } 
  result = (bool)b2TestOverlap((b2Shape const *)arg1,arg2,(b2Shape const *)arg3,arg4,(b2Transform const &)*arg5,(b2Transform const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2TestOverlap__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  b2AABB *arg1 = 0 ;
  b2AABB *arg2 = 0 ;
  bool result;
  
  arg1 = (b2AABB *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2AABB const & type is null", 0);
    return 0;
  } 
  arg2 = (b2AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2AABB const & type is null", 0);
    return 0;
  } 
  result = (bool)b2TestOverlap((b2AABB const &)*arg1,(b2AABB const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2MassData_mass_set(void * jarg1, float jarg2) {
  b2MassData *arg1 = (b2MassData *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2MassData *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->mass = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2MassData_mass_get(void * jarg1) {
  float jresult ;
  b2MassData *arg1 = (b2MassData *) 0 ;
  float32 result;
  
  arg1 = (b2MassData *)jarg1; 
  result = (float32) ((arg1)->mass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2MassData_center_set(void * jarg1, void * jarg2) {
  b2MassData *arg1 = (b2MassData *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2MassData *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->center = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2MassData_center_get(void * jarg1) {
  void * jresult ;
  b2MassData *arg1 = (b2MassData *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2MassData *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->center);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2MassData_I_set(void * jarg1, float jarg2) {
  b2MassData *arg1 = (b2MassData *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2MassData *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->I = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2MassData_I_get(void * jarg1) {
  float jresult ;
  b2MassData *arg1 = (b2MassData *) 0 ;
  float32 result;
  
  arg1 = (b2MassData *)jarg1; 
  result = (float32) ((arg1)->I);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2MassData() {
  void * jresult ;
  b2MassData *result = 0 ;
  
  result = (b2MassData *)new b2MassData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2MassData(void * jarg1) {
  b2MassData *arg1 = (b2MassData *) 0 ;
  
  arg1 = (b2MassData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2Shape(void * jarg1) {
  b2Shape *arg1 = (b2Shape *) 0 ;
  
  arg1 = (b2Shape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Shape_Clone(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Shape *arg1 = (b2Shape *) 0 ;
  b2BlockAllocator *arg2 = (b2BlockAllocator *) 0 ;
  b2Shape *result = 0 ;
  
  arg1 = (b2Shape *)jarg1; 
  arg2 = (b2BlockAllocator *)jarg2; 
  result = (b2Shape *)((b2Shape const *)arg1)->Clone(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2Shape_GetType(void * jarg1) {
  int jresult ;
  b2Shape *arg1 = (b2Shape *) 0 ;
  b2Shape::Type result;
  
  arg1 = (b2Shape *)jarg1; 
  result = (b2Shape::Type)((b2Shape const *)arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2Shape_GetChildCount(void * jarg1) {
  int jresult ;
  b2Shape *arg1 = (b2Shape *) 0 ;
  int32 result;
  
  arg1 = (b2Shape *)jarg1; 
  result = (int32)((b2Shape const *)arg1)->GetChildCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2Shape_TestPoint(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  b2Shape *arg1 = (b2Shape *) 0 ;
  b2Transform *arg2 = 0 ;
  b2Vec2 *arg3 = 0 ;
  bool result;
  
  arg1 = (b2Shape *)jarg1; 
  arg2 = (b2Transform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return 0;
  } 
  arg3 = (b2Vec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = (bool)((b2Shape const *)arg1)->TestPoint((b2Transform const &)*arg2,(b2Vec2 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2Shape_RayCast(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  b2Shape *arg1 = (b2Shape *) 0 ;
  b2RayCastOutput *arg2 = (b2RayCastOutput *) 0 ;
  b2RayCastInput *arg3 = 0 ;
  b2Transform *arg4 = 0 ;
  int32 arg5 ;
  bool result;
  
  arg1 = (b2Shape *)jarg1; 
  arg2 = (b2RayCastOutput *)jarg2; 
  arg3 = (b2RayCastInput *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2RayCastInput const & type is null", 0);
    return 0;
  } 
  arg4 = (b2Transform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return 0;
  } 
  arg5 = (int32)jarg5; 
  result = (bool)((b2Shape const *)arg1)->RayCast(arg2,(b2RayCastInput const &)*arg3,(b2Transform const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Shape_ComputeAABB(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  b2Shape *arg1 = (b2Shape *) 0 ;
  b2AABB *arg2 = (b2AABB *) 0 ;
  b2Transform *arg3 = 0 ;
  int32 arg4 ;
  
  arg1 = (b2Shape *)jarg1; 
  arg2 = (b2AABB *)jarg2; 
  arg3 = (b2Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  arg4 = (int32)jarg4; 
  ((b2Shape const *)arg1)->ComputeAABB(arg2,(b2Transform const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Shape_ComputeMass(void * jarg1, void * jarg2, float jarg3) {
  b2Shape *arg1 = (b2Shape *) 0 ;
  b2MassData *arg2 = (b2MassData *) 0 ;
  float32 arg3 ;
  
  arg1 = (b2Shape *)jarg1; 
  arg2 = (b2MassData *)jarg2; 
  arg3 = (float32)jarg3; 
  ((b2Shape const *)arg1)->ComputeMass(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Shape_m_type_set(void * jarg1, int jarg2) {
  b2Shape *arg1 = (b2Shape *) 0 ;
  b2Shape::Type arg2 ;
  
  arg1 = (b2Shape *)jarg1; 
  arg2 = (b2Shape::Type)jarg2; 
  if (arg1) (arg1)->m_type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2Shape_m_type_get(void * jarg1) {
  int jresult ;
  b2Shape *arg1 = (b2Shape *) 0 ;
  b2Shape::Type result;
  
  arg1 = (b2Shape *)jarg1; 
  result = (b2Shape::Type) ((arg1)->m_type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Shape_m_radius_set(void * jarg1, float jarg2) {
  b2Shape *arg1 = (b2Shape *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Shape *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->m_radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Shape_m_radius_get(void * jarg1) {
  float jresult ;
  b2Shape *arg1 = (b2Shape *) 0 ;
  float32 result;
  
  arg1 = (b2Shape *)jarg1; 
  result = (float32) ((arg1)->m_radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2CircleShape() {
  void * jresult ;
  b2CircleShape *result = 0 ;
  
  result = (b2CircleShape *)new b2CircleShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2CircleShape_Clone(void * jarg1, void * jarg2) {
  void * jresult ;
  b2CircleShape *arg1 = (b2CircleShape *) 0 ;
  b2BlockAllocator *arg2 = (b2BlockAllocator *) 0 ;
  b2Shape *result = 0 ;
  
  arg1 = (b2CircleShape *)jarg1; 
  arg2 = (b2BlockAllocator *)jarg2; 
  result = (b2Shape *)((b2CircleShape const *)arg1)->Clone(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2CircleShape_GetChildCount(void * jarg1) {
  int jresult ;
  b2CircleShape *arg1 = (b2CircleShape *) 0 ;
  int32 result;
  
  arg1 = (b2CircleShape *)jarg1; 
  result = (int32)((b2CircleShape const *)arg1)->GetChildCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2CircleShape_TestPoint(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  b2CircleShape *arg1 = (b2CircleShape *) 0 ;
  b2Transform *arg2 = 0 ;
  b2Vec2 *arg3 = 0 ;
  bool result;
  
  arg1 = (b2CircleShape *)jarg1; 
  arg2 = (b2Transform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return 0;
  } 
  arg3 = (b2Vec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = (bool)((b2CircleShape const *)arg1)->TestPoint((b2Transform const &)*arg2,(b2Vec2 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2CircleShape_RayCast(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  b2CircleShape *arg1 = (b2CircleShape *) 0 ;
  b2RayCastOutput *arg2 = (b2RayCastOutput *) 0 ;
  b2RayCastInput *arg3 = 0 ;
  b2Transform *arg4 = 0 ;
  int32 arg5 ;
  bool result;
  
  arg1 = (b2CircleShape *)jarg1; 
  arg2 = (b2RayCastOutput *)jarg2; 
  arg3 = (b2RayCastInput *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2RayCastInput const & type is null", 0);
    return 0;
  } 
  arg4 = (b2Transform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return 0;
  } 
  arg5 = (int32)jarg5; 
  result = (bool)((b2CircleShape const *)arg1)->RayCast(arg2,(b2RayCastInput const &)*arg3,(b2Transform const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2CircleShape_ComputeAABB(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  b2CircleShape *arg1 = (b2CircleShape *) 0 ;
  b2AABB *arg2 = (b2AABB *) 0 ;
  b2Transform *arg3 = 0 ;
  int32 arg4 ;
  
  arg1 = (b2CircleShape *)jarg1; 
  arg2 = (b2AABB *)jarg2; 
  arg3 = (b2Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  arg4 = (int32)jarg4; 
  ((b2CircleShape const *)arg1)->ComputeAABB(arg2,(b2Transform const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2CircleShape_ComputeMass(void * jarg1, void * jarg2, float jarg3) {
  b2CircleShape *arg1 = (b2CircleShape *) 0 ;
  b2MassData *arg2 = (b2MassData *) 0 ;
  float32 arg3 ;
  
  arg1 = (b2CircleShape *)jarg1; 
  arg2 = (b2MassData *)jarg2; 
  arg3 = (float32)jarg3; 
  ((b2CircleShape const *)arg1)->ComputeMass(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2CircleShape_GetSupport(void * jarg1, void * jarg2) {
  int jresult ;
  b2CircleShape *arg1 = (b2CircleShape *) 0 ;
  b2Vec2 *arg2 = 0 ;
  int32 result;
  
  arg1 = (b2CircleShape *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = (int32)((b2CircleShape const *)arg1)->GetSupport((b2Vec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2CircleShape_GetSupportVertex(void * jarg1, void * jarg2) {
  void * jresult ;
  b2CircleShape *arg1 = (b2CircleShape *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2CircleShape *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = (b2Vec2 *) &((b2CircleShape const *)arg1)->GetSupportVertex((b2Vec2 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2CircleShape_GetVertexCount(void * jarg1) {
  int jresult ;
  b2CircleShape *arg1 = (b2CircleShape *) 0 ;
  int32 result;
  
  arg1 = (b2CircleShape *)jarg1; 
  result = (int32)((b2CircleShape const *)arg1)->GetVertexCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2CircleShape_GetVertex(void * jarg1, int jarg2) {
  void * jresult ;
  b2CircleShape *arg1 = (b2CircleShape *) 0 ;
  int32 arg2 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2CircleShape *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (b2Vec2 *) &((b2CircleShape const *)arg1)->GetVertex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2CircleShape_m_p_set(void * jarg1, void * jarg2) {
  b2CircleShape *arg1 = (b2CircleShape *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2CircleShape *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->m_p = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2CircleShape_m_p_get(void * jarg1) {
  void * jresult ;
  b2CircleShape *arg1 = (b2CircleShape *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2CircleShape *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->m_p);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2CircleShape(void * jarg1) {
  b2CircleShape *arg1 = (b2CircleShape *) 0 ;
  
  arg1 = (b2CircleShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2EdgeShape() {
  void * jresult ;
  b2EdgeShape *result = 0 ;
  
  result = (b2EdgeShape *)new b2EdgeShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2EdgeShape_Set(void * jarg1, void * jarg2, void * jarg3) {
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 *arg3 = 0 ;
  
  arg1 = (b2EdgeShape *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  arg3 = (b2Vec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  (arg1)->Set((b2Vec2 const &)*arg2,(b2Vec2 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2EdgeShape_Clone(void * jarg1, void * jarg2) {
  void * jresult ;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  b2BlockAllocator *arg2 = (b2BlockAllocator *) 0 ;
  b2Shape *result = 0 ;
  
  arg1 = (b2EdgeShape *)jarg1; 
  arg2 = (b2BlockAllocator *)jarg2; 
  result = (b2Shape *)((b2EdgeShape const *)arg1)->Clone(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2EdgeShape_GetChildCount(void * jarg1) {
  int jresult ;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  int32 result;
  
  arg1 = (b2EdgeShape *)jarg1; 
  result = (int32)((b2EdgeShape const *)arg1)->GetChildCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2EdgeShape_TestPoint(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  b2Transform *arg2 = 0 ;
  b2Vec2 *arg3 = 0 ;
  bool result;
  
  arg1 = (b2EdgeShape *)jarg1; 
  arg2 = (b2Transform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return 0;
  } 
  arg3 = (b2Vec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = (bool)((b2EdgeShape const *)arg1)->TestPoint((b2Transform const &)*arg2,(b2Vec2 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2EdgeShape_RayCast(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  b2RayCastOutput *arg2 = (b2RayCastOutput *) 0 ;
  b2RayCastInput *arg3 = 0 ;
  b2Transform *arg4 = 0 ;
  int32 arg5 ;
  bool result;
  
  arg1 = (b2EdgeShape *)jarg1; 
  arg2 = (b2RayCastOutput *)jarg2; 
  arg3 = (b2RayCastInput *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2RayCastInput const & type is null", 0);
    return 0;
  } 
  arg4 = (b2Transform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return 0;
  } 
  arg5 = (int32)jarg5; 
  result = (bool)((b2EdgeShape const *)arg1)->RayCast(arg2,(b2RayCastInput const &)*arg3,(b2Transform const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2EdgeShape_ComputeAABB(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  b2AABB *arg2 = (b2AABB *) 0 ;
  b2Transform *arg3 = 0 ;
  int32 arg4 ;
  
  arg1 = (b2EdgeShape *)jarg1; 
  arg2 = (b2AABB *)jarg2; 
  arg3 = (b2Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  arg4 = (int32)jarg4; 
  ((b2EdgeShape const *)arg1)->ComputeAABB(arg2,(b2Transform const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2EdgeShape_ComputeMass(void * jarg1, void * jarg2, float jarg3) {
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  b2MassData *arg2 = (b2MassData *) 0 ;
  float32 arg3 ;
  
  arg1 = (b2EdgeShape *)jarg1; 
  arg2 = (b2MassData *)jarg2; 
  arg3 = (float32)jarg3; 
  ((b2EdgeShape const *)arg1)->ComputeMass(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2EdgeShape_m_vertex1_set(void * jarg1, void * jarg2) {
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2EdgeShape *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->m_vertex1 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2EdgeShape_m_vertex1_get(void * jarg1) {
  void * jresult ;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2EdgeShape *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->m_vertex1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2EdgeShape_m_vertex2_set(void * jarg1, void * jarg2) {
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2EdgeShape *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->m_vertex2 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2EdgeShape_m_vertex2_get(void * jarg1) {
  void * jresult ;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2EdgeShape *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->m_vertex2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2EdgeShape_m_vertex0_set(void * jarg1, void * jarg2) {
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2EdgeShape *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->m_vertex0 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2EdgeShape_m_vertex0_get(void * jarg1) {
  void * jresult ;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2EdgeShape *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->m_vertex0);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2EdgeShape_m_vertex3_set(void * jarg1, void * jarg2) {
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2EdgeShape *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->m_vertex3 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2EdgeShape_m_vertex3_get(void * jarg1) {
  void * jresult ;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2EdgeShape *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->m_vertex3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2EdgeShape_m_hasVertex0_set(void * jarg1, unsigned int jarg2) {
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  bool arg2 ;
  
  arg1 = (b2EdgeShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_hasVertex0 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2EdgeShape_m_hasVertex0_get(void * jarg1) {
  unsigned int jresult ;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  bool result;
  
  arg1 = (b2EdgeShape *)jarg1; 
  result = (bool) ((arg1)->m_hasVertex0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2EdgeShape_m_hasVertex3_set(void * jarg1, unsigned int jarg2) {
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  bool arg2 ;
  
  arg1 = (b2EdgeShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_hasVertex3 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2EdgeShape_m_hasVertex3_get(void * jarg1) {
  unsigned int jresult ;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  bool result;
  
  arg1 = (b2EdgeShape *)jarg1; 
  result = (bool) ((arg1)->m_hasVertex3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2EdgeShape(void * jarg1) {
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  
  arg1 = (b2EdgeShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2ChainShape() {
  void * jresult ;
  b2ChainShape *result = 0 ;
  
  result = (b2ChainShape *)new b2ChainShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2ChainShape(void * jarg1) {
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ChainShape_CreateLoop(void * jarg1, void * jarg2, int jarg3) {
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  int32 arg3 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  arg3 = (int32)jarg3; 
  (arg1)->CreateLoop((b2Vec2 const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ChainShape_CreateChain(void * jarg1, void * jarg2, int jarg3) {
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  int32 arg3 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  arg3 = (int32)jarg3; 
  (arg1)->CreateChain((b2Vec2 const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ChainShape_SetPrevVertex(void * jarg1, void * jarg2) {
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  b2Vec2 *arg2 = 0 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  (arg1)->SetPrevVertex((b2Vec2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ChainShape_SetNextVertex(void * jarg1, void * jarg2) {
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  b2Vec2 *arg2 = 0 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  (arg1)->SetNextVertex((b2Vec2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2ChainShape_Clone(void * jarg1, void * jarg2) {
  void * jresult ;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  b2BlockAllocator *arg2 = (b2BlockAllocator *) 0 ;
  b2Shape *result = 0 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  arg2 = (b2BlockAllocator *)jarg2; 
  result = (b2Shape *)((b2ChainShape const *)arg1)->Clone(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2ChainShape_GetChildCount(void * jarg1) {
  int jresult ;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  int32 result;
  
  arg1 = (b2ChainShape *)jarg1; 
  result = (int32)((b2ChainShape const *)arg1)->GetChildCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ChainShape_GetChildEdge(void * jarg1, void * jarg2, int jarg3) {
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  b2EdgeShape *arg2 = (b2EdgeShape *) 0 ;
  int32 arg3 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  arg2 = (b2EdgeShape *)jarg2; 
  arg3 = (int32)jarg3; 
  ((b2ChainShape const *)arg1)->GetChildEdge(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2ChainShape_TestPoint(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  b2Transform *arg2 = 0 ;
  b2Vec2 *arg3 = 0 ;
  bool result;
  
  arg1 = (b2ChainShape *)jarg1; 
  arg2 = (b2Transform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return 0;
  } 
  arg3 = (b2Vec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = (bool)((b2ChainShape const *)arg1)->TestPoint((b2Transform const &)*arg2,(b2Vec2 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2ChainShape_RayCast(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  b2RayCastOutput *arg2 = (b2RayCastOutput *) 0 ;
  b2RayCastInput *arg3 = 0 ;
  b2Transform *arg4 = 0 ;
  int32 arg5 ;
  bool result;
  
  arg1 = (b2ChainShape *)jarg1; 
  arg2 = (b2RayCastOutput *)jarg2; 
  arg3 = (b2RayCastInput *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2RayCastInput const & type is null", 0);
    return 0;
  } 
  arg4 = (b2Transform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return 0;
  } 
  arg5 = (int32)jarg5; 
  result = (bool)((b2ChainShape const *)arg1)->RayCast(arg2,(b2RayCastInput const &)*arg3,(b2Transform const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ChainShape_ComputeAABB(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  b2AABB *arg2 = (b2AABB *) 0 ;
  b2Transform *arg3 = 0 ;
  int32 arg4 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  arg2 = (b2AABB *)jarg2; 
  arg3 = (b2Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  arg4 = (int32)jarg4; 
  ((b2ChainShape const *)arg1)->ComputeAABB(arg2,(b2Transform const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ChainShape_ComputeMass(void * jarg1, void * jarg2, float jarg3) {
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  b2MassData *arg2 = (b2MassData *) 0 ;
  float32 arg3 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  arg2 = (b2MassData *)jarg2; 
  arg3 = (float32)jarg3; 
  ((b2ChainShape const *)arg1)->ComputeMass(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ChainShape_m_vertices_set(void * jarg1, void * jarg2) {
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->m_vertices = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2ChainShape_m_vertices_get(void * jarg1) {
  void * jresult ;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  result = (b2Vec2 *) ((arg1)->m_vertices);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ChainShape_m_count_set(void * jarg1, int jarg2) {
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->m_count = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2ChainShape_m_count_get(void * jarg1) {
  int jresult ;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  int32 result;
  
  arg1 = (b2ChainShape *)jarg1; 
  result = (int32) ((arg1)->m_count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ChainShape_m_prevVertex_set(void * jarg1, void * jarg2) {
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->m_prevVertex = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2ChainShape_m_prevVertex_get(void * jarg1) {
  void * jresult ;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->m_prevVertex);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ChainShape_m_nextVertex_set(void * jarg1, void * jarg2) {
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->m_nextVertex = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2ChainShape_m_nextVertex_get(void * jarg1) {
  void * jresult ;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->m_nextVertex);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ChainShape_m_hasPrevVertex_set(void * jarg1, unsigned int jarg2) {
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  bool arg2 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_hasPrevVertex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2ChainShape_m_hasPrevVertex_get(void * jarg1) {
  unsigned int jresult ;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  bool result;
  
  arg1 = (b2ChainShape *)jarg1; 
  result = (bool) ((arg1)->m_hasPrevVertex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ChainShape_m_hasNextVertex_set(void * jarg1, unsigned int jarg2) {
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  bool arg2 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_hasNextVertex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2ChainShape_m_hasNextVertex_get(void * jarg1) {
  unsigned int jresult ;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  bool result;
  
  arg1 = (b2ChainShape *)jarg1; 
  result = (bool) ((arg1)->m_hasNextVertex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2PolygonShape() {
  void * jresult ;
  b2PolygonShape *result = 0 ;
  
  result = (b2PolygonShape *)new b2PolygonShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2PolygonShape_Clone(void * jarg1, void * jarg2) {
  void * jresult ;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  b2BlockAllocator *arg2 = (b2BlockAllocator *) 0 ;
  b2Shape *result = 0 ;
  
  arg1 = (b2PolygonShape *)jarg1; 
  arg2 = (b2BlockAllocator *)jarg2; 
  result = (b2Shape *)((b2PolygonShape const *)arg1)->Clone(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2PolygonShape_GetChildCount(void * jarg1) {
  int jresult ;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  int32 result;
  
  arg1 = (b2PolygonShape *)jarg1; 
  result = (int32)((b2PolygonShape const *)arg1)->GetChildCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PolygonShape_Set(void * jarg1, void * jarg2, int jarg3) {
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  int32 arg3 ;
  
  arg1 = (b2PolygonShape *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  arg3 = (int32)jarg3; 
  (arg1)->Set((b2Vec2 const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PolygonShape_SetAsBox__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  
  arg1 = (b2PolygonShape *)jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (float32)jarg3; 
  (arg1)->SetAsBox(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PolygonShape_SetAsBox__SWIG_1(void * jarg1, float jarg2, float jarg3, void * jarg4, float jarg5) {
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  b2Vec2 *arg4 = 0 ;
  float32 arg5 ;
  
  arg1 = (b2PolygonShape *)jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (float32)jarg3; 
  arg4 = (b2Vec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  arg5 = (float32)jarg5; 
  (arg1)->SetAsBox(arg2,arg3,(b2Vec2 const &)*arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2PolygonShape_TestPoint(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  b2Transform *arg2 = 0 ;
  b2Vec2 *arg3 = 0 ;
  bool result;
  
  arg1 = (b2PolygonShape *)jarg1; 
  arg2 = (b2Transform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return 0;
  } 
  arg3 = (b2Vec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = (bool)((b2PolygonShape const *)arg1)->TestPoint((b2Transform const &)*arg2,(b2Vec2 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2PolygonShape_RayCast(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  b2RayCastOutput *arg2 = (b2RayCastOutput *) 0 ;
  b2RayCastInput *arg3 = 0 ;
  b2Transform *arg4 = 0 ;
  int32 arg5 ;
  bool result;
  
  arg1 = (b2PolygonShape *)jarg1; 
  arg2 = (b2RayCastOutput *)jarg2; 
  arg3 = (b2RayCastInput *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2RayCastInput const & type is null", 0);
    return 0;
  } 
  arg4 = (b2Transform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return 0;
  } 
  arg5 = (int32)jarg5; 
  result = (bool)((b2PolygonShape const *)arg1)->RayCast(arg2,(b2RayCastInput const &)*arg3,(b2Transform const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PolygonShape_ComputeAABB(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  b2AABB *arg2 = (b2AABB *) 0 ;
  b2Transform *arg3 = 0 ;
  int32 arg4 ;
  
  arg1 = (b2PolygonShape *)jarg1; 
  arg2 = (b2AABB *)jarg2; 
  arg3 = (b2Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  arg4 = (int32)jarg4; 
  ((b2PolygonShape const *)arg1)->ComputeAABB(arg2,(b2Transform const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PolygonShape_ComputeMass(void * jarg1, void * jarg2, float jarg3) {
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  b2MassData *arg2 = (b2MassData *) 0 ;
  float32 arg3 ;
  
  arg1 = (b2PolygonShape *)jarg1; 
  arg2 = (b2MassData *)jarg2; 
  arg3 = (float32)jarg3; 
  ((b2PolygonShape const *)arg1)->ComputeMass(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2PolygonShape_GetVertexCount(void * jarg1) {
  int jresult ;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  int32 result;
  
  arg1 = (b2PolygonShape *)jarg1; 
  result = (int32)((b2PolygonShape const *)arg1)->GetVertexCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2PolygonShape_GetVertex(void * jarg1, int jarg2) {
  void * jresult ;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  int32 arg2 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2PolygonShape *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (b2Vec2 *) &((b2PolygonShape const *)arg1)->GetVertex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PolygonShape_m_centroid_set(void * jarg1, void * jarg2) {
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2PolygonShape *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->m_centroid = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2PolygonShape_m_centroid_get(void * jarg1) {
  void * jresult ;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2PolygonShape *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->m_centroid);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PolygonShape_m_vertices_set(void * jarg1, void * jarg2) {
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  b2Vec2 *arg2 ;
  
  arg1 = (b2PolygonShape *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  {
    size_t ii;
    b2Vec2 *b = (b2Vec2 *) arg1->m_vertices;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((b2Vec2 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2PolygonShape_m_vertices_get(void * jarg1) {
  void * jresult ;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2PolygonShape *)jarg1; 
  result = (b2Vec2 *)(b2Vec2 *) ((arg1)->m_vertices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PolygonShape_m_normals_set(void * jarg1, void * jarg2) {
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  b2Vec2 *arg2 ;
  
  arg1 = (b2PolygonShape *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  {
    size_t ii;
    b2Vec2 *b = (b2Vec2 *) arg1->m_normals;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((b2Vec2 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2PolygonShape_m_normals_get(void * jarg1) {
  void * jresult ;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2PolygonShape *)jarg1; 
  result = (b2Vec2 *)(b2Vec2 *) ((arg1)->m_normals);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PolygonShape_m_vertexCount_set(void * jarg1, int jarg2) {
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2PolygonShape *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->m_vertexCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2PolygonShape_m_vertexCount_get(void * jarg1) {
  int jresult ;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  int32 result;
  
  arg1 = (b2PolygonShape *)jarg1; 
  result = (int32) ((arg1)->m_vertexCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2PolygonShape(void * jarg1) {
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  
  arg1 = (b2PolygonShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2_nullNode_get() {
  int jresult ;
  int result;
  
  result = (int)((-1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2TreeNode_IsLeaf(void * jarg1) {
  unsigned int jresult ;
  b2TreeNode *arg1 = (b2TreeNode *) 0 ;
  bool result;
  
  arg1 = (b2TreeNode *)jarg1; 
  result = (bool)((b2TreeNode const *)arg1)->IsLeaf();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2TreeNode_aabb_set(void * jarg1, void * jarg2) {
  b2TreeNode *arg1 = (b2TreeNode *) 0 ;
  b2AABB *arg2 = (b2AABB *) 0 ;
  
  arg1 = (b2TreeNode *)jarg1; 
  arg2 = (b2AABB *)jarg2; 
  if (arg1) (arg1)->aabb = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2TreeNode_aabb_get(void * jarg1) {
  void * jresult ;
  b2TreeNode *arg1 = (b2TreeNode *) 0 ;
  b2AABB *result = 0 ;
  
  arg1 = (b2TreeNode *)jarg1; 
  result = (b2AABB *)& ((arg1)->aabb);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2TreeNode_userData_set(void * jarg1, void * jarg2) {
  b2TreeNode *arg1 = (b2TreeNode *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (b2TreeNode *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->userData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2TreeNode_userData_get(void * jarg1) {
  void * jresult ;
  b2TreeNode *arg1 = (b2TreeNode *) 0 ;
  void *result = 0 ;
  
  arg1 = (b2TreeNode *)jarg1; 
  result = (void *) ((arg1)->userData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2TreeNode_child1_set(void * jarg1, int jarg2) {
  b2TreeNode *arg1 = (b2TreeNode *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2TreeNode *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->child1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2TreeNode_child1_get(void * jarg1) {
  int jresult ;
  b2TreeNode *arg1 = (b2TreeNode *) 0 ;
  int32 result;
  
  arg1 = (b2TreeNode *)jarg1; 
  result = (int32) ((arg1)->child1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2TreeNode_child2_set(void * jarg1, int jarg2) {
  b2TreeNode *arg1 = (b2TreeNode *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2TreeNode *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->child2 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2TreeNode_child2_get(void * jarg1) {
  int jresult ;
  b2TreeNode *arg1 = (b2TreeNode *) 0 ;
  int32 result;
  
  arg1 = (b2TreeNode *)jarg1; 
  result = (int32) ((arg1)->child2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2TreeNode_height_set(void * jarg1, int jarg2) {
  b2TreeNode *arg1 = (b2TreeNode *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2TreeNode *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2TreeNode_height_get(void * jarg1) {
  int jresult ;
  b2TreeNode *arg1 = (b2TreeNode *) 0 ;
  int32 result;
  
  arg1 = (b2TreeNode *)jarg1; 
  result = (int32) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2TreeNode() {
  void * jresult ;
  b2TreeNode *result = 0 ;
  
  result = (b2TreeNode *)new b2TreeNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2TreeNode(void * jarg1) {
  b2TreeNode *arg1 = (b2TreeNode *) 0 ;
  
  arg1 = (b2TreeNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2DynamicTree() {
  void * jresult ;
  b2DynamicTree *result = 0 ;
  
  result = (b2DynamicTree *)new b2DynamicTree();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2DynamicTree(void * jarg1) {
  b2DynamicTree *arg1 = (b2DynamicTree *) 0 ;
  
  arg1 = (b2DynamicTree *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2DynamicTree_CreateProxy(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  b2DynamicTree *arg1 = (b2DynamicTree *) 0 ;
  b2AABB *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  int32 result;
  
  arg1 = (b2DynamicTree *)jarg1; 
  arg2 = (b2AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2AABB const & type is null", 0);
    return 0;
  } 
  arg3 = (void *)jarg3; 
  result = (int32)(arg1)->CreateProxy((b2AABB const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DynamicTree_DestroyProxy(void * jarg1, int jarg2) {
  b2DynamicTree *arg1 = (b2DynamicTree *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2DynamicTree *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->DestroyProxy(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2DynamicTree_MoveProxy(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  b2DynamicTree *arg1 = (b2DynamicTree *) 0 ;
  int32 arg2 ;
  b2AABB *arg3 = 0 ;
  b2Vec2 *arg4 = 0 ;
  bool result;
  
  arg1 = (b2DynamicTree *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (b2AABB *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2AABB const & type is null", 0);
    return 0;
  } 
  arg4 = (b2Vec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->MoveProxy(arg2,(b2AABB const &)*arg3,(b2Vec2 const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2DynamicTree_GetUserData(void * jarg1, int jarg2) {
  void * jresult ;
  b2DynamicTree *arg1 = (b2DynamicTree *) 0 ;
  int32 arg2 ;
  void *result = 0 ;
  
  arg1 = (b2DynamicTree *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (void *)((b2DynamicTree const *)arg1)->GetUserData(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2DynamicTree_GetFatAABB(void * jarg1, int jarg2) {
  void * jresult ;
  b2DynamicTree *arg1 = (b2DynamicTree *) 0 ;
  int32 arg2 ;
  b2AABB *result = 0 ;
  
  arg1 = (b2DynamicTree *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (b2AABB *) &((b2DynamicTree const *)arg1)->GetFatAABB(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DynamicTree_Validate(void * jarg1) {
  b2DynamicTree *arg1 = (b2DynamicTree *) 0 ;
  
  arg1 = (b2DynamicTree *)jarg1; 
  ((b2DynamicTree const *)arg1)->Validate();
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2DynamicTree_GetHeight(void * jarg1) {
  int jresult ;
  b2DynamicTree *arg1 = (b2DynamicTree *) 0 ;
  int32 result;
  
  arg1 = (b2DynamicTree *)jarg1; 
  result = (int32)((b2DynamicTree const *)arg1)->GetHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2DynamicTree_GetMaxBalance(void * jarg1) {
  int jresult ;
  b2DynamicTree *arg1 = (b2DynamicTree *) 0 ;
  int32 result;
  
  arg1 = (b2DynamicTree *)jarg1; 
  result = (int32)((b2DynamicTree const *)arg1)->GetMaxBalance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2DynamicTree_GetAreaRatio(void * jarg1) {
  float jresult ;
  b2DynamicTree *arg1 = (b2DynamicTree *) 0 ;
  float32 result;
  
  arg1 = (b2DynamicTree *)jarg1; 
  result = (float32)((b2DynamicTree const *)arg1)->GetAreaRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DynamicTree_RebuildBottomUp(void * jarg1) {
  b2DynamicTree *arg1 = (b2DynamicTree *) 0 ;
  
  arg1 = (b2DynamicTree *)jarg1; 
  (arg1)->RebuildBottomUp();
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Pair_proxyIdA_set(void * jarg1, int jarg2) {
  b2Pair *arg1 = (b2Pair *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2Pair *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->proxyIdA = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2Pair_proxyIdA_get(void * jarg1) {
  int jresult ;
  b2Pair *arg1 = (b2Pair *) 0 ;
  int32 result;
  
  arg1 = (b2Pair *)jarg1; 
  result = (int32) ((arg1)->proxyIdA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Pair_proxyIdB_set(void * jarg1, int jarg2) {
  b2Pair *arg1 = (b2Pair *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2Pair *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->proxyIdB = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2Pair_proxyIdB_get(void * jarg1) {
  int jresult ;
  b2Pair *arg1 = (b2Pair *) 0 ;
  int32 result;
  
  arg1 = (b2Pair *)jarg1; 
  result = (int32) ((arg1)->proxyIdB);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Pair_next_set(void * jarg1, int jarg2) {
  b2Pair *arg1 = (b2Pair *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2Pair *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->next = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2Pair_next_get(void * jarg1) {
  int jresult ;
  b2Pair *arg1 = (b2Pair *) 0 ;
  int32 result;
  
  arg1 = (b2Pair *)jarg1; 
  result = (int32) ((arg1)->next);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2Pair() {
  void * jresult ;
  b2Pair *result = 0 ;
  
  result = (b2Pair *)new b2Pair();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2Pair(void * jarg1) {
  b2Pair *arg1 = (b2Pair *) 0 ;
  
  arg1 = (b2Pair *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2BroadPhase_e_nullProxy_get() {
  int jresult ;
  int result;
  
  result = (int)b2BroadPhase::e_nullProxy;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2BroadPhase() {
  void * jresult ;
  b2BroadPhase *result = 0 ;
  
  result = (b2BroadPhase *)new b2BroadPhase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2BroadPhase(void * jarg1) {
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ;
  
  arg1 = (b2BroadPhase *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2BroadPhase_CreateProxy(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ;
  b2AABB *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  int32 result;
  
  arg1 = (b2BroadPhase *)jarg1; 
  arg2 = (b2AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2AABB const & type is null", 0);
    return 0;
  } 
  arg3 = (void *)jarg3; 
  result = (int32)(arg1)->CreateProxy((b2AABB const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2BroadPhase_DestroyProxy(void * jarg1, int jarg2) {
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2BroadPhase *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->DestroyProxy(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2BroadPhase_MoveProxy(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ;
  int32 arg2 ;
  b2AABB *arg3 = 0 ;
  b2Vec2 *arg4 = 0 ;
  
  arg1 = (b2BroadPhase *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (b2AABB *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2AABB const & type is null", 0);
    return ;
  } 
  arg4 = (b2Vec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  (arg1)->MoveProxy(arg2,(b2AABB const &)*arg3,(b2Vec2 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2BroadPhase_TouchProxy(void * jarg1, int jarg2) {
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2BroadPhase *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->TouchProxy(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2BroadPhase_GetFatAABB(void * jarg1, int jarg2) {
  void * jresult ;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ;
  int32 arg2 ;
  b2AABB *result = 0 ;
  
  arg1 = (b2BroadPhase *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (b2AABB *) &((b2BroadPhase const *)arg1)->GetFatAABB(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2BroadPhase_GetUserData(void * jarg1, int jarg2) {
  void * jresult ;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ;
  int32 arg2 ;
  void *result = 0 ;
  
  arg1 = (b2BroadPhase *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (void *)((b2BroadPhase const *)arg1)->GetUserData(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2BroadPhase_TestOverlap(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ;
  int32 arg2 ;
  int32 arg3 ;
  bool result;
  
  arg1 = (b2BroadPhase *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (int32)jarg3; 
  result = (bool)((b2BroadPhase const *)arg1)->TestOverlap(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2BroadPhase_GetProxyCount(void * jarg1) {
  int jresult ;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ;
  int32 result;
  
  arg1 = (b2BroadPhase *)jarg1; 
  result = (int32)((b2BroadPhase const *)arg1)->GetProxyCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2BroadPhase_GetTreeHeight(void * jarg1) {
  int jresult ;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ;
  int32 result;
  
  arg1 = (b2BroadPhase *)jarg1; 
  result = (int32)((b2BroadPhase const *)arg1)->GetTreeHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2BroadPhase_GetTreeBalance(void * jarg1) {
  int jresult ;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ;
  int32 result;
  
  arg1 = (b2BroadPhase *)jarg1; 
  result = (int32)((b2BroadPhase const *)arg1)->GetTreeBalance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2BroadPhase_GetTreeQuality(void * jarg1) {
  float jresult ;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ;
  float32 result;
  
  arg1 = (b2BroadPhase *)jarg1; 
  result = (float32)((b2BroadPhase const *)arg1)->GetTreeQuality();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2PairLessThan(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  b2Pair *arg1 = 0 ;
  b2Pair *arg2 = 0 ;
  bool result;
  
  arg1 = (b2Pair *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Pair const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Pair *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Pair const & type is null", 0);
    return 0;
  } 
  result = (bool)b2PairLessThan((b2Pair const &)*arg1,(b2Pair const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2DistanceProxy() {
  void * jresult ;
  b2DistanceProxy *result = 0 ;
  
  result = (b2DistanceProxy *)new b2DistanceProxy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DistanceProxy_Set(void * jarg1, void * jarg2, int jarg3) {
  b2DistanceProxy *arg1 = (b2DistanceProxy *) 0 ;
  b2Shape *arg2 = (b2Shape *) 0 ;
  int32 arg3 ;
  
  arg1 = (b2DistanceProxy *)jarg1; 
  arg2 = (b2Shape *)jarg2; 
  arg3 = (int32)jarg3; 
  (arg1)->Set((b2Shape const *)arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2DistanceProxy_GetSupport(void * jarg1, void * jarg2) {
  int jresult ;
  b2DistanceProxy *arg1 = (b2DistanceProxy *) 0 ;
  b2Vec2 *arg2 = 0 ;
  int32 result;
  
  arg1 = (b2DistanceProxy *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = (int32)((b2DistanceProxy const *)arg1)->GetSupport((b2Vec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2DistanceProxy_GetSupportVertex(void * jarg1, void * jarg2) {
  void * jresult ;
  b2DistanceProxy *arg1 = (b2DistanceProxy *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2DistanceProxy *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = (b2Vec2 *) &((b2DistanceProxy const *)arg1)->GetSupportVertex((b2Vec2 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2DistanceProxy_GetVertexCount(void * jarg1) {
  int jresult ;
  b2DistanceProxy *arg1 = (b2DistanceProxy *) 0 ;
  int32 result;
  
  arg1 = (b2DistanceProxy *)jarg1; 
  result = (int32)((b2DistanceProxy const *)arg1)->GetVertexCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2DistanceProxy_GetVertex(void * jarg1, int jarg2) {
  void * jresult ;
  b2DistanceProxy *arg1 = (b2DistanceProxy *) 0 ;
  int32 arg2 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2DistanceProxy *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (b2Vec2 *) &((b2DistanceProxy const *)arg1)->GetVertex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DistanceProxy_m_buffer_set(void * jarg1, void * jarg2) {
  b2DistanceProxy *arg1 = (b2DistanceProxy *) 0 ;
  b2Vec2 *arg2 ;
  
  arg1 = (b2DistanceProxy *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  {
    size_t ii;
    b2Vec2 *b = (b2Vec2 *) arg1->m_buffer;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((b2Vec2 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2DistanceProxy_m_buffer_get(void * jarg1) {
  void * jresult ;
  b2DistanceProxy *arg1 = (b2DistanceProxy *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2DistanceProxy *)jarg1; 
  result = (b2Vec2 *)(b2Vec2 *) ((arg1)->m_buffer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DistanceProxy_m_vertices_set(void * jarg1, void * jarg2) {
  b2DistanceProxy *arg1 = (b2DistanceProxy *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2DistanceProxy *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->m_vertices = (b2Vec2 const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2DistanceProxy_m_vertices_get(void * jarg1) {
  void * jresult ;
  b2DistanceProxy *arg1 = (b2DistanceProxy *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2DistanceProxy *)jarg1; 
  result = (b2Vec2 *) ((arg1)->m_vertices);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DistanceProxy_m_count_set(void * jarg1, int jarg2) {
  b2DistanceProxy *arg1 = (b2DistanceProxy *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2DistanceProxy *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->m_count = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2DistanceProxy_m_count_get(void * jarg1) {
  int jresult ;
  b2DistanceProxy *arg1 = (b2DistanceProxy *) 0 ;
  int32 result;
  
  arg1 = (b2DistanceProxy *)jarg1; 
  result = (int32) ((arg1)->m_count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DistanceProxy_m_radius_set(void * jarg1, float jarg2) {
  b2DistanceProxy *arg1 = (b2DistanceProxy *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2DistanceProxy *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->m_radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2DistanceProxy_m_radius_get(void * jarg1) {
  float jresult ;
  b2DistanceProxy *arg1 = (b2DistanceProxy *) 0 ;
  float32 result;
  
  arg1 = (b2DistanceProxy *)jarg1; 
  result = (float32) ((arg1)->m_radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2DistanceProxy(void * jarg1) {
  b2DistanceProxy *arg1 = (b2DistanceProxy *) 0 ;
  
  arg1 = (b2DistanceProxy *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2SimplexCache_metric_set(void * jarg1, float jarg2) {
  b2SimplexCache *arg1 = (b2SimplexCache *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2SimplexCache *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->metric = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2SimplexCache_metric_get(void * jarg1) {
  float jresult ;
  b2SimplexCache *arg1 = (b2SimplexCache *) 0 ;
  float32 result;
  
  arg1 = (b2SimplexCache *)jarg1; 
  result = (float32) ((arg1)->metric);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2SimplexCache_count_set(void * jarg1, unsigned short jarg2) {
  b2SimplexCache *arg1 = (b2SimplexCache *) 0 ;
  uint16 arg2 ;
  
  arg1 = (b2SimplexCache *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_b2SimplexCache_count_get(void * jarg1) {
  unsigned short jresult ;
  b2SimplexCache *arg1 = (b2SimplexCache *) 0 ;
  uint16 result;
  
  arg1 = (b2SimplexCache *)jarg1; 
  result = (uint16) ((arg1)->count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2SimplexCache_indexA_set(void * jarg1, void * jarg2) {
  b2SimplexCache *arg1 = (b2SimplexCache *) 0 ;
  uint8 *arg2 ;
  
  arg1 = (b2SimplexCache *)jarg1; 
  arg2 = (uint8 *)jarg2; 
  {
    size_t ii;
    uint8 *b = (uint8 *) arg1->indexA;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((uint8 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2SimplexCache_indexA_get(void * jarg1) {
  void * jresult ;
  b2SimplexCache *arg1 = (b2SimplexCache *) 0 ;
  uint8 *result = 0 ;
  
  arg1 = (b2SimplexCache *)jarg1; 
  result = (uint8 *)(uint8 *) ((arg1)->indexA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2SimplexCache_indexB_set(void * jarg1, void * jarg2) {
  b2SimplexCache *arg1 = (b2SimplexCache *) 0 ;
  uint8 *arg2 ;
  
  arg1 = (b2SimplexCache *)jarg1; 
  arg2 = (uint8 *)jarg2; 
  {
    size_t ii;
    uint8 *b = (uint8 *) arg1->indexB;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((uint8 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2SimplexCache_indexB_get(void * jarg1) {
  void * jresult ;
  b2SimplexCache *arg1 = (b2SimplexCache *) 0 ;
  uint8 *result = 0 ;
  
  arg1 = (b2SimplexCache *)jarg1; 
  result = (uint8 *)(uint8 *) ((arg1)->indexB);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2SimplexCache() {
  void * jresult ;
  b2SimplexCache *result = 0 ;
  
  result = (b2SimplexCache *)new b2SimplexCache();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2SimplexCache(void * jarg1) {
  b2SimplexCache *arg1 = (b2SimplexCache *) 0 ;
  
  arg1 = (b2SimplexCache *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DistanceInput_proxyA_set(void * jarg1, void * jarg2) {
  b2DistanceInput *arg1 = (b2DistanceInput *) 0 ;
  b2DistanceProxy *arg2 = (b2DistanceProxy *) 0 ;
  
  arg1 = (b2DistanceInput *)jarg1; 
  arg2 = (b2DistanceProxy *)jarg2; 
  if (arg1) (arg1)->proxyA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2DistanceInput_proxyA_get(void * jarg1) {
  void * jresult ;
  b2DistanceInput *arg1 = (b2DistanceInput *) 0 ;
  b2DistanceProxy *result = 0 ;
  
  arg1 = (b2DistanceInput *)jarg1; 
  result = (b2DistanceProxy *)& ((arg1)->proxyA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DistanceInput_proxyB_set(void * jarg1, void * jarg2) {
  b2DistanceInput *arg1 = (b2DistanceInput *) 0 ;
  b2DistanceProxy *arg2 = (b2DistanceProxy *) 0 ;
  
  arg1 = (b2DistanceInput *)jarg1; 
  arg2 = (b2DistanceProxy *)jarg2; 
  if (arg1) (arg1)->proxyB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2DistanceInput_proxyB_get(void * jarg1) {
  void * jresult ;
  b2DistanceInput *arg1 = (b2DistanceInput *) 0 ;
  b2DistanceProxy *result = 0 ;
  
  arg1 = (b2DistanceInput *)jarg1; 
  result = (b2DistanceProxy *)& ((arg1)->proxyB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DistanceInput_transformA_set(void * jarg1, void * jarg2) {
  b2DistanceInput *arg1 = (b2DistanceInput *) 0 ;
  b2Transform *arg2 = (b2Transform *) 0 ;
  
  arg1 = (b2DistanceInput *)jarg1; 
  arg2 = (b2Transform *)jarg2; 
  if (arg1) (arg1)->transformA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2DistanceInput_transformA_get(void * jarg1) {
  void * jresult ;
  b2DistanceInput *arg1 = (b2DistanceInput *) 0 ;
  b2Transform *result = 0 ;
  
  arg1 = (b2DistanceInput *)jarg1; 
  result = (b2Transform *)& ((arg1)->transformA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DistanceInput_transformB_set(void * jarg1, void * jarg2) {
  b2DistanceInput *arg1 = (b2DistanceInput *) 0 ;
  b2Transform *arg2 = (b2Transform *) 0 ;
  
  arg1 = (b2DistanceInput *)jarg1; 
  arg2 = (b2Transform *)jarg2; 
  if (arg1) (arg1)->transformB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2DistanceInput_transformB_get(void * jarg1) {
  void * jresult ;
  b2DistanceInput *arg1 = (b2DistanceInput *) 0 ;
  b2Transform *result = 0 ;
  
  arg1 = (b2DistanceInput *)jarg1; 
  result = (b2Transform *)& ((arg1)->transformB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DistanceInput_useRadii_set(void * jarg1, unsigned int jarg2) {
  b2DistanceInput *arg1 = (b2DistanceInput *) 0 ;
  bool arg2 ;
  
  arg1 = (b2DistanceInput *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useRadii = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2DistanceInput_useRadii_get(void * jarg1) {
  unsigned int jresult ;
  b2DistanceInput *arg1 = (b2DistanceInput *) 0 ;
  bool result;
  
  arg1 = (b2DistanceInput *)jarg1; 
  result = (bool) ((arg1)->useRadii);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2DistanceInput() {
  void * jresult ;
  b2DistanceInput *result = 0 ;
  
  result = (b2DistanceInput *)new b2DistanceInput();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2DistanceInput(void * jarg1) {
  b2DistanceInput *arg1 = (b2DistanceInput *) 0 ;
  
  arg1 = (b2DistanceInput *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DistanceOutput_pointA_set(void * jarg1, void * jarg2) {
  b2DistanceOutput *arg1 = (b2DistanceOutput *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2DistanceOutput *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->pointA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2DistanceOutput_pointA_get(void * jarg1) {
  void * jresult ;
  b2DistanceOutput *arg1 = (b2DistanceOutput *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2DistanceOutput *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->pointA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DistanceOutput_pointB_set(void * jarg1, void * jarg2) {
  b2DistanceOutput *arg1 = (b2DistanceOutput *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2DistanceOutput *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->pointB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2DistanceOutput_pointB_get(void * jarg1) {
  void * jresult ;
  b2DistanceOutput *arg1 = (b2DistanceOutput *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2DistanceOutput *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->pointB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DistanceOutput_distance_set(void * jarg1, float jarg2) {
  b2DistanceOutput *arg1 = (b2DistanceOutput *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2DistanceOutput *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->distance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2DistanceOutput_distance_get(void * jarg1) {
  float jresult ;
  b2DistanceOutput *arg1 = (b2DistanceOutput *) 0 ;
  float32 result;
  
  arg1 = (b2DistanceOutput *)jarg1; 
  result = (float32) ((arg1)->distance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DistanceOutput_iterations_set(void * jarg1, int jarg2) {
  b2DistanceOutput *arg1 = (b2DistanceOutput *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2DistanceOutput *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->iterations = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2DistanceOutput_iterations_get(void * jarg1) {
  int jresult ;
  b2DistanceOutput *arg1 = (b2DistanceOutput *) 0 ;
  int32 result;
  
  arg1 = (b2DistanceOutput *)jarg1; 
  result = (int32) ((arg1)->iterations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2DistanceOutput() {
  void * jresult ;
  b2DistanceOutput *result = 0 ;
  
  result = (b2DistanceOutput *)new b2DistanceOutput();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2DistanceOutput(void * jarg1) {
  b2DistanceOutput *arg1 = (b2DistanceOutput *) 0 ;
  
  arg1 = (b2DistanceOutput *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Distance__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  b2DistanceOutput *arg1 = (b2DistanceOutput *) 0 ;
  b2SimplexCache *arg2 = (b2SimplexCache *) 0 ;
  b2DistanceInput *arg3 = (b2DistanceInput *) 0 ;
  
  arg1 = (b2DistanceOutput *)jarg1; 
  arg2 = (b2SimplexCache *)jarg2; 
  arg3 = (b2DistanceInput *)jarg3; 
  b2Distance(arg1,arg2,(b2DistanceInput const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2TOIInput_proxyA_set(void * jarg1, void * jarg2) {
  b2TOIInput *arg1 = (b2TOIInput *) 0 ;
  b2DistanceProxy *arg2 = (b2DistanceProxy *) 0 ;
  
  arg1 = (b2TOIInput *)jarg1; 
  arg2 = (b2DistanceProxy *)jarg2; 
  if (arg1) (arg1)->proxyA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2TOIInput_proxyA_get(void * jarg1) {
  void * jresult ;
  b2TOIInput *arg1 = (b2TOIInput *) 0 ;
  b2DistanceProxy *result = 0 ;
  
  arg1 = (b2TOIInput *)jarg1; 
  result = (b2DistanceProxy *)& ((arg1)->proxyA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2TOIInput_proxyB_set(void * jarg1, void * jarg2) {
  b2TOIInput *arg1 = (b2TOIInput *) 0 ;
  b2DistanceProxy *arg2 = (b2DistanceProxy *) 0 ;
  
  arg1 = (b2TOIInput *)jarg1; 
  arg2 = (b2DistanceProxy *)jarg2; 
  if (arg1) (arg1)->proxyB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2TOIInput_proxyB_get(void * jarg1) {
  void * jresult ;
  b2TOIInput *arg1 = (b2TOIInput *) 0 ;
  b2DistanceProxy *result = 0 ;
  
  arg1 = (b2TOIInput *)jarg1; 
  result = (b2DistanceProxy *)& ((arg1)->proxyB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2TOIInput_sweepA_set(void * jarg1, void * jarg2) {
  b2TOIInput *arg1 = (b2TOIInput *) 0 ;
  b2Sweep *arg2 = (b2Sweep *) 0 ;
  
  arg1 = (b2TOIInput *)jarg1; 
  arg2 = (b2Sweep *)jarg2; 
  if (arg1) (arg1)->sweepA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2TOIInput_sweepA_get(void * jarg1) {
  void * jresult ;
  b2TOIInput *arg1 = (b2TOIInput *) 0 ;
  b2Sweep *result = 0 ;
  
  arg1 = (b2TOIInput *)jarg1; 
  result = (b2Sweep *)& ((arg1)->sweepA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2TOIInput_sweepB_set(void * jarg1, void * jarg2) {
  b2TOIInput *arg1 = (b2TOIInput *) 0 ;
  b2Sweep *arg2 = (b2Sweep *) 0 ;
  
  arg1 = (b2TOIInput *)jarg1; 
  arg2 = (b2Sweep *)jarg2; 
  if (arg1) (arg1)->sweepB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2TOIInput_sweepB_get(void * jarg1) {
  void * jresult ;
  b2TOIInput *arg1 = (b2TOIInput *) 0 ;
  b2Sweep *result = 0 ;
  
  arg1 = (b2TOIInput *)jarg1; 
  result = (b2Sweep *)& ((arg1)->sweepB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2TOIInput_tMax_set(void * jarg1, float jarg2) {
  b2TOIInput *arg1 = (b2TOIInput *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2TOIInput *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->tMax = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2TOIInput_tMax_get(void * jarg1) {
  float jresult ;
  b2TOIInput *arg1 = (b2TOIInput *) 0 ;
  float32 result;
  
  arg1 = (b2TOIInput *)jarg1; 
  result = (float32) ((arg1)->tMax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2TOIInput() {
  void * jresult ;
  b2TOIInput *result = 0 ;
  
  result = (b2TOIInput *)new b2TOIInput();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2TOIInput(void * jarg1) {
  b2TOIInput *arg1 = (b2TOIInput *) 0 ;
  
  arg1 = (b2TOIInput *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2TOIOutput_state_set(void * jarg1, int jarg2) {
  b2TOIOutput *arg1 = (b2TOIOutput *) 0 ;
  b2TOIOutput::State arg2 ;
  
  arg1 = (b2TOIOutput *)jarg1; 
  arg2 = (b2TOIOutput::State)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2TOIOutput_state_get(void * jarg1) {
  int jresult ;
  b2TOIOutput *arg1 = (b2TOIOutput *) 0 ;
  b2TOIOutput::State result;
  
  arg1 = (b2TOIOutput *)jarg1; 
  result = (b2TOIOutput::State) ((arg1)->state);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2TOIOutput_t_set(void * jarg1, float jarg2) {
  b2TOIOutput *arg1 = (b2TOIOutput *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2TOIOutput *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->t = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2TOIOutput_t_get(void * jarg1) {
  float jresult ;
  b2TOIOutput *arg1 = (b2TOIOutput *) 0 ;
  float32 result;
  
  arg1 = (b2TOIOutput *)jarg1; 
  result = (float32) ((arg1)->t);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2TOIOutput() {
  void * jresult ;
  b2TOIOutput *result = 0 ;
  
  result = (b2TOIOutput *)new b2TOIOutput();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2TOIOutput(void * jarg1) {
  b2TOIOutput *arg1 = (b2TOIOutput *) 0 ;
  
  arg1 = (b2TOIOutput *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2TimeOfImpact(void * jarg1, void * jarg2) {
  b2TOIOutput *arg1 = (b2TOIOutput *) 0 ;
  b2TOIInput *arg2 = (b2TOIInput *) 0 ;
  
  arg1 = (b2TOIOutput *)jarg1; 
  arg2 = (b2TOIInput *)jarg2; 
  b2TimeOfImpact(arg1,(b2TOIInput const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2BodyDef() {
  void * jresult ;
  b2BodyDef *result = 0 ;
  
  result = (b2BodyDef *)new b2BodyDef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2BodyDef_type_set(void * jarg1, int jarg2) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  b2BodyType arg2 ;
  
  arg1 = (b2BodyDef *)jarg1; 
  arg2 = (b2BodyType)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2BodyDef_type_get(void * jarg1) {
  int jresult ;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  b2BodyType result;
  
  arg1 = (b2BodyDef *)jarg1; 
  result = (b2BodyType) ((arg1)->type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2BodyDef_position_set(void * jarg1, void * jarg2) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2BodyDef *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2BodyDef_position_get(void * jarg1) {
  void * jresult ;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2BodyDef *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->position);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2BodyDef_angle_set(void * jarg1, float jarg2) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2BodyDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->angle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2BodyDef_angle_get(void * jarg1) {
  float jresult ;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  float32 result;
  
  arg1 = (b2BodyDef *)jarg1; 
  result = (float32) ((arg1)->angle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2BodyDef_linearVelocity_set(void * jarg1, void * jarg2) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2BodyDef *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->linearVelocity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2BodyDef_linearVelocity_get(void * jarg1) {
  void * jresult ;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2BodyDef *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->linearVelocity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2BodyDef_angularVelocity_set(void * jarg1, float jarg2) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2BodyDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->angularVelocity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2BodyDef_angularVelocity_get(void * jarg1) {
  float jresult ;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  float32 result;
  
  arg1 = (b2BodyDef *)jarg1; 
  result = (float32) ((arg1)->angularVelocity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2BodyDef_linearDamping_set(void * jarg1, float jarg2) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2BodyDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->linearDamping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2BodyDef_linearDamping_get(void * jarg1) {
  float jresult ;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  float32 result;
  
  arg1 = (b2BodyDef *)jarg1; 
  result = (float32) ((arg1)->linearDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2BodyDef_angularDamping_set(void * jarg1, float jarg2) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2BodyDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->angularDamping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2BodyDef_angularDamping_get(void * jarg1) {
  float jresult ;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  float32 result;
  
  arg1 = (b2BodyDef *)jarg1; 
  result = (float32) ((arg1)->angularDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2BodyDef_allowSleep_set(void * jarg1, unsigned int jarg2) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  bool arg2 ;
  
  arg1 = (b2BodyDef *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->allowSleep = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2BodyDef_allowSleep_get(void * jarg1) {
  unsigned int jresult ;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  bool result;
  
  arg1 = (b2BodyDef *)jarg1; 
  result = (bool) ((arg1)->allowSleep);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2BodyDef_awake_set(void * jarg1, unsigned int jarg2) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  bool arg2 ;
  
  arg1 = (b2BodyDef *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->awake = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2BodyDef_awake_get(void * jarg1) {
  unsigned int jresult ;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  bool result;
  
  arg1 = (b2BodyDef *)jarg1; 
  result = (bool) ((arg1)->awake);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2BodyDef_fixedRotation_set(void * jarg1, unsigned int jarg2) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  bool arg2 ;
  
  arg1 = (b2BodyDef *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fixedRotation = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2BodyDef_fixedRotation_get(void * jarg1) {
  unsigned int jresult ;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  bool result;
  
  arg1 = (b2BodyDef *)jarg1; 
  result = (bool) ((arg1)->fixedRotation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2BodyDef_bullet_set(void * jarg1, unsigned int jarg2) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  bool arg2 ;
  
  arg1 = (b2BodyDef *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bullet = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2BodyDef_bullet_get(void * jarg1) {
  unsigned int jresult ;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  bool result;
  
  arg1 = (b2BodyDef *)jarg1; 
  result = (bool) ((arg1)->bullet);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2BodyDef_active_set(void * jarg1, unsigned int jarg2) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  bool arg2 ;
  
  arg1 = (b2BodyDef *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->active = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2BodyDef_active_get(void * jarg1) {
  unsigned int jresult ;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  bool result;
  
  arg1 = (b2BodyDef *)jarg1; 
  result = (bool) ((arg1)->active);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2BodyDef_userData_set(void * jarg1, void * jarg2) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (b2BodyDef *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->userData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2BodyDef_userData_get(void * jarg1) {
  void * jresult ;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  void *result = 0 ;
  
  arg1 = (b2BodyDef *)jarg1; 
  result = (void *) ((arg1)->userData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2BodyDef_gravityScale_set(void * jarg1, float jarg2) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2BodyDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->gravityScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2BodyDef_gravityScale_get(void * jarg1) {
  float jresult ;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  float32 result;
  
  arg1 = (b2BodyDef *)jarg1; 
  result = (float32) ((arg1)->gravityScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2BodyDef(void * jarg1) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  
  arg1 = (b2BodyDef *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Body_CreateFixture__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2FixtureDef *arg2 = (b2FixtureDef *) 0 ;
  b2Fixture *result = 0 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (b2FixtureDef *)jarg2; 
  result = (b2Fixture *)(arg1)->CreateFixture((b2FixtureDef const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Body_CreateFixture__SWIG_1(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Shape *arg2 = (b2Shape *) 0 ;
  float32 arg3 ;
  b2Fixture *result = 0 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (b2Shape *)jarg2; 
  arg3 = (float32)jarg3; 
  result = (b2Fixture *)(arg1)->CreateFixture((b2Shape const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Body_DestroyFixture(void * jarg1, void * jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Fixture *arg2 = (b2Fixture *) 0 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (b2Fixture *)jarg2; 
  (arg1)->DestroyFixture(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Body_SetTransform(void * jarg1, void * jarg2, float jarg3) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  float32 arg3 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  arg3 = (float32)jarg3; 
  (arg1)->SetTransform((b2Vec2 const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Body_GetTransform(void * jarg1) {
  void * jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Transform *result = 0 ;
  
  arg1 = (b2Body *)jarg1; 
  result = (b2Transform *) &((b2Body const *)arg1)->GetTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Body_GetPosition(void * jarg1) {
  void * jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2Body *)jarg1; 
  result = (b2Vec2 *) &((b2Body const *)arg1)->GetPosition();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Body_GetAngle(void * jarg1) {
  float jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  float32 result;
  
  arg1 = (b2Body *)jarg1; 
  result = (float32)((b2Body const *)arg1)->GetAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Body_GetWorldCenter(void * jarg1) {
  void * jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2Body *)jarg1; 
  result = (b2Vec2 *) &((b2Body const *)arg1)->GetWorldCenter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Body_GetLocalCenter(void * jarg1) {
  void * jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2Body *)jarg1; 
  result = (b2Vec2 *) &((b2Body const *)arg1)->GetLocalCenter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Body_SetLinearVelocity(void * jarg1, void * jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  (arg1)->SetLinearVelocity((b2Vec2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Body_GetLinearVelocity(void * jarg1) {
  void * jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2Body *)jarg1; 
  result = ((b2Body const *)arg1)->GetLinearVelocity();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Body_SetAngularVelocity(void * jarg1, float jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetAngularVelocity(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Body_GetAngularVelocity(void * jarg1) {
  float jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  float32 result;
  
  arg1 = (b2Body *)jarg1; 
  result = (float32)((b2Body const *)arg1)->GetAngularVelocity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Body_ApplyForce(void * jarg1, void * jarg2, void * jarg3) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 *arg3 = 0 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  arg3 = (b2Vec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  (arg1)->ApplyForce((b2Vec2 const &)*arg2,(b2Vec2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Body_ApplyForceToCenter(void * jarg1, void * jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  (arg1)->ApplyForceToCenter((b2Vec2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Body_ApplyTorque(void * jarg1, float jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->ApplyTorque(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Body_ApplyLinearImpulse(void * jarg1, void * jarg2, void * jarg3) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 *arg3 = 0 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  arg3 = (b2Vec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  (arg1)->ApplyLinearImpulse((b2Vec2 const &)*arg2,(b2Vec2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Body_ApplyAngularImpulse(void * jarg1, float jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->ApplyAngularImpulse(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Body_GetMass(void * jarg1) {
  float jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  float32 result;
  
  arg1 = (b2Body *)jarg1; 
  result = (float32)((b2Body const *)arg1)->GetMass();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Body_GetInertia(void * jarg1) {
  float jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  float32 result;
  
  arg1 = (b2Body *)jarg1; 
  result = (float32)((b2Body const *)arg1)->GetInertia();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Body_GetMassData(void * jarg1, void * jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2MassData *arg2 = (b2MassData *) 0 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (b2MassData *)jarg2; 
  ((b2Body const *)arg1)->GetMassData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Body_SetMassData(void * jarg1, void * jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2MassData *arg2 = (b2MassData *) 0 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (b2MassData *)jarg2; 
  (arg1)->SetMassData((b2MassData const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Body_ResetMassData(void * jarg1) {
  b2Body *arg1 = (b2Body *) 0 ;
  
  arg1 = (b2Body *)jarg1; 
  (arg1)->ResetMassData();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Body_GetWorldPoint(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = ((b2Body const *)arg1)->GetWorldPoint((b2Vec2 const &)*arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Body_GetWorldVector(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = ((b2Body const *)arg1)->GetWorldVector((b2Vec2 const &)*arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Body_GetLocalPoint(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = ((b2Body const *)arg1)->GetLocalPoint((b2Vec2 const &)*arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Body_GetLocalVector(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = ((b2Body const *)arg1)->GetLocalVector((b2Vec2 const &)*arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Body_GetLinearVelocityFromWorldPoint(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = ((b2Body const *)arg1)->GetLinearVelocityFromWorldPoint((b2Vec2 const &)*arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Body_GetLinearVelocityFromLocalPoint(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = ((b2Body const *)arg1)->GetLinearVelocityFromLocalPoint((b2Vec2 const &)*arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Body_GetLinearDamping(void * jarg1) {
  float jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  float32 result;
  
  arg1 = (b2Body *)jarg1; 
  result = (float32)((b2Body const *)arg1)->GetLinearDamping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Body_SetLinearDamping(void * jarg1, float jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetLinearDamping(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Body_GetAngularDamping(void * jarg1) {
  float jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  float32 result;
  
  arg1 = (b2Body *)jarg1; 
  result = (float32)((b2Body const *)arg1)->GetAngularDamping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Body_SetAngularDamping(void * jarg1, float jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetAngularDamping(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Body_GetGravityScale(void * jarg1) {
  float jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  float32 result;
  
  arg1 = (b2Body *)jarg1; 
  result = (float32)((b2Body const *)arg1)->GetGravityScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Body_SetGravityScale(void * jarg1, float jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetGravityScale(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Body_SetType(void * jarg1, int jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2BodyType arg2 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (b2BodyType)jarg2; 
  (arg1)->SetType(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2Body_GetType(void * jarg1) {
  int jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2BodyType result;
  
  arg1 = (b2Body *)jarg1; 
  result = (b2BodyType)((b2Body const *)arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Body_SetBullet(void * jarg1, unsigned int jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  bool arg2 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetBullet(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2Body_IsBullet(void * jarg1) {
  unsigned int jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  bool result;
  
  arg1 = (b2Body *)jarg1; 
  result = (bool)((b2Body const *)arg1)->IsBullet();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Body_SetSleepingAllowed(void * jarg1, unsigned int jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  bool arg2 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSleepingAllowed(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2Body_IsSleepingAllowed(void * jarg1) {
  unsigned int jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  bool result;
  
  arg1 = (b2Body *)jarg1; 
  result = (bool)((b2Body const *)arg1)->IsSleepingAllowed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Body_SetAwake(void * jarg1, unsigned int jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  bool arg2 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAwake(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2Body_IsAwake(void * jarg1) {
  unsigned int jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  bool result;
  
  arg1 = (b2Body *)jarg1; 
  result = (bool)((b2Body const *)arg1)->IsAwake();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Body_SetActive(void * jarg1, unsigned int jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  bool arg2 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetActive(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2Body_IsActive(void * jarg1) {
  unsigned int jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  bool result;
  
  arg1 = (b2Body *)jarg1; 
  result = (bool)((b2Body const *)arg1)->IsActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Body_SetFixedRotation(void * jarg1, unsigned int jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  bool arg2 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetFixedRotation(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2Body_IsFixedRotation(void * jarg1) {
  unsigned int jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  bool result;
  
  arg1 = (b2Body *)jarg1; 
  result = (bool)((b2Body const *)arg1)->IsFixedRotation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Body_GetFixtureList__SWIG_0(void * jarg1) {
  void * jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Fixture *result = 0 ;
  
  arg1 = (b2Body *)jarg1; 
  result = (b2Fixture *)(arg1)->GetFixtureList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Body_GetJointList__SWIG_0(void * jarg1) {
  void * jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2JointEdge *result = 0 ;
  
  arg1 = (b2Body *)jarg1; 
  result = (b2JointEdge *)(arg1)->GetJointList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Body_GetContactList__SWIG_0(void * jarg1) {
  void * jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2ContactEdge *result = 0 ;
  
  arg1 = (b2Body *)jarg1; 
  result = (b2ContactEdge *)(arg1)->GetContactList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Body_GetNext__SWIG_0(void * jarg1) {
  void * jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Body *result = 0 ;
  
  arg1 = (b2Body *)jarg1; 
  result = (b2Body *)(arg1)->GetNext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Body_GetUserData(void * jarg1) {
  void * jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  void *result = 0 ;
  
  arg1 = (b2Body *)jarg1; 
  result = (void *)((b2Body const *)arg1)->GetUserData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Body_SetUserData(void * jarg1, void * jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->SetUserData(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Body_GetWorld__SWIG_0(void * jarg1) {
  void * jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2World *result = 0 ;
  
  arg1 = (b2Body *)jarg1; 
  result = (b2World *)(arg1)->GetWorld();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Body_Dump(void * jarg1) {
  b2Body *arg1 = (b2Body *) 0 ;
  
  arg1 = (b2Body *)jarg1; 
  (arg1)->Dump();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2Filter() {
  void * jresult ;
  b2Filter *result = 0 ;
  
  result = (b2Filter *)new b2Filter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Filter_categoryBits_set(void * jarg1, unsigned short jarg2) {
  b2Filter *arg1 = (b2Filter *) 0 ;
  uint16 arg2 ;
  
  arg1 = (b2Filter *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->categoryBits = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_b2Filter_categoryBits_get(void * jarg1) {
  unsigned short jresult ;
  b2Filter *arg1 = (b2Filter *) 0 ;
  uint16 result;
  
  arg1 = (b2Filter *)jarg1; 
  result = (uint16) ((arg1)->categoryBits);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Filter_maskBits_set(void * jarg1, unsigned short jarg2) {
  b2Filter *arg1 = (b2Filter *) 0 ;
  uint16 arg2 ;
  
  arg1 = (b2Filter *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->maskBits = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_b2Filter_maskBits_get(void * jarg1) {
  unsigned short jresult ;
  b2Filter *arg1 = (b2Filter *) 0 ;
  uint16 result;
  
  arg1 = (b2Filter *)jarg1; 
  result = (uint16) ((arg1)->maskBits);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Filter_groupIndex_set(void * jarg1, short jarg2) {
  b2Filter *arg1 = (b2Filter *) 0 ;
  int16 arg2 ;
  
  arg1 = (b2Filter *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->groupIndex = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_b2Filter_groupIndex_get(void * jarg1) {
  short jresult ;
  b2Filter *arg1 = (b2Filter *) 0 ;
  int16 result;
  
  arg1 = (b2Filter *)jarg1; 
  result = (int16) ((arg1)->groupIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2Filter(void * jarg1) {
  b2Filter *arg1 = (b2Filter *) 0 ;
  
  arg1 = (b2Filter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2FixtureDef() {
  void * jresult ;
  b2FixtureDef *result = 0 ;
  
  result = (b2FixtureDef *)new b2FixtureDef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2FixtureDef_shape_set(void * jarg1, void * jarg2) {
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  b2Shape *arg2 = (b2Shape *) 0 ;
  
  arg1 = (b2FixtureDef *)jarg1; 
  arg2 = (b2Shape *)jarg2; 
  if (arg1) (arg1)->shape = (b2Shape const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2FixtureDef_shape_get(void * jarg1) {
  void * jresult ;
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  b2Shape *result = 0 ;
  
  arg1 = (b2FixtureDef *)jarg1; 
  result = (b2Shape *) ((arg1)->shape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2FixtureDef_userData_set(void * jarg1, void * jarg2) {
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (b2FixtureDef *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->userData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2FixtureDef_userData_get(void * jarg1) {
  void * jresult ;
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  void *result = 0 ;
  
  arg1 = (b2FixtureDef *)jarg1; 
  result = (void *) ((arg1)->userData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2FixtureDef_friction_set(void * jarg1, float jarg2) {
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2FixtureDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->friction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2FixtureDef_friction_get(void * jarg1) {
  float jresult ;
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  float32 result;
  
  arg1 = (b2FixtureDef *)jarg1; 
  result = (float32) ((arg1)->friction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2FixtureDef_restitution_set(void * jarg1, float jarg2) {
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2FixtureDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->restitution = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2FixtureDef_restitution_get(void * jarg1) {
  float jresult ;
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  float32 result;
  
  arg1 = (b2FixtureDef *)jarg1; 
  result = (float32) ((arg1)->restitution);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2FixtureDef_density_set(void * jarg1, float jarg2) {
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2FixtureDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->density = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2FixtureDef_density_get(void * jarg1) {
  float jresult ;
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  float32 result;
  
  arg1 = (b2FixtureDef *)jarg1; 
  result = (float32) ((arg1)->density);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2FixtureDef_isSensor_set(void * jarg1, unsigned int jarg2) {
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  bool arg2 ;
  
  arg1 = (b2FixtureDef *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isSensor = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2FixtureDef_isSensor_get(void * jarg1) {
  unsigned int jresult ;
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  bool result;
  
  arg1 = (b2FixtureDef *)jarg1; 
  result = (bool) ((arg1)->isSensor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2FixtureDef_filter_set(void * jarg1, void * jarg2) {
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  b2Filter *arg2 = (b2Filter *) 0 ;
  
  arg1 = (b2FixtureDef *)jarg1; 
  arg2 = (b2Filter *)jarg2; 
  if (arg1) (arg1)->filter = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2FixtureDef_filter_get(void * jarg1) {
  void * jresult ;
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  b2Filter *result = 0 ;
  
  arg1 = (b2FixtureDef *)jarg1; 
  result = (b2Filter *)& ((arg1)->filter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2FixtureDef(void * jarg1) {
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  
  arg1 = (b2FixtureDef *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2FixtureProxy_aabb_set(void * jarg1, void * jarg2) {
  b2FixtureProxy *arg1 = (b2FixtureProxy *) 0 ;
  b2AABB *arg2 = (b2AABB *) 0 ;
  
  arg1 = (b2FixtureProxy *)jarg1; 
  arg2 = (b2AABB *)jarg2; 
  if (arg1) (arg1)->aabb = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2FixtureProxy_aabb_get(void * jarg1) {
  void * jresult ;
  b2FixtureProxy *arg1 = (b2FixtureProxy *) 0 ;
  b2AABB *result = 0 ;
  
  arg1 = (b2FixtureProxy *)jarg1; 
  result = (b2AABB *)& ((arg1)->aabb);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2FixtureProxy_fixture_set(void * jarg1, void * jarg2) {
  b2FixtureProxy *arg1 = (b2FixtureProxy *) 0 ;
  b2Fixture *arg2 = (b2Fixture *) 0 ;
  
  arg1 = (b2FixtureProxy *)jarg1; 
  arg2 = (b2Fixture *)jarg2; 
  if (arg1) (arg1)->fixture = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2FixtureProxy_fixture_get(void * jarg1) {
  void * jresult ;
  b2FixtureProxy *arg1 = (b2FixtureProxy *) 0 ;
  b2Fixture *result = 0 ;
  
  arg1 = (b2FixtureProxy *)jarg1; 
  result = (b2Fixture *) ((arg1)->fixture);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2FixtureProxy_childIndex_set(void * jarg1, int jarg2) {
  b2FixtureProxy *arg1 = (b2FixtureProxy *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2FixtureProxy *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->childIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2FixtureProxy_childIndex_get(void * jarg1) {
  int jresult ;
  b2FixtureProxy *arg1 = (b2FixtureProxy *) 0 ;
  int32 result;
  
  arg1 = (b2FixtureProxy *)jarg1; 
  result = (int32) ((arg1)->childIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2FixtureProxy_proxyId_set(void * jarg1, int jarg2) {
  b2FixtureProxy *arg1 = (b2FixtureProxy *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2FixtureProxy *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->proxyId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2FixtureProxy_proxyId_get(void * jarg1) {
  int jresult ;
  b2FixtureProxy *arg1 = (b2FixtureProxy *) 0 ;
  int32 result;
  
  arg1 = (b2FixtureProxy *)jarg1; 
  result = (int32) ((arg1)->proxyId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2FixtureProxy() {
  void * jresult ;
  b2FixtureProxy *result = 0 ;
  
  result = (b2FixtureProxy *)new b2FixtureProxy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2FixtureProxy(void * jarg1) {
  b2FixtureProxy *arg1 = (b2FixtureProxy *) 0 ;
  
  arg1 = (b2FixtureProxy *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2Fixture_GetType(void * jarg1) {
  int jresult ;
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  b2Shape::Type result;
  
  arg1 = (b2Fixture *)jarg1; 
  result = (b2Shape::Type)((b2Fixture const *)arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Fixture_GetShape__SWIG_0(void * jarg1) {
  void * jresult ;
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  b2Shape *result = 0 ;
  
  arg1 = (b2Fixture *)jarg1; 
  result = (b2Shape *)(arg1)->GetShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Fixture_SetSensor(void * jarg1, unsigned int jarg2) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  bool arg2 ;
  
  arg1 = (b2Fixture *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSensor(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2Fixture_IsSensor(void * jarg1) {
  unsigned int jresult ;
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  bool result;
  
  arg1 = (b2Fixture *)jarg1; 
  result = (bool)((b2Fixture const *)arg1)->IsSensor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Fixture_SetFilterData(void * jarg1, void * jarg2) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  b2Filter *arg2 = 0 ;
  
  arg1 = (b2Fixture *)jarg1; 
  arg2 = (b2Filter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Filter const & type is null", 0);
    return ;
  } 
  (arg1)->SetFilterData((b2Filter const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Fixture_GetFilterData(void * jarg1) {
  void * jresult ;
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  b2Filter *result = 0 ;
  
  arg1 = (b2Fixture *)jarg1; 
  result = (b2Filter *) &((b2Fixture const *)arg1)->GetFilterData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Fixture_Refilter(void * jarg1) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  
  arg1 = (b2Fixture *)jarg1; 
  (arg1)->Refilter();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Fixture_GetBody__SWIG_0(void * jarg1) {
  void * jresult ;
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  b2Body *result = 0 ;
  
  arg1 = (b2Fixture *)jarg1; 
  result = (b2Body *)(arg1)->GetBody();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Fixture_GetNext__SWIG_0(void * jarg1) {
  void * jresult ;
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  b2Fixture *result = 0 ;
  
  arg1 = (b2Fixture *)jarg1; 
  result = (b2Fixture *)(arg1)->GetNext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Fixture_GetUserData(void * jarg1) {
  void * jresult ;
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  void *result = 0 ;
  
  arg1 = (b2Fixture *)jarg1; 
  result = (void *)((b2Fixture const *)arg1)->GetUserData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Fixture_SetUserData(void * jarg1, void * jarg2) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (b2Fixture *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->SetUserData(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2Fixture_TestPoint(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  b2Vec2 *arg2 = 0 ;
  bool result;
  
  arg1 = (b2Fixture *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = (bool)((b2Fixture const *)arg1)->TestPoint((b2Vec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2Fixture_RayCast(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  b2RayCastOutput *arg2 = (b2RayCastOutput *) 0 ;
  b2RayCastInput *arg3 = 0 ;
  int32 arg4 ;
  bool result;
  
  arg1 = (b2Fixture *)jarg1; 
  arg2 = (b2RayCastOutput *)jarg2; 
  arg3 = (b2RayCastInput *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2RayCastInput const & type is null", 0);
    return 0;
  } 
  arg4 = (int32)jarg4; 
  result = (bool)((b2Fixture const *)arg1)->RayCast(arg2,(b2RayCastInput const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Fixture_GetMassData(void * jarg1, void * jarg2) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  b2MassData *arg2 = (b2MassData *) 0 ;
  
  arg1 = (b2Fixture *)jarg1; 
  arg2 = (b2MassData *)jarg2; 
  ((b2Fixture const *)arg1)->GetMassData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Fixture_SetDensity(void * jarg1, float jarg2) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Fixture *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetDensity(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Fixture_GetDensity(void * jarg1) {
  float jresult ;
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  float32 result;
  
  arg1 = (b2Fixture *)jarg1; 
  result = (float32)((b2Fixture const *)arg1)->GetDensity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Fixture_GetFriction(void * jarg1) {
  float jresult ;
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  float32 result;
  
  arg1 = (b2Fixture *)jarg1; 
  result = (float32)((b2Fixture const *)arg1)->GetFriction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Fixture_SetFriction(void * jarg1, float jarg2) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Fixture *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetFriction(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Fixture_GetRestitution(void * jarg1) {
  float jresult ;
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  float32 result;
  
  arg1 = (b2Fixture *)jarg1; 
  result = (float32)((b2Fixture const *)arg1)->GetRestitution();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Fixture_SetRestitution(void * jarg1, float jarg2) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Fixture *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetRestitution(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Fixture_GetAABB(void * jarg1, int jarg2) {
  void * jresult ;
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  int32 arg2 ;
  b2AABB *result = 0 ;
  
  arg1 = (b2Fixture *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (b2AABB *) &((b2Fixture const *)arg1)->GetAABB(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Fixture_Dump(void * jarg1, int jarg2) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2Fixture *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->Dump(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2Fixture(void * jarg1) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  
  arg1 = (b2Fixture *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2DestructionListener(void * jarg1) {
  b2DestructionListener *arg1 = (b2DestructionListener *) 0 ;
  
  arg1 = (b2DestructionListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DestructionListener_SayGoodbye__SWIG_0(void * jarg1, void * jarg2) {
  b2DestructionListener *arg1 = (b2DestructionListener *) 0 ;
  b2Joint *arg2 = (b2Joint *) 0 ;
  
  arg1 = (b2DestructionListener *)jarg1; 
  arg2 = (b2Joint *)jarg2; 
  (arg1)->SayGoodbye(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DestructionListener_SayGoodbye__SWIG_1(void * jarg1, void * jarg2) {
  b2DestructionListener *arg1 = (b2DestructionListener *) 0 ;
  b2Fixture *arg2 = (b2Fixture *) 0 ;
  
  arg1 = (b2DestructionListener *)jarg1; 
  arg2 = (b2Fixture *)jarg2; 
  (arg1)->SayGoodbye(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2ContactFilter(void * jarg1) {
  b2ContactFilter *arg1 = (b2ContactFilter *) 0 ;
  
  arg1 = (b2ContactFilter *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2ContactFilter_ShouldCollide(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  b2ContactFilter *arg1 = (b2ContactFilter *) 0 ;
  b2Fixture *arg2 = (b2Fixture *) 0 ;
  b2Fixture *arg3 = (b2Fixture *) 0 ;
  bool result;
  
  arg1 = (b2ContactFilter *)jarg1; 
  arg2 = (b2Fixture *)jarg2; 
  arg3 = (b2Fixture *)jarg3; 
  result = (bool)(arg1)->ShouldCollide(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2ContactFilter() {
  void * jresult ;
  b2ContactFilter *result = 0 ;
  
  result = (b2ContactFilter *)new b2ContactFilter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactImpulse_normalImpulses_set(void * jarg1, void * jarg2) {
  b2ContactImpulse *arg1 = (b2ContactImpulse *) 0 ;
  float32 *arg2 ;
  
  arg1 = (b2ContactImpulse *)jarg1; 
  arg2 = (float32 *)jarg2; 
  {
    size_t ii;
    float32 *b = (float32 *) arg1->normalImpulses;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((float32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2ContactImpulse_normalImpulses_get(void * jarg1) {
  void * jresult ;
  b2ContactImpulse *arg1 = (b2ContactImpulse *) 0 ;
  float32 *result = 0 ;
  
  arg1 = (b2ContactImpulse *)jarg1; 
  result = (float32 *)(float32 *) ((arg1)->normalImpulses);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactImpulse_tangentImpulses_set(void * jarg1, void * jarg2) {
  b2ContactImpulse *arg1 = (b2ContactImpulse *) 0 ;
  float32 *arg2 ;
  
  arg1 = (b2ContactImpulse *)jarg1; 
  arg2 = (float32 *)jarg2; 
  {
    size_t ii;
    float32 *b = (float32 *) arg1->tangentImpulses;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((float32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2ContactImpulse_tangentImpulses_get(void * jarg1) {
  void * jresult ;
  b2ContactImpulse *arg1 = (b2ContactImpulse *) 0 ;
  float32 *result = 0 ;
  
  arg1 = (b2ContactImpulse *)jarg1; 
  result = (float32 *)(float32 *) ((arg1)->tangentImpulses);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactImpulse_count_set(void * jarg1, int jarg2) {
  b2ContactImpulse *arg1 = (b2ContactImpulse *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2ContactImpulse *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2ContactImpulse_count_get(void * jarg1) {
  int jresult ;
  b2ContactImpulse *arg1 = (b2ContactImpulse *) 0 ;
  int32 result;
  
  arg1 = (b2ContactImpulse *)jarg1; 
  result = (int32) ((arg1)->count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2ContactImpulse() {
  void * jresult ;
  b2ContactImpulse *result = 0 ;
  
  result = (b2ContactImpulse *)new b2ContactImpulse();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2ContactImpulse(void * jarg1) {
  b2ContactImpulse *arg1 = (b2ContactImpulse *) 0 ;
  
  arg1 = (b2ContactImpulse *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2ContactListener(void * jarg1) {
  b2ContactListener *arg1 = (b2ContactListener *) 0 ;
  
  arg1 = (b2ContactListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactListener_BeginContact(void * jarg1, void * jarg2) {
  b2ContactListener *arg1 = (b2ContactListener *) 0 ;
  b2Contact *arg2 = (b2Contact *) 0 ;
  
  arg1 = (b2ContactListener *)jarg1; 
  arg2 = (b2Contact *)jarg2; 
  (arg1)->BeginContact(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactListener_EndContact(void * jarg1, void * jarg2) {
  b2ContactListener *arg1 = (b2ContactListener *) 0 ;
  b2Contact *arg2 = (b2Contact *) 0 ;
  
  arg1 = (b2ContactListener *)jarg1; 
  arg2 = (b2Contact *)jarg2; 
  (arg1)->EndContact(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactListener_PreSolve(void * jarg1, void * jarg2, void * jarg3) {
  b2ContactListener *arg1 = (b2ContactListener *) 0 ;
  b2Contact *arg2 = (b2Contact *) 0 ;
  b2Manifold *arg3 = (b2Manifold *) 0 ;
  
  arg1 = (b2ContactListener *)jarg1; 
  arg2 = (b2Contact *)jarg2; 
  arg3 = (b2Manifold *)jarg3; 
  (arg1)->PreSolve(arg2,(b2Manifold const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactListener_PostSolve(void * jarg1, void * jarg2, void * jarg3) {
  b2ContactListener *arg1 = (b2ContactListener *) 0 ;
  b2Contact *arg2 = (b2Contact *) 0 ;
  b2ContactImpulse *arg3 = (b2ContactImpulse *) 0 ;
  
  arg1 = (b2ContactListener *)jarg1; 
  arg2 = (b2Contact *)jarg2; 
  arg3 = (b2ContactImpulse *)jarg3; 
  (arg1)->PostSolve(arg2,(b2ContactImpulse const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2ContactListener() {
  void * jresult ;
  b2ContactListener *result = 0 ;
  
  result = (b2ContactListener *)new b2ContactListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2QueryCallback(void * jarg1) {
  b2QueryCallback *arg1 = (b2QueryCallback *) 0 ;
  
  arg1 = (b2QueryCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2QueryCallback_ReportFixture(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  b2QueryCallback *arg1 = (b2QueryCallback *) 0 ;
  b2Fixture *arg2 = (b2Fixture *) 0 ;
  bool result;
  
  arg1 = (b2QueryCallback *)jarg1; 
  arg2 = (b2Fixture *)jarg2; 
  result = (bool)(arg1)->ReportFixture(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2RayCastCallback(void * jarg1) {
  b2RayCastCallback *arg1 = (b2RayCastCallback *) 0 ;
  
  arg1 = (b2RayCastCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2RayCastCallback_ReportFixture(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5) {
  float jresult ;
  b2RayCastCallback *arg1 = (b2RayCastCallback *) 0 ;
  b2Fixture *arg2 = (b2Fixture *) 0 ;
  b2Vec2 *arg3 = 0 ;
  b2Vec2 *arg4 = 0 ;
  float32 arg5 ;
  float32 result;
  
  arg1 = (b2RayCastCallback *)jarg1; 
  arg2 = (b2Fixture *)jarg2; 
  arg3 = (b2Vec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  arg4 = (b2Vec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  arg5 = (float32)jarg5; 
  result = (float32)(arg1)->ReportFixture(arg2,(b2Vec2 const &)*arg3,(b2Vec2 const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Profile_step_set(void * jarg1, float jarg2) {
  b2Profile *arg1 = (b2Profile *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Profile *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->step = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Profile_step_get(void * jarg1) {
  float jresult ;
  b2Profile *arg1 = (b2Profile *) 0 ;
  float32 result;
  
  arg1 = (b2Profile *)jarg1; 
  result = (float32) ((arg1)->step);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Profile_collide_set(void * jarg1, float jarg2) {
  b2Profile *arg1 = (b2Profile *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Profile *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->collide = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Profile_collide_get(void * jarg1) {
  float jresult ;
  b2Profile *arg1 = (b2Profile *) 0 ;
  float32 result;
  
  arg1 = (b2Profile *)jarg1; 
  result = (float32) ((arg1)->collide);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Profile_solve_set(void * jarg1, float jarg2) {
  b2Profile *arg1 = (b2Profile *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Profile *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->solve = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Profile_solve_get(void * jarg1) {
  float jresult ;
  b2Profile *arg1 = (b2Profile *) 0 ;
  float32 result;
  
  arg1 = (b2Profile *)jarg1; 
  result = (float32) ((arg1)->solve);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Profile_solveInit_set(void * jarg1, float jarg2) {
  b2Profile *arg1 = (b2Profile *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Profile *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->solveInit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Profile_solveInit_get(void * jarg1) {
  float jresult ;
  b2Profile *arg1 = (b2Profile *) 0 ;
  float32 result;
  
  arg1 = (b2Profile *)jarg1; 
  result = (float32) ((arg1)->solveInit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Profile_solveVelocity_set(void * jarg1, float jarg2) {
  b2Profile *arg1 = (b2Profile *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Profile *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->solveVelocity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Profile_solveVelocity_get(void * jarg1) {
  float jresult ;
  b2Profile *arg1 = (b2Profile *) 0 ;
  float32 result;
  
  arg1 = (b2Profile *)jarg1; 
  result = (float32) ((arg1)->solveVelocity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Profile_solvePosition_set(void * jarg1, float jarg2) {
  b2Profile *arg1 = (b2Profile *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Profile *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->solvePosition = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Profile_solvePosition_get(void * jarg1) {
  float jresult ;
  b2Profile *arg1 = (b2Profile *) 0 ;
  float32 result;
  
  arg1 = (b2Profile *)jarg1; 
  result = (float32) ((arg1)->solvePosition);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Profile_broadphase_set(void * jarg1, float jarg2) {
  b2Profile *arg1 = (b2Profile *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Profile *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->broadphase = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Profile_broadphase_get(void * jarg1) {
  float jresult ;
  b2Profile *arg1 = (b2Profile *) 0 ;
  float32 result;
  
  arg1 = (b2Profile *)jarg1; 
  result = (float32) ((arg1)->broadphase);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Profile_solveTOI_set(void * jarg1, float jarg2) {
  b2Profile *arg1 = (b2Profile *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Profile *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->solveTOI = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Profile_solveTOI_get(void * jarg1) {
  float jresult ;
  b2Profile *arg1 = (b2Profile *) 0 ;
  float32 result;
  
  arg1 = (b2Profile *)jarg1; 
  result = (float32) ((arg1)->solveTOI);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2Profile() {
  void * jresult ;
  b2Profile *result = 0 ;
  
  result = (b2Profile *)new b2Profile();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2Profile(void * jarg1) {
  b2Profile *arg1 = (b2Profile *) 0 ;
  
  arg1 = (b2Profile *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2TimeStep_dt_set(void * jarg1, float jarg2) {
  b2TimeStep *arg1 = (b2TimeStep *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2TimeStep *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->dt = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2TimeStep_dt_get(void * jarg1) {
  float jresult ;
  b2TimeStep *arg1 = (b2TimeStep *) 0 ;
  float32 result;
  
  arg1 = (b2TimeStep *)jarg1; 
  result = (float32) ((arg1)->dt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2TimeStep_inv_dt_set(void * jarg1, float jarg2) {
  b2TimeStep *arg1 = (b2TimeStep *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2TimeStep *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->inv_dt = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2TimeStep_inv_dt_get(void * jarg1) {
  float jresult ;
  b2TimeStep *arg1 = (b2TimeStep *) 0 ;
  float32 result;
  
  arg1 = (b2TimeStep *)jarg1; 
  result = (float32) ((arg1)->inv_dt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2TimeStep_dtRatio_set(void * jarg1, float jarg2) {
  b2TimeStep *arg1 = (b2TimeStep *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2TimeStep *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->dtRatio = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2TimeStep_dtRatio_get(void * jarg1) {
  float jresult ;
  b2TimeStep *arg1 = (b2TimeStep *) 0 ;
  float32 result;
  
  arg1 = (b2TimeStep *)jarg1; 
  result = (float32) ((arg1)->dtRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2TimeStep_velocityIterations_set(void * jarg1, int jarg2) {
  b2TimeStep *arg1 = (b2TimeStep *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2TimeStep *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->velocityIterations = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2TimeStep_velocityIterations_get(void * jarg1) {
  int jresult ;
  b2TimeStep *arg1 = (b2TimeStep *) 0 ;
  int32 result;
  
  arg1 = (b2TimeStep *)jarg1; 
  result = (int32) ((arg1)->velocityIterations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2TimeStep_positionIterations_set(void * jarg1, int jarg2) {
  b2TimeStep *arg1 = (b2TimeStep *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2TimeStep *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->positionIterations = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2TimeStep_positionIterations_get(void * jarg1) {
  int jresult ;
  b2TimeStep *arg1 = (b2TimeStep *) 0 ;
  int32 result;
  
  arg1 = (b2TimeStep *)jarg1; 
  result = (int32) ((arg1)->positionIterations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2TimeStep_warmStarting_set(void * jarg1, unsigned int jarg2) {
  b2TimeStep *arg1 = (b2TimeStep *) 0 ;
  bool arg2 ;
  
  arg1 = (b2TimeStep *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->warmStarting = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2TimeStep_warmStarting_get(void * jarg1) {
  unsigned int jresult ;
  b2TimeStep *arg1 = (b2TimeStep *) 0 ;
  bool result;
  
  arg1 = (b2TimeStep *)jarg1; 
  result = (bool) ((arg1)->warmStarting);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2TimeStep() {
  void * jresult ;
  b2TimeStep *result = 0 ;
  
  result = (b2TimeStep *)new b2TimeStep();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2TimeStep(void * jarg1) {
  b2TimeStep *arg1 = (b2TimeStep *) 0 ;
  
  arg1 = (b2TimeStep *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Position_c_set(void * jarg1, void * jarg2) {
  b2Position *arg1 = (b2Position *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2Position *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->c = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Position_c_get(void * jarg1) {
  void * jresult ;
  b2Position *arg1 = (b2Position *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2Position *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->c);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Position_a_set(void * jarg1, float jarg2) {
  b2Position *arg1 = (b2Position *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Position *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Position_a_get(void * jarg1) {
  float jresult ;
  b2Position *arg1 = (b2Position *) 0 ;
  float32 result;
  
  arg1 = (b2Position *)jarg1; 
  result = (float32) ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2Position() {
  void * jresult ;
  b2Position *result = 0 ;
  
  result = (b2Position *)new b2Position();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2Position(void * jarg1) {
  b2Position *arg1 = (b2Position *) 0 ;
  
  arg1 = (b2Position *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Velocity_v_set(void * jarg1, void * jarg2) {
  b2Velocity *arg1 = (b2Velocity *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2Velocity *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->v = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Velocity_v_get(void * jarg1) {
  void * jresult ;
  b2Velocity *arg1 = (b2Velocity *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2Velocity *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->v);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Velocity_w_set(void * jarg1, float jarg2) {
  b2Velocity *arg1 = (b2Velocity *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Velocity *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Velocity_w_get(void * jarg1) {
  float jresult ;
  b2Velocity *arg1 = (b2Velocity *) 0 ;
  float32 result;
  
  arg1 = (b2Velocity *)jarg1; 
  result = (float32) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2Velocity() {
  void * jresult ;
  b2Velocity *result = 0 ;
  
  result = (b2Velocity *)new b2Velocity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2Velocity(void * jarg1) {
  b2Velocity *arg1 = (b2Velocity *) 0 ;
  
  arg1 = (b2Velocity *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2SolverData_step_set(void * jarg1, void * jarg2) {
  b2SolverData *arg1 = (b2SolverData *) 0 ;
  b2TimeStep *arg2 = (b2TimeStep *) 0 ;
  
  arg1 = (b2SolverData *)jarg1; 
  arg2 = (b2TimeStep *)jarg2; 
  if (arg1) (arg1)->step = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2SolverData_step_get(void * jarg1) {
  void * jresult ;
  b2SolverData *arg1 = (b2SolverData *) 0 ;
  b2TimeStep *result = 0 ;
  
  arg1 = (b2SolverData *)jarg1; 
  result = (b2TimeStep *)& ((arg1)->step);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2SolverData_positions_set(void * jarg1, void * jarg2) {
  b2SolverData *arg1 = (b2SolverData *) 0 ;
  b2Position *arg2 = (b2Position *) 0 ;
  
  arg1 = (b2SolverData *)jarg1; 
  arg2 = (b2Position *)jarg2; 
  if (arg1) (arg1)->positions = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2SolverData_positions_get(void * jarg1) {
  void * jresult ;
  b2SolverData *arg1 = (b2SolverData *) 0 ;
  b2Position *result = 0 ;
  
  arg1 = (b2SolverData *)jarg1; 
  result = (b2Position *) ((arg1)->positions);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2SolverData_velocities_set(void * jarg1, void * jarg2) {
  b2SolverData *arg1 = (b2SolverData *) 0 ;
  b2Velocity *arg2 = (b2Velocity *) 0 ;
  
  arg1 = (b2SolverData *)jarg1; 
  arg2 = (b2Velocity *)jarg2; 
  if (arg1) (arg1)->velocities = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2SolverData_velocities_get(void * jarg1) {
  void * jresult ;
  b2SolverData *arg1 = (b2SolverData *) 0 ;
  b2Velocity *result = 0 ;
  
  arg1 = (b2SolverData *)jarg1; 
  result = (b2Velocity *) ((arg1)->velocities);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2SolverData() {
  void * jresult ;
  b2SolverData *result = 0 ;
  
  result = (b2SolverData *)new b2SolverData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2SolverData(void * jarg1) {
  b2SolverData *arg1 = (b2SolverData *) 0 ;
  
  arg1 = (b2SolverData *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2_stackSize_get() {
  int jresult ;
  int32 result;
  
  result = (int32)(int32)b2_stackSize;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2_maxStackEntries_get() {
  int jresult ;
  int32 result;
  
  result = (int32)(int32)b2_maxStackEntries;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2StackEntry_data_set(void * jarg1, char * jarg2) {
  b2StackEntry *arg1 = (b2StackEntry *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (b2StackEntry *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->data;
    if (arg2) {
      arg1->data = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->data, (const char *)arg2);
    } else {
      arg1->data = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_b2StackEntry_data_get(void * jarg1) {
  char * jresult ;
  b2StackEntry *arg1 = (b2StackEntry *) 0 ;
  char *result = 0 ;
  
  arg1 = (b2StackEntry *)jarg1; 
  result = (char *) ((arg1)->data);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2StackEntry_size_set(void * jarg1, int jarg2) {
  b2StackEntry *arg1 = (b2StackEntry *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2StackEntry *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2StackEntry_size_get(void * jarg1) {
  int jresult ;
  b2StackEntry *arg1 = (b2StackEntry *) 0 ;
  int32 result;
  
  arg1 = (b2StackEntry *)jarg1; 
  result = (int32) ((arg1)->size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2StackEntry_usedMalloc_set(void * jarg1, unsigned int jarg2) {
  b2StackEntry *arg1 = (b2StackEntry *) 0 ;
  bool arg2 ;
  
  arg1 = (b2StackEntry *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->usedMalloc = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2StackEntry_usedMalloc_get(void * jarg1) {
  unsigned int jresult ;
  b2StackEntry *arg1 = (b2StackEntry *) 0 ;
  bool result;
  
  arg1 = (b2StackEntry *)jarg1; 
  result = (bool) ((arg1)->usedMalloc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2StackEntry() {
  void * jresult ;
  b2StackEntry *result = 0 ;
  
  result = (b2StackEntry *)new b2StackEntry();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2StackEntry(void * jarg1) {
  b2StackEntry *arg1 = (b2StackEntry *) 0 ;
  
  arg1 = (b2StackEntry *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2StackAllocator() {
  void * jresult ;
  b2StackAllocator *result = 0 ;
  
  result = (b2StackAllocator *)new b2StackAllocator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2StackAllocator(void * jarg1) {
  b2StackAllocator *arg1 = (b2StackAllocator *) 0 ;
  
  arg1 = (b2StackAllocator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2StackAllocator_Allocate(void * jarg1, int jarg2) {
  void * jresult ;
  b2StackAllocator *arg1 = (b2StackAllocator *) 0 ;
  int32 arg2 ;
  void *result = 0 ;
  
  arg1 = (b2StackAllocator *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (void *)(arg1)->Allocate(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2StackAllocator_Free(void * jarg1, void * jarg2) {
  b2StackAllocator *arg1 = (b2StackAllocator *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (b2StackAllocator *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->Free(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2StackAllocator_GetMaxAllocation(void * jarg1) {
  int jresult ;
  b2StackAllocator *arg1 = (b2StackAllocator *) 0 ;
  int32 result;
  
  arg1 = (b2StackAllocator *)jarg1; 
  result = (int32)((b2StackAllocator const *)arg1)->GetMaxAllocation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2ContactManager() {
  void * jresult ;
  b2ContactManager *result = 0 ;
  
  result = (b2ContactManager *)new b2ContactManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactManager_AddPair(void * jarg1, void * jarg2, void * jarg3) {
  b2ContactManager *arg1 = (b2ContactManager *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (b2ContactManager *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (void *)jarg3; 
  (arg1)->AddPair(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactManager_FindNewContacts(void * jarg1) {
  b2ContactManager *arg1 = (b2ContactManager *) 0 ;
  
  arg1 = (b2ContactManager *)jarg1; 
  (arg1)->FindNewContacts();
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactManager_Destroy(void * jarg1, void * jarg2) {
  b2ContactManager *arg1 = (b2ContactManager *) 0 ;
  b2Contact *arg2 = (b2Contact *) 0 ;
  
  arg1 = (b2ContactManager *)jarg1; 
  arg2 = (b2Contact *)jarg2; 
  (arg1)->Destroy(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactManager_Collide(void * jarg1) {
  b2ContactManager *arg1 = (b2ContactManager *) 0 ;
  
  arg1 = (b2ContactManager *)jarg1; 
  (arg1)->Collide();
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactManager_m_broadPhase_set(void * jarg1, void * jarg2) {
  b2ContactManager *arg1 = (b2ContactManager *) 0 ;
  b2BroadPhase *arg2 = (b2BroadPhase *) 0 ;
  
  arg1 = (b2ContactManager *)jarg1; 
  arg2 = (b2BroadPhase *)jarg2; 
  if (arg1) (arg1)->m_broadPhase = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2ContactManager_m_broadPhase_get(void * jarg1) {
  void * jresult ;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ;
  b2BroadPhase *result = 0 ;
  
  arg1 = (b2ContactManager *)jarg1; 
  result = (b2BroadPhase *)& ((arg1)->m_broadPhase);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactManager_m_contactList_set(void * jarg1, void * jarg2) {
  b2ContactManager *arg1 = (b2ContactManager *) 0 ;
  b2Contact *arg2 = (b2Contact *) 0 ;
  
  arg1 = (b2ContactManager *)jarg1; 
  arg2 = (b2Contact *)jarg2; 
  if (arg1) (arg1)->m_contactList = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2ContactManager_m_contactList_get(void * jarg1) {
  void * jresult ;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ;
  b2Contact *result = 0 ;
  
  arg1 = (b2ContactManager *)jarg1; 
  result = (b2Contact *) ((arg1)->m_contactList);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactManager_m_contactCount_set(void * jarg1, int jarg2) {
  b2ContactManager *arg1 = (b2ContactManager *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2ContactManager *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->m_contactCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2ContactManager_m_contactCount_get(void * jarg1) {
  int jresult ;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ;
  int32 result;
  
  arg1 = (b2ContactManager *)jarg1; 
  result = (int32) ((arg1)->m_contactCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactManager_m_contactFilter_set(void * jarg1, void * jarg2) {
  b2ContactManager *arg1 = (b2ContactManager *) 0 ;
  b2ContactFilter *arg2 = (b2ContactFilter *) 0 ;
  
  arg1 = (b2ContactManager *)jarg1; 
  arg2 = (b2ContactFilter *)jarg2; 
  if (arg1) (arg1)->m_contactFilter = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2ContactManager_m_contactFilter_get(void * jarg1) {
  void * jresult ;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ;
  b2ContactFilter *result = 0 ;
  
  arg1 = (b2ContactManager *)jarg1; 
  result = (b2ContactFilter *) ((arg1)->m_contactFilter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactManager_m_contactListener_set(void * jarg1, void * jarg2) {
  b2ContactManager *arg1 = (b2ContactManager *) 0 ;
  b2ContactListener *arg2 = (b2ContactListener *) 0 ;
  
  arg1 = (b2ContactManager *)jarg1; 
  arg2 = (b2ContactListener *)jarg2; 
  if (arg1) (arg1)->m_contactListener = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2ContactManager_m_contactListener_get(void * jarg1) {
  void * jresult ;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ;
  b2ContactListener *result = 0 ;
  
  arg1 = (b2ContactManager *)jarg1; 
  result = (b2ContactListener *) ((arg1)->m_contactListener);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactManager_m_allocator_set(void * jarg1, void * jarg2) {
  b2ContactManager *arg1 = (b2ContactManager *) 0 ;
  b2BlockAllocator *arg2 = (b2BlockAllocator *) 0 ;
  
  arg1 = (b2ContactManager *)jarg1; 
  arg2 = (b2BlockAllocator *)jarg2; 
  if (arg1) (arg1)->m_allocator = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2ContactManager_m_allocator_get(void * jarg1) {
  void * jresult ;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ;
  b2BlockAllocator *result = 0 ;
  
  arg1 = (b2ContactManager *)jarg1; 
  result = (b2BlockAllocator *) ((arg1)->m_allocator);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2ContactManager(void * jarg1) {
  b2ContactManager *arg1 = (b2ContactManager *) 0 ;
  
  arg1 = (b2ContactManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2World(void * jarg1) {
  void * jresult ;
  b2Vec2 *arg1 = 0 ;
  b2World *result = 0 ;
  
  arg1 = (b2Vec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = (b2World *)new b2World((b2Vec2 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2World(void * jarg1) {
  b2World *arg1 = (b2World *) 0 ;
  
  arg1 = (b2World *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2World_SetDestructionListener(void * jarg1, void * jarg2) {
  b2World *arg1 = (b2World *) 0 ;
  b2DestructionListener *arg2 = (b2DestructionListener *) 0 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = (b2DestructionListener *)jarg2; 
  (arg1)->SetDestructionListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2World_SetContactFilter(void * jarg1, void * jarg2) {
  b2World *arg1 = (b2World *) 0 ;
  b2ContactFilter *arg2 = (b2ContactFilter *) 0 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = (b2ContactFilter *)jarg2; 
  (arg1)->SetContactFilter(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2World_SetContactListener(void * jarg1, void * jarg2) {
  b2World *arg1 = (b2World *) 0 ;
  b2ContactListener *arg2 = (b2ContactListener *) 0 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = (b2ContactListener *)jarg2; 
  (arg1)->SetContactListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2World_SetDebugDraw(void * jarg1, void * jarg2) {
  b2World *arg1 = (b2World *) 0 ;
  b2Draw *arg2 = (b2Draw *) 0 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = (b2Draw *)jarg2; 
  (arg1)->SetDebugDraw(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2World_CreateBody(void * jarg1, void * jarg2) {
  void * jresult ;
  b2World *arg1 = (b2World *) 0 ;
  b2BodyDef *arg2 = (b2BodyDef *) 0 ;
  b2Body *result = 0 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = (b2BodyDef *)jarg2; 
  result = (b2Body *)(arg1)->CreateBody((b2BodyDef const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2World_DestroyBody(void * jarg1, void * jarg2) {
  b2World *arg1 = (b2World *) 0 ;
  b2Body *arg2 = (b2Body *) 0 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = (b2Body *)jarg2; 
  (arg1)->DestroyBody(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2World_CreateJoint(void * jarg1, void * jarg2) {
  void * jresult ;
  b2World *arg1 = (b2World *) 0 ;
  b2JointDef *arg2 = (b2JointDef *) 0 ;
  b2Joint *result = 0 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = (b2JointDef *)jarg2; 
  result = (b2Joint *)(arg1)->CreateJoint((b2JointDef const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2World_DestroyJoint(void * jarg1, void * jarg2) {
  b2World *arg1 = (b2World *) 0 ;
  b2Joint *arg2 = (b2Joint *) 0 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = (b2Joint *)jarg2; 
  (arg1)->DestroyJoint(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2World_Step(void * jarg1, float jarg2, int jarg3, int jarg4) {
  b2World *arg1 = (b2World *) 0 ;
  float32 arg2 ;
  int32 arg3 ;
  int32 arg4 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (int32)jarg3; 
  arg4 = (int32)jarg4; 
  (arg1)->Step(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2World_ClearForces(void * jarg1) {
  b2World *arg1 = (b2World *) 0 ;
  
  arg1 = (b2World *)jarg1; 
  (arg1)->ClearForces();
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2World_DrawDebugData(void * jarg1) {
  b2World *arg1 = (b2World *) 0 ;
  
  arg1 = (b2World *)jarg1; 
  (arg1)->DrawDebugData();
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2World_QueryAABB(void * jarg1, void * jarg2, void * jarg3) {
  b2World *arg1 = (b2World *) 0 ;
  b2QueryCallback *arg2 = (b2QueryCallback *) 0 ;
  b2AABB *arg3 = 0 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = (b2QueryCallback *)jarg2; 
  arg3 = (b2AABB *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2AABB const & type is null", 0);
    return ;
  } 
  ((b2World const *)arg1)->QueryAABB(arg2,(b2AABB const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2World_RayCast(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  b2World *arg1 = (b2World *) 0 ;
  b2RayCastCallback *arg2 = (b2RayCastCallback *) 0 ;
  b2Vec2 *arg3 = 0 ;
  b2Vec2 *arg4 = 0 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = (b2RayCastCallback *)jarg2; 
  arg3 = (b2Vec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  arg4 = (b2Vec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  ((b2World const *)arg1)->RayCast(arg2,(b2Vec2 const &)*arg3,(b2Vec2 const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2World_GetBodyList__SWIG_0(void * jarg1) {
  void * jresult ;
  b2World *arg1 = (b2World *) 0 ;
  b2Body *result = 0 ;
  
  arg1 = (b2World *)jarg1; 
  result = (b2Body *)(arg1)->GetBodyList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2World_GetJointList__SWIG_0(void * jarg1) {
  void * jresult ;
  b2World *arg1 = (b2World *) 0 ;
  b2Joint *result = 0 ;
  
  arg1 = (b2World *)jarg1; 
  result = (b2Joint *)(arg1)->GetJointList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2World_GetContactList__SWIG_0(void * jarg1) {
  void * jresult ;
  b2World *arg1 = (b2World *) 0 ;
  b2Contact *result = 0 ;
  
  arg1 = (b2World *)jarg1; 
  result = (b2Contact *)(arg1)->GetContactList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2World_SetAllowSleeping(void * jarg1, unsigned int jarg2) {
  b2World *arg1 = (b2World *) 0 ;
  bool arg2 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAllowSleeping(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2World_GetAllowSleeping(void * jarg1) {
  unsigned int jresult ;
  b2World *arg1 = (b2World *) 0 ;
  bool result;
  
  arg1 = (b2World *)jarg1; 
  result = (bool)((b2World const *)arg1)->GetAllowSleeping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2World_SetWarmStarting(void * jarg1, unsigned int jarg2) {
  b2World *arg1 = (b2World *) 0 ;
  bool arg2 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetWarmStarting(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2World_GetWarmStarting(void * jarg1) {
  unsigned int jresult ;
  b2World *arg1 = (b2World *) 0 ;
  bool result;
  
  arg1 = (b2World *)jarg1; 
  result = (bool)((b2World const *)arg1)->GetWarmStarting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2World_SetContinuousPhysics(void * jarg1, unsigned int jarg2) {
  b2World *arg1 = (b2World *) 0 ;
  bool arg2 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetContinuousPhysics(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2World_GetContinuousPhysics(void * jarg1) {
  unsigned int jresult ;
  b2World *arg1 = (b2World *) 0 ;
  bool result;
  
  arg1 = (b2World *)jarg1; 
  result = (bool)((b2World const *)arg1)->GetContinuousPhysics();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2World_SetSubStepping(void * jarg1, unsigned int jarg2) {
  b2World *arg1 = (b2World *) 0 ;
  bool arg2 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSubStepping(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2World_GetSubStepping(void * jarg1) {
  unsigned int jresult ;
  b2World *arg1 = (b2World *) 0 ;
  bool result;
  
  arg1 = (b2World *)jarg1; 
  result = (bool)((b2World const *)arg1)->GetSubStepping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2World_GetProxyCount(void * jarg1) {
  int jresult ;
  b2World *arg1 = (b2World *) 0 ;
  int32 result;
  
  arg1 = (b2World *)jarg1; 
  result = (int32)((b2World const *)arg1)->GetProxyCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2World_GetBodyCount(void * jarg1) {
  int jresult ;
  b2World *arg1 = (b2World *) 0 ;
  int32 result;
  
  arg1 = (b2World *)jarg1; 
  result = (int32)((b2World const *)arg1)->GetBodyCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2World_GetJointCount(void * jarg1) {
  int jresult ;
  b2World *arg1 = (b2World *) 0 ;
  int32 result;
  
  arg1 = (b2World *)jarg1; 
  result = (int32)((b2World const *)arg1)->GetJointCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2World_GetContactCount(void * jarg1) {
  int jresult ;
  b2World *arg1 = (b2World *) 0 ;
  int32 result;
  
  arg1 = (b2World *)jarg1; 
  result = (int32)((b2World const *)arg1)->GetContactCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2World_GetTreeHeight(void * jarg1) {
  int jresult ;
  b2World *arg1 = (b2World *) 0 ;
  int32 result;
  
  arg1 = (b2World *)jarg1; 
  result = (int32)((b2World const *)arg1)->GetTreeHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2World_GetTreeBalance(void * jarg1) {
  int jresult ;
  b2World *arg1 = (b2World *) 0 ;
  int32 result;
  
  arg1 = (b2World *)jarg1; 
  result = (int32)((b2World const *)arg1)->GetTreeBalance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2World_GetTreeQuality(void * jarg1) {
  float jresult ;
  b2World *arg1 = (b2World *) 0 ;
  float32 result;
  
  arg1 = (b2World *)jarg1; 
  result = (float32)((b2World const *)arg1)->GetTreeQuality();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2World_SetGravity(void * jarg1, void * jarg2) {
  b2World *arg1 = (b2World *) 0 ;
  b2Vec2 *arg2 = 0 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  (arg1)->SetGravity((b2Vec2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2World_GetGravity(void * jarg1) {
  void * jresult ;
  b2World *arg1 = (b2World *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2World *)jarg1; 
  result = ((b2World const *)arg1)->GetGravity();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2World_IsLocked(void * jarg1) {
  unsigned int jresult ;
  b2World *arg1 = (b2World *) 0 ;
  bool result;
  
  arg1 = (b2World *)jarg1; 
  result = (bool)((b2World const *)arg1)->IsLocked();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2World_SetAutoClearForces(void * jarg1, unsigned int jarg2) {
  b2World *arg1 = (b2World *) 0 ;
  bool arg2 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAutoClearForces(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2World_GetAutoClearForces(void * jarg1) {
  unsigned int jresult ;
  b2World *arg1 = (b2World *) 0 ;
  bool result;
  
  arg1 = (b2World *)jarg1; 
  result = (bool)((b2World const *)arg1)->GetAutoClearForces();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2World_GetContactManager(void * jarg1) {
  void * jresult ;
  b2World *arg1 = (b2World *) 0 ;
  b2ContactManager *result = 0 ;
  
  arg1 = (b2World *)jarg1; 
  result = (b2ContactManager *) &((b2World const *)arg1)->GetContactManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2World_GetProfile(void * jarg1) {
  void * jresult ;
  b2World *arg1 = (b2World *) 0 ;
  b2Profile *result = 0 ;
  
  arg1 = (b2World *)jarg1; 
  result = (b2Profile *) &((b2World const *)arg1)->GetProfile();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2World_Dump(void * jarg1) {
  b2World *arg1 = (b2World *) 0 ;
  
  arg1 = (b2World *)jarg1; 
  (arg1)->Dump();
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2MixFriction(float jarg1, float jarg2) {
  float jresult ;
  float32 arg1 ;
  float32 arg2 ;
  float32 result;
  
  arg1 = (float32)jarg1; 
  arg2 = (float32)jarg2; 
  result = (float32)b2MixFriction(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2MixRestitution(float jarg1, float jarg2) {
  float jresult ;
  float32 arg1 ;
  float32 arg2 ;
  float32 result;
  
  arg1 = (float32)jarg1; 
  arg2 = (float32)jarg2; 
  result = (float32)b2MixRestitution(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactRegister_createFcn_set(void * jarg1, void * jarg2) {
  b2ContactRegister *arg1 = (b2ContactRegister *) 0 ;
  b2ContactCreateFcn *arg2 = (b2ContactCreateFcn *) 0 ;
  
  arg1 = (b2ContactRegister *)jarg1; 
  arg2 = (b2ContactCreateFcn *)jarg2; 
  if (arg1) (arg1)->createFcn = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2ContactRegister_createFcn_get(void * jarg1) {
  void * jresult ;
  b2ContactRegister *arg1 = (b2ContactRegister *) 0 ;
  b2ContactCreateFcn *result = 0 ;
  
  arg1 = (b2ContactRegister *)jarg1; 
  result = (b2ContactCreateFcn *) ((arg1)->createFcn);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactRegister_destroyFcn_set(void * jarg1, void * jarg2) {
  b2ContactRegister *arg1 = (b2ContactRegister *) 0 ;
  b2ContactDestroyFcn *arg2 = (b2ContactDestroyFcn *) 0 ;
  
  arg1 = (b2ContactRegister *)jarg1; 
  arg2 = (b2ContactDestroyFcn *)jarg2; 
  if (arg1) (arg1)->destroyFcn = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2ContactRegister_destroyFcn_get(void * jarg1) {
  void * jresult ;
  b2ContactRegister *arg1 = (b2ContactRegister *) 0 ;
  b2ContactDestroyFcn *result = 0 ;
  
  arg1 = (b2ContactRegister *)jarg1; 
  result = (b2ContactDestroyFcn *) ((arg1)->destroyFcn);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactRegister_primary_set(void * jarg1, unsigned int jarg2) {
  b2ContactRegister *arg1 = (b2ContactRegister *) 0 ;
  bool arg2 ;
  
  arg1 = (b2ContactRegister *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->primary = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2ContactRegister_primary_get(void * jarg1) {
  unsigned int jresult ;
  b2ContactRegister *arg1 = (b2ContactRegister *) 0 ;
  bool result;
  
  arg1 = (b2ContactRegister *)jarg1; 
  result = (bool) ((arg1)->primary);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2ContactRegister() {
  void * jresult ;
  b2ContactRegister *result = 0 ;
  
  result = (b2ContactRegister *)new b2ContactRegister();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2ContactRegister(void * jarg1) {
  b2ContactRegister *arg1 = (b2ContactRegister *) 0 ;
  
  arg1 = (b2ContactRegister *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactEdge_other_set(void * jarg1, void * jarg2) {
  b2ContactEdge *arg1 = (b2ContactEdge *) 0 ;
  b2Body *arg2 = (b2Body *) 0 ;
  
  arg1 = (b2ContactEdge *)jarg1; 
  arg2 = (b2Body *)jarg2; 
  if (arg1) (arg1)->other = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2ContactEdge_other_get(void * jarg1) {
  void * jresult ;
  b2ContactEdge *arg1 = (b2ContactEdge *) 0 ;
  b2Body *result = 0 ;
  
  arg1 = (b2ContactEdge *)jarg1; 
  result = (b2Body *) ((arg1)->other);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactEdge_contact_set(void * jarg1, void * jarg2) {
  b2ContactEdge *arg1 = (b2ContactEdge *) 0 ;
  b2Contact *arg2 = (b2Contact *) 0 ;
  
  arg1 = (b2ContactEdge *)jarg1; 
  arg2 = (b2Contact *)jarg2; 
  if (arg1) (arg1)->contact = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2ContactEdge_contact_get(void * jarg1) {
  void * jresult ;
  b2ContactEdge *arg1 = (b2ContactEdge *) 0 ;
  b2Contact *result = 0 ;
  
  arg1 = (b2ContactEdge *)jarg1; 
  result = (b2Contact *) ((arg1)->contact);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactEdge_prev_set(void * jarg1, void * jarg2) {
  b2ContactEdge *arg1 = (b2ContactEdge *) 0 ;
  b2ContactEdge *arg2 = (b2ContactEdge *) 0 ;
  
  arg1 = (b2ContactEdge *)jarg1; 
  arg2 = (b2ContactEdge *)jarg2; 
  if (arg1) (arg1)->prev = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2ContactEdge_prev_get(void * jarg1) {
  void * jresult ;
  b2ContactEdge *arg1 = (b2ContactEdge *) 0 ;
  b2ContactEdge *result = 0 ;
  
  arg1 = (b2ContactEdge *)jarg1; 
  result = (b2ContactEdge *) ((arg1)->prev);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2ContactEdge_next_set(void * jarg1, void * jarg2) {
  b2ContactEdge *arg1 = (b2ContactEdge *) 0 ;
  b2ContactEdge *arg2 = (b2ContactEdge *) 0 ;
  
  arg1 = (b2ContactEdge *)jarg1; 
  arg2 = (b2ContactEdge *)jarg2; 
  if (arg1) (arg1)->next = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2ContactEdge_next_get(void * jarg1) {
  void * jresult ;
  b2ContactEdge *arg1 = (b2ContactEdge *) 0 ;
  b2ContactEdge *result = 0 ;
  
  arg1 = (b2ContactEdge *)jarg1; 
  result = (b2ContactEdge *) ((arg1)->next);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2ContactEdge() {
  void * jresult ;
  b2ContactEdge *result = 0 ;
  
  result = (b2ContactEdge *)new b2ContactEdge();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2ContactEdge(void * jarg1) {
  b2ContactEdge *arg1 = (b2ContactEdge *) 0 ;
  
  arg1 = (b2ContactEdge *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Contact_GetManifold__SWIG_0(void * jarg1) {
  void * jresult ;
  b2Contact *arg1 = (b2Contact *) 0 ;
  b2Manifold *result = 0 ;
  
  arg1 = (b2Contact *)jarg1; 
  result = (b2Manifold *)(arg1)->GetManifold();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Contact_GetWorldManifold(void * jarg1, void * jarg2) {
  b2Contact *arg1 = (b2Contact *) 0 ;
  b2WorldManifold *arg2 = (b2WorldManifold *) 0 ;
  
  arg1 = (b2Contact *)jarg1; 
  arg2 = (b2WorldManifold *)jarg2; 
  ((b2Contact const *)arg1)->GetWorldManifold(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2Contact_IsTouching(void * jarg1) {
  unsigned int jresult ;
  b2Contact *arg1 = (b2Contact *) 0 ;
  bool result;
  
  arg1 = (b2Contact *)jarg1; 
  result = (bool)((b2Contact const *)arg1)->IsTouching();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Contact_SetEnabled(void * jarg1, unsigned int jarg2) {
  b2Contact *arg1 = (b2Contact *) 0 ;
  bool arg2 ;
  
  arg1 = (b2Contact *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetEnabled(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2Contact_IsEnabled(void * jarg1) {
  unsigned int jresult ;
  b2Contact *arg1 = (b2Contact *) 0 ;
  bool result;
  
  arg1 = (b2Contact *)jarg1; 
  result = (bool)((b2Contact const *)arg1)->IsEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Contact_GetNext__SWIG_0(void * jarg1) {
  void * jresult ;
  b2Contact *arg1 = (b2Contact *) 0 ;
  b2Contact *result = 0 ;
  
  arg1 = (b2Contact *)jarg1; 
  result = (b2Contact *)(arg1)->GetNext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Contact_GetFixtureA__SWIG_0(void * jarg1) {
  void * jresult ;
  b2Contact *arg1 = (b2Contact *) 0 ;
  b2Fixture *result = 0 ;
  
  arg1 = (b2Contact *)jarg1; 
  result = (b2Fixture *)(arg1)->GetFixtureA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2Contact_GetChildIndexA(void * jarg1) {
  int jresult ;
  b2Contact *arg1 = (b2Contact *) 0 ;
  int32 result;
  
  arg1 = (b2Contact *)jarg1; 
  result = (int32)((b2Contact const *)arg1)->GetChildIndexA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Contact_GetFixtureB__SWIG_0(void * jarg1) {
  void * jresult ;
  b2Contact *arg1 = (b2Contact *) 0 ;
  b2Fixture *result = 0 ;
  
  arg1 = (b2Contact *)jarg1; 
  result = (b2Fixture *)(arg1)->GetFixtureB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2Contact_GetChildIndexB(void * jarg1) {
  int jresult ;
  b2Contact *arg1 = (b2Contact *) 0 ;
  int32 result;
  
  arg1 = (b2Contact *)jarg1; 
  result = (int32)((b2Contact const *)arg1)->GetChildIndexB();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Contact_SetFriction(void * jarg1, float jarg2) {
  b2Contact *arg1 = (b2Contact *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Contact *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetFriction(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Contact_GetFriction(void * jarg1) {
  float jresult ;
  b2Contact *arg1 = (b2Contact *) 0 ;
  float32 result;
  
  arg1 = (b2Contact *)jarg1; 
  result = (float32)((b2Contact const *)arg1)->GetFriction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Contact_ResetFriction(void * jarg1) {
  b2Contact *arg1 = (b2Contact *) 0 ;
  
  arg1 = (b2Contact *)jarg1; 
  (arg1)->ResetFriction();
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Contact_SetRestitution(void * jarg1, float jarg2) {
  b2Contact *arg1 = (b2Contact *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Contact *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetRestitution(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Contact_GetRestitution(void * jarg1) {
  float jresult ;
  b2Contact *arg1 = (b2Contact *) 0 ;
  float32 result;
  
  arg1 = (b2Contact *)jarg1; 
  result = (float32)((b2Contact const *)arg1)->GetRestitution();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Contact_ResetRestitution(void * jarg1) {
  b2Contact *arg1 = (b2Contact *) 0 ;
  
  arg1 = (b2Contact *)jarg1; 
  (arg1)->ResetRestitution();
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Contact_Evaluate(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  b2Contact *arg1 = (b2Contact *) 0 ;
  b2Manifold *arg2 = (b2Manifold *) 0 ;
  b2Transform *arg3 = 0 ;
  b2Transform *arg4 = 0 ;
  
  arg1 = (b2Contact *)jarg1; 
  arg2 = (b2Manifold *)jarg2; 
  arg3 = (b2Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  arg4 = (b2Transform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  (arg1)->Evaluate(arg2,(b2Transform const &)*arg3,(b2Transform const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Jacobian_linear_set(void * jarg1, void * jarg2) {
  b2Jacobian *arg1 = (b2Jacobian *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2Jacobian *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->linear = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Jacobian_linear_get(void * jarg1) {
  void * jresult ;
  b2Jacobian *arg1 = (b2Jacobian *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2Jacobian *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->linear);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Jacobian_angularA_set(void * jarg1, float jarg2) {
  b2Jacobian *arg1 = (b2Jacobian *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Jacobian *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->angularA = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Jacobian_angularA_get(void * jarg1) {
  float jresult ;
  b2Jacobian *arg1 = (b2Jacobian *) 0 ;
  float32 result;
  
  arg1 = (b2Jacobian *)jarg1; 
  result = (float32) ((arg1)->angularA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Jacobian_angularB_set(void * jarg1, float jarg2) {
  b2Jacobian *arg1 = (b2Jacobian *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Jacobian *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->angularB = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Jacobian_angularB_get(void * jarg1) {
  float jresult ;
  b2Jacobian *arg1 = (b2Jacobian *) 0 ;
  float32 result;
  
  arg1 = (b2Jacobian *)jarg1; 
  result = (float32) ((arg1)->angularB);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2Jacobian() {
  void * jresult ;
  b2Jacobian *result = 0 ;
  
  result = (b2Jacobian *)new b2Jacobian();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2Jacobian(void * jarg1) {
  b2Jacobian *arg1 = (b2Jacobian *) 0 ;
  
  arg1 = (b2Jacobian *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2JointEdge_other_set(void * jarg1, void * jarg2) {
  b2JointEdge *arg1 = (b2JointEdge *) 0 ;
  b2Body *arg2 = (b2Body *) 0 ;
  
  arg1 = (b2JointEdge *)jarg1; 
  arg2 = (b2Body *)jarg2; 
  if (arg1) (arg1)->other = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2JointEdge_other_get(void * jarg1) {
  void * jresult ;
  b2JointEdge *arg1 = (b2JointEdge *) 0 ;
  b2Body *result = 0 ;
  
  arg1 = (b2JointEdge *)jarg1; 
  result = (b2Body *) ((arg1)->other);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2JointEdge_joint_set(void * jarg1, void * jarg2) {
  b2JointEdge *arg1 = (b2JointEdge *) 0 ;
  b2Joint *arg2 = (b2Joint *) 0 ;
  
  arg1 = (b2JointEdge *)jarg1; 
  arg2 = (b2Joint *)jarg2; 
  if (arg1) (arg1)->joint = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2JointEdge_joint_get(void * jarg1) {
  void * jresult ;
  b2JointEdge *arg1 = (b2JointEdge *) 0 ;
  b2Joint *result = 0 ;
  
  arg1 = (b2JointEdge *)jarg1; 
  result = (b2Joint *) ((arg1)->joint);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2JointEdge_prev_set(void * jarg1, void * jarg2) {
  b2JointEdge *arg1 = (b2JointEdge *) 0 ;
  b2JointEdge *arg2 = (b2JointEdge *) 0 ;
  
  arg1 = (b2JointEdge *)jarg1; 
  arg2 = (b2JointEdge *)jarg2; 
  if (arg1) (arg1)->prev = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2JointEdge_prev_get(void * jarg1) {
  void * jresult ;
  b2JointEdge *arg1 = (b2JointEdge *) 0 ;
  b2JointEdge *result = 0 ;
  
  arg1 = (b2JointEdge *)jarg1; 
  result = (b2JointEdge *) ((arg1)->prev);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2JointEdge_next_set(void * jarg1, void * jarg2) {
  b2JointEdge *arg1 = (b2JointEdge *) 0 ;
  b2JointEdge *arg2 = (b2JointEdge *) 0 ;
  
  arg1 = (b2JointEdge *)jarg1; 
  arg2 = (b2JointEdge *)jarg2; 
  if (arg1) (arg1)->next = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2JointEdge_next_get(void * jarg1) {
  void * jresult ;
  b2JointEdge *arg1 = (b2JointEdge *) 0 ;
  b2JointEdge *result = 0 ;
  
  arg1 = (b2JointEdge *)jarg1; 
  result = (b2JointEdge *) ((arg1)->next);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2JointEdge() {
  void * jresult ;
  b2JointEdge *result = 0 ;
  
  result = (b2JointEdge *)new b2JointEdge();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2JointEdge(void * jarg1) {
  b2JointEdge *arg1 = (b2JointEdge *) 0 ;
  
  arg1 = (b2JointEdge *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2JointDef() {
  void * jresult ;
  b2JointDef *result = 0 ;
  
  result = (b2JointDef *)new b2JointDef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2JointDef_type_set(void * jarg1, int jarg2) {
  b2JointDef *arg1 = (b2JointDef *) 0 ;
  b2JointType arg2 ;
  
  arg1 = (b2JointDef *)jarg1; 
  arg2 = (b2JointType)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2JointDef_type_get(void * jarg1) {
  int jresult ;
  b2JointDef *arg1 = (b2JointDef *) 0 ;
  b2JointType result;
  
  arg1 = (b2JointDef *)jarg1; 
  result = (b2JointType) ((arg1)->type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2JointDef_userData_set(void * jarg1, void * jarg2) {
  b2JointDef *arg1 = (b2JointDef *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (b2JointDef *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->userData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2JointDef_userData_get(void * jarg1) {
  void * jresult ;
  b2JointDef *arg1 = (b2JointDef *) 0 ;
  void *result = 0 ;
  
  arg1 = (b2JointDef *)jarg1; 
  result = (void *) ((arg1)->userData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2JointDef_bodyA_set(void * jarg1, void * jarg2) {
  b2JointDef *arg1 = (b2JointDef *) 0 ;
  b2Body *arg2 = (b2Body *) 0 ;
  
  arg1 = (b2JointDef *)jarg1; 
  arg2 = (b2Body *)jarg2; 
  if (arg1) (arg1)->bodyA = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2JointDef_bodyA_get(void * jarg1) {
  void * jresult ;
  b2JointDef *arg1 = (b2JointDef *) 0 ;
  b2Body *result = 0 ;
  
  arg1 = (b2JointDef *)jarg1; 
  result = (b2Body *) ((arg1)->bodyA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2JointDef_bodyB_set(void * jarg1, void * jarg2) {
  b2JointDef *arg1 = (b2JointDef *) 0 ;
  b2Body *arg2 = (b2Body *) 0 ;
  
  arg1 = (b2JointDef *)jarg1; 
  arg2 = (b2Body *)jarg2; 
  if (arg1) (arg1)->bodyB = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2JointDef_bodyB_get(void * jarg1) {
  void * jresult ;
  b2JointDef *arg1 = (b2JointDef *) 0 ;
  b2Body *result = 0 ;
  
  arg1 = (b2JointDef *)jarg1; 
  result = (b2Body *) ((arg1)->bodyB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2JointDef_collideConnected_set(void * jarg1, unsigned int jarg2) {
  b2JointDef *arg1 = (b2JointDef *) 0 ;
  bool arg2 ;
  
  arg1 = (b2JointDef *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->collideConnected = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2JointDef_collideConnected_get(void * jarg1) {
  unsigned int jresult ;
  b2JointDef *arg1 = (b2JointDef *) 0 ;
  bool result;
  
  arg1 = (b2JointDef *)jarg1; 
  result = (bool) ((arg1)->collideConnected);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2JointDef(void * jarg1) {
  b2JointDef *arg1 = (b2JointDef *) 0 ;
  
  arg1 = (b2JointDef *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2Joint_GetType(void * jarg1) {
  int jresult ;
  b2Joint *arg1 = (b2Joint *) 0 ;
  b2JointType result;
  
  arg1 = (b2Joint *)jarg1; 
  result = (b2JointType)((b2Joint const *)arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Joint_GetBodyA(void * jarg1) {
  void * jresult ;
  b2Joint *arg1 = (b2Joint *) 0 ;
  b2Body *result = 0 ;
  
  arg1 = (b2Joint *)jarg1; 
  result = (b2Body *)(arg1)->GetBodyA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Joint_GetBodyB(void * jarg1) {
  void * jresult ;
  b2Joint *arg1 = (b2Joint *) 0 ;
  b2Body *result = 0 ;
  
  arg1 = (b2Joint *)jarg1; 
  result = (b2Body *)(arg1)->GetBodyB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Joint_GetAnchorA(void * jarg1) {
  void * jresult ;
  b2Joint *arg1 = (b2Joint *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2Joint *)jarg1; 
  result = ((b2Joint const *)arg1)->GetAnchorA();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Joint_GetAnchorB(void * jarg1) {
  void * jresult ;
  b2Joint *arg1 = (b2Joint *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2Joint *)jarg1; 
  result = ((b2Joint const *)arg1)->GetAnchorB();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Joint_GetReactionForce(void * jarg1, float jarg2) {
  void * jresult ;
  b2Joint *arg1 = (b2Joint *) 0 ;
  float32 arg2 ;
  b2Vec2 result;
  
  arg1 = (b2Joint *)jarg1; 
  arg2 = (float32)jarg2; 
  result = ((b2Joint const *)arg1)->GetReactionForce(arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2Joint_GetReactionTorque(void * jarg1, float jarg2) {
  float jresult ;
  b2Joint *arg1 = (b2Joint *) 0 ;
  float32 arg2 ;
  float32 result;
  
  arg1 = (b2Joint *)jarg1; 
  arg2 = (float32)jarg2; 
  result = (float32)((b2Joint const *)arg1)->GetReactionTorque(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Joint_GetNext__SWIG_0(void * jarg1) {
  void * jresult ;
  b2Joint *arg1 = (b2Joint *) 0 ;
  b2Joint *result = 0 ;
  
  arg1 = (b2Joint *)jarg1; 
  result = (b2Joint *)(arg1)->GetNext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2Joint_GetUserData(void * jarg1) {
  void * jresult ;
  b2Joint *arg1 = (b2Joint *) 0 ;
  void *result = 0 ;
  
  arg1 = (b2Joint *)jarg1; 
  result = (void *)((b2Joint const *)arg1)->GetUserData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Joint_SetUserData(void * jarg1, void * jarg2) {
  b2Joint *arg1 = (b2Joint *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (b2Joint *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->SetUserData(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2Joint_IsActive(void * jarg1) {
  unsigned int jresult ;
  b2Joint *arg1 = (b2Joint *) 0 ;
  bool result;
  
  arg1 = (b2Joint *)jarg1; 
  result = (bool)((b2Joint const *)arg1)->IsActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2Joint_GetCollideConnected(void * jarg1) {
  unsigned int jresult ;
  b2Joint *arg1 = (b2Joint *) 0 ;
  bool result;
  
  arg1 = (b2Joint *)jarg1; 
  result = (bool)((b2Joint const *)arg1)->GetCollideConnected();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Joint_Dump(void * jarg1) {
  b2Joint *arg1 = (b2Joint *) 0 ;
  
  arg1 = (b2Joint *)jarg1; 
  (arg1)->Dump();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2DistanceJointDef() {
  void * jresult ;
  b2DistanceJointDef *result = 0 ;
  
  result = (b2DistanceJointDef *)new b2DistanceJointDef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DistanceJointDef_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ;
  b2Body *arg2 = (b2Body *) 0 ;
  b2Body *arg3 = (b2Body *) 0 ;
  b2Vec2 *arg4 = 0 ;
  b2Vec2 *arg5 = 0 ;
  
  arg1 = (b2DistanceJointDef *)jarg1; 
  arg2 = (b2Body *)jarg2; 
  arg3 = (b2Body *)jarg3; 
  arg4 = (b2Vec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  arg5 = (b2Vec2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  (arg1)->Initialize(arg2,arg3,(b2Vec2 const &)*arg4,(b2Vec2 const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DistanceJointDef_localAnchorA_set(void * jarg1, void * jarg2) {
  b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2DistanceJointDef *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->localAnchorA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2DistanceJointDef_localAnchorA_get(void * jarg1) {
  void * jresult ;
  b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2DistanceJointDef *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->localAnchorA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DistanceJointDef_localAnchorB_set(void * jarg1, void * jarg2) {
  b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2DistanceJointDef *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->localAnchorB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2DistanceJointDef_localAnchorB_get(void * jarg1) {
  void * jresult ;
  b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2DistanceJointDef *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->localAnchorB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DistanceJointDef_length_set(void * jarg1, float jarg2) {
  b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2DistanceJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2DistanceJointDef_length_get(void * jarg1) {
  float jresult ;
  b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2DistanceJointDef *)jarg1; 
  result = (float32) ((arg1)->length);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DistanceJointDef_frequencyHz_set(void * jarg1, float jarg2) {
  b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2DistanceJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->frequencyHz = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2DistanceJointDef_frequencyHz_get(void * jarg1) {
  float jresult ;
  b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2DistanceJointDef *)jarg1; 
  result = (float32) ((arg1)->frequencyHz);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DistanceJointDef_dampingRatio_set(void * jarg1, float jarg2) {
  b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2DistanceJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->dampingRatio = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2DistanceJointDef_dampingRatio_get(void * jarg1) {
  float jresult ;
  b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2DistanceJointDef *)jarg1; 
  result = (float32) ((arg1)->dampingRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2DistanceJointDef(void * jarg1) {
  b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ;
  
  arg1 = (b2DistanceJointDef *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2DistanceJoint_GetAnchorA(void * jarg1) {
  void * jresult ;
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2DistanceJoint *)jarg1; 
  result = ((b2DistanceJoint const *)arg1)->GetAnchorA();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2DistanceJoint_GetAnchorB(void * jarg1) {
  void * jresult ;
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2DistanceJoint *)jarg1; 
  result = ((b2DistanceJoint const *)arg1)->GetAnchorB();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2DistanceJoint_GetReactionForce(void * jarg1, float jarg2) {
  void * jresult ;
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ;
  float32 arg2 ;
  b2Vec2 result;
  
  arg1 = (b2DistanceJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  result = ((b2DistanceJoint const *)arg1)->GetReactionForce(arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2DistanceJoint_GetReactionTorque(void * jarg1, float jarg2) {
  float jresult ;
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ;
  float32 arg2 ;
  float32 result;
  
  arg1 = (b2DistanceJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  result = (float32)((b2DistanceJoint const *)arg1)->GetReactionTorque(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2DistanceJoint_GetLocalAnchorA(void * jarg1) {
  void * jresult ;
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2DistanceJoint *)jarg1; 
  result = (b2Vec2 *) &((b2DistanceJoint const *)arg1)->GetLocalAnchorA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2DistanceJoint_GetLocalAnchorB(void * jarg1) {
  void * jresult ;
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2DistanceJoint *)jarg1; 
  result = (b2Vec2 *) &((b2DistanceJoint const *)arg1)->GetLocalAnchorB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DistanceJoint_SetLength(void * jarg1, float jarg2) {
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2DistanceJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetLength(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2DistanceJoint_GetLength(void * jarg1) {
  float jresult ;
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ;
  float32 result;
  
  arg1 = (b2DistanceJoint *)jarg1; 
  result = (float32)((b2DistanceJoint const *)arg1)->GetLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DistanceJoint_SetFrequency(void * jarg1, float jarg2) {
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2DistanceJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetFrequency(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2DistanceJoint_GetFrequency(void * jarg1) {
  float jresult ;
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ;
  float32 result;
  
  arg1 = (b2DistanceJoint *)jarg1; 
  result = (float32)((b2DistanceJoint const *)arg1)->GetFrequency();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DistanceJoint_SetDampingRatio(void * jarg1, float jarg2) {
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2DistanceJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetDampingRatio(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2DistanceJoint_GetDampingRatio(void * jarg1) {
  float jresult ;
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ;
  float32 result;
  
  arg1 = (b2DistanceJoint *)jarg1; 
  result = (float32)((b2DistanceJoint const *)arg1)->GetDampingRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DistanceJoint_Dump(void * jarg1) {
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ;
  
  arg1 = (b2DistanceJoint *)jarg1; 
  (arg1)->Dump();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2DistanceJoint(void * jarg1) {
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ;
  
  arg1 = (b2DistanceJoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2FrictionJointDef() {
  void * jresult ;
  b2FrictionJointDef *result = 0 ;
  
  result = (b2FrictionJointDef *)new b2FrictionJointDef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2FrictionJointDef_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  b2FrictionJointDef *arg1 = (b2FrictionJointDef *) 0 ;
  b2Body *arg2 = (b2Body *) 0 ;
  b2Body *arg3 = (b2Body *) 0 ;
  b2Vec2 *arg4 = 0 ;
  
  arg1 = (b2FrictionJointDef *)jarg1; 
  arg2 = (b2Body *)jarg2; 
  arg3 = (b2Body *)jarg3; 
  arg4 = (b2Vec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  (arg1)->Initialize(arg2,arg3,(b2Vec2 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2FrictionJointDef_localAnchorA_set(void * jarg1, void * jarg2) {
  b2FrictionJointDef *arg1 = (b2FrictionJointDef *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2FrictionJointDef *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->localAnchorA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2FrictionJointDef_localAnchorA_get(void * jarg1) {
  void * jresult ;
  b2FrictionJointDef *arg1 = (b2FrictionJointDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2FrictionJointDef *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->localAnchorA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2FrictionJointDef_localAnchorB_set(void * jarg1, void * jarg2) {
  b2FrictionJointDef *arg1 = (b2FrictionJointDef *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2FrictionJointDef *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->localAnchorB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2FrictionJointDef_localAnchorB_get(void * jarg1) {
  void * jresult ;
  b2FrictionJointDef *arg1 = (b2FrictionJointDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2FrictionJointDef *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->localAnchorB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2FrictionJointDef_maxForce_set(void * jarg1, float jarg2) {
  b2FrictionJointDef *arg1 = (b2FrictionJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2FrictionJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->maxForce = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2FrictionJointDef_maxForce_get(void * jarg1) {
  float jresult ;
  b2FrictionJointDef *arg1 = (b2FrictionJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2FrictionJointDef *)jarg1; 
  result = (float32) ((arg1)->maxForce);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2FrictionJointDef_maxTorque_set(void * jarg1, float jarg2) {
  b2FrictionJointDef *arg1 = (b2FrictionJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2FrictionJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->maxTorque = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2FrictionJointDef_maxTorque_get(void * jarg1) {
  float jresult ;
  b2FrictionJointDef *arg1 = (b2FrictionJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2FrictionJointDef *)jarg1; 
  result = (float32) ((arg1)->maxTorque);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2FrictionJointDef(void * jarg1) {
  b2FrictionJointDef *arg1 = (b2FrictionJointDef *) 0 ;
  
  arg1 = (b2FrictionJointDef *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2FrictionJoint_GetAnchorA(void * jarg1) {
  void * jresult ;
  b2FrictionJoint *arg1 = (b2FrictionJoint *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2FrictionJoint *)jarg1; 
  result = ((b2FrictionJoint const *)arg1)->GetAnchorA();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2FrictionJoint_GetAnchorB(void * jarg1) {
  void * jresult ;
  b2FrictionJoint *arg1 = (b2FrictionJoint *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2FrictionJoint *)jarg1; 
  result = ((b2FrictionJoint const *)arg1)->GetAnchorB();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2FrictionJoint_GetReactionForce(void * jarg1, float jarg2) {
  void * jresult ;
  b2FrictionJoint *arg1 = (b2FrictionJoint *) 0 ;
  float32 arg2 ;
  b2Vec2 result;
  
  arg1 = (b2FrictionJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  result = ((b2FrictionJoint const *)arg1)->GetReactionForce(arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2FrictionJoint_GetReactionTorque(void * jarg1, float jarg2) {
  float jresult ;
  b2FrictionJoint *arg1 = (b2FrictionJoint *) 0 ;
  float32 arg2 ;
  float32 result;
  
  arg1 = (b2FrictionJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  result = (float32)((b2FrictionJoint const *)arg1)->GetReactionTorque(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2FrictionJoint_GetLocalAnchorA(void * jarg1) {
  void * jresult ;
  b2FrictionJoint *arg1 = (b2FrictionJoint *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2FrictionJoint *)jarg1; 
  result = (b2Vec2 *) &((b2FrictionJoint const *)arg1)->GetLocalAnchorA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2FrictionJoint_GetLocalAnchorB(void * jarg1) {
  void * jresult ;
  b2FrictionJoint *arg1 = (b2FrictionJoint *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2FrictionJoint *)jarg1; 
  result = (b2Vec2 *) &((b2FrictionJoint const *)arg1)->GetLocalAnchorB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2FrictionJoint_SetMaxForce(void * jarg1, float jarg2) {
  b2FrictionJoint *arg1 = (b2FrictionJoint *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2FrictionJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetMaxForce(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2FrictionJoint_GetMaxForce(void * jarg1) {
  float jresult ;
  b2FrictionJoint *arg1 = (b2FrictionJoint *) 0 ;
  float32 result;
  
  arg1 = (b2FrictionJoint *)jarg1; 
  result = (float32)((b2FrictionJoint const *)arg1)->GetMaxForce();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2FrictionJoint_SetMaxTorque(void * jarg1, float jarg2) {
  b2FrictionJoint *arg1 = (b2FrictionJoint *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2FrictionJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetMaxTorque(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2FrictionJoint_GetMaxTorque(void * jarg1) {
  float jresult ;
  b2FrictionJoint *arg1 = (b2FrictionJoint *) 0 ;
  float32 result;
  
  arg1 = (b2FrictionJoint *)jarg1; 
  result = (float32)((b2FrictionJoint const *)arg1)->GetMaxTorque();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2FrictionJoint_Dump(void * jarg1) {
  b2FrictionJoint *arg1 = (b2FrictionJoint *) 0 ;
  
  arg1 = (b2FrictionJoint *)jarg1; 
  (arg1)->Dump();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2FrictionJoint(void * jarg1) {
  b2FrictionJoint *arg1 = (b2FrictionJoint *) 0 ;
  
  arg1 = (b2FrictionJoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2GearJointDef() {
  void * jresult ;
  b2GearJointDef *result = 0 ;
  
  result = (b2GearJointDef *)new b2GearJointDef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2GearJointDef_joint1_set(void * jarg1, void * jarg2) {
  b2GearJointDef *arg1 = (b2GearJointDef *) 0 ;
  b2Joint *arg2 = (b2Joint *) 0 ;
  
  arg1 = (b2GearJointDef *)jarg1; 
  arg2 = (b2Joint *)jarg2; 
  if (arg1) (arg1)->joint1 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2GearJointDef_joint1_get(void * jarg1) {
  void * jresult ;
  b2GearJointDef *arg1 = (b2GearJointDef *) 0 ;
  b2Joint *result = 0 ;
  
  arg1 = (b2GearJointDef *)jarg1; 
  result = (b2Joint *) ((arg1)->joint1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2GearJointDef_joint2_set(void * jarg1, void * jarg2) {
  b2GearJointDef *arg1 = (b2GearJointDef *) 0 ;
  b2Joint *arg2 = (b2Joint *) 0 ;
  
  arg1 = (b2GearJointDef *)jarg1; 
  arg2 = (b2Joint *)jarg2; 
  if (arg1) (arg1)->joint2 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2GearJointDef_joint2_get(void * jarg1) {
  void * jresult ;
  b2GearJointDef *arg1 = (b2GearJointDef *) 0 ;
  b2Joint *result = 0 ;
  
  arg1 = (b2GearJointDef *)jarg1; 
  result = (b2Joint *) ((arg1)->joint2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2GearJointDef_ratio_set(void * jarg1, float jarg2) {
  b2GearJointDef *arg1 = (b2GearJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2GearJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->ratio = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2GearJointDef_ratio_get(void * jarg1) {
  float jresult ;
  b2GearJointDef *arg1 = (b2GearJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2GearJointDef *)jarg1; 
  result = (float32) ((arg1)->ratio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2GearJointDef(void * jarg1) {
  b2GearJointDef *arg1 = (b2GearJointDef *) 0 ;
  
  arg1 = (b2GearJointDef *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2GearJoint_GetAnchorA(void * jarg1) {
  void * jresult ;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2GearJoint *)jarg1; 
  result = ((b2GearJoint const *)arg1)->GetAnchorA();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2GearJoint_GetAnchorB(void * jarg1) {
  void * jresult ;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2GearJoint *)jarg1; 
  result = ((b2GearJoint const *)arg1)->GetAnchorB();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2GearJoint_GetReactionForce(void * jarg1, float jarg2) {
  void * jresult ;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ;
  float32 arg2 ;
  b2Vec2 result;
  
  arg1 = (b2GearJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  result = ((b2GearJoint const *)arg1)->GetReactionForce(arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2GearJoint_GetReactionTorque(void * jarg1, float jarg2) {
  float jresult ;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ;
  float32 arg2 ;
  float32 result;
  
  arg1 = (b2GearJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  result = (float32)((b2GearJoint const *)arg1)->GetReactionTorque(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2GearJoint_GetJoint1(void * jarg1) {
  void * jresult ;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ;
  b2Joint *result = 0 ;
  
  arg1 = (b2GearJoint *)jarg1; 
  result = (b2Joint *)(arg1)->GetJoint1();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2GearJoint_GetJoint2(void * jarg1) {
  void * jresult ;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ;
  b2Joint *result = 0 ;
  
  arg1 = (b2GearJoint *)jarg1; 
  result = (b2Joint *)(arg1)->GetJoint2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2GearJoint_SetRatio(void * jarg1, float jarg2) {
  b2GearJoint *arg1 = (b2GearJoint *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2GearJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetRatio(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2GearJoint_GetRatio(void * jarg1) {
  float jresult ;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ;
  float32 result;
  
  arg1 = (b2GearJoint *)jarg1; 
  result = (float32)((b2GearJoint const *)arg1)->GetRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2GearJoint_Dump(void * jarg1) {
  b2GearJoint *arg1 = (b2GearJoint *) 0 ;
  
  arg1 = (b2GearJoint *)jarg1; 
  (arg1)->Dump();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2GearJoint(void * jarg1) {
  b2GearJoint *arg1 = (b2GearJoint *) 0 ;
  
  arg1 = (b2GearJoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2WheelJointDef() {
  void * jresult ;
  b2WheelJointDef *result = 0 ;
  
  result = (b2WheelJointDef *)new b2WheelJointDef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2WheelJointDef_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ;
  b2Body *arg2 = (b2Body *) 0 ;
  b2Body *arg3 = (b2Body *) 0 ;
  b2Vec2 *arg4 = 0 ;
  b2Vec2 *arg5 = 0 ;
  
  arg1 = (b2WheelJointDef *)jarg1; 
  arg2 = (b2Body *)jarg2; 
  arg3 = (b2Body *)jarg3; 
  arg4 = (b2Vec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  arg5 = (b2Vec2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  (arg1)->Initialize(arg2,arg3,(b2Vec2 const &)*arg4,(b2Vec2 const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2WheelJointDef_localAnchorA_set(void * jarg1, void * jarg2) {
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2WheelJointDef *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->localAnchorA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2WheelJointDef_localAnchorA_get(void * jarg1) {
  void * jresult ;
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2WheelJointDef *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->localAnchorA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2WheelJointDef_localAnchorB_set(void * jarg1, void * jarg2) {
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2WheelJointDef *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->localAnchorB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2WheelJointDef_localAnchorB_get(void * jarg1) {
  void * jresult ;
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2WheelJointDef *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->localAnchorB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2WheelJointDef_localAxisA_set(void * jarg1, void * jarg2) {
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2WheelJointDef *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->localAxisA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2WheelJointDef_localAxisA_get(void * jarg1) {
  void * jresult ;
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2WheelJointDef *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->localAxisA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2WheelJointDef_enableMotor_set(void * jarg1, unsigned int jarg2) {
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ;
  bool arg2 ;
  
  arg1 = (b2WheelJointDef *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enableMotor = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2WheelJointDef_enableMotor_get(void * jarg1) {
  unsigned int jresult ;
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ;
  bool result;
  
  arg1 = (b2WheelJointDef *)jarg1; 
  result = (bool) ((arg1)->enableMotor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2WheelJointDef_maxMotorTorque_set(void * jarg1, float jarg2) {
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2WheelJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->maxMotorTorque = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2WheelJointDef_maxMotorTorque_get(void * jarg1) {
  float jresult ;
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2WheelJointDef *)jarg1; 
  result = (float32) ((arg1)->maxMotorTorque);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2WheelJointDef_motorSpeed_set(void * jarg1, float jarg2) {
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2WheelJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->motorSpeed = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2WheelJointDef_motorSpeed_get(void * jarg1) {
  float jresult ;
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2WheelJointDef *)jarg1; 
  result = (float32) ((arg1)->motorSpeed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2WheelJointDef_frequencyHz_set(void * jarg1, float jarg2) {
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2WheelJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->frequencyHz = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2WheelJointDef_frequencyHz_get(void * jarg1) {
  float jresult ;
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2WheelJointDef *)jarg1; 
  result = (float32) ((arg1)->frequencyHz);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2WheelJointDef_dampingRatio_set(void * jarg1, float jarg2) {
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2WheelJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->dampingRatio = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2WheelJointDef_dampingRatio_get(void * jarg1) {
  float jresult ;
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2WheelJointDef *)jarg1; 
  result = (float32) ((arg1)->dampingRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2WheelJointDef(void * jarg1) {
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ;
  
  arg1 = (b2WheelJointDef *)jarg1; 
  delete arg1;
}


//SWIGEXPORT void SWIGSTDCALL CSharp_b2WheelJoint_GetDefinition(void * jarg1, void * jarg2) {
//  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ;
//  b2WheelJointDef *arg2 = (b2WheelJointDef *) 0 ;
//  
//  arg1 = (b2WheelJoint *)jarg1; 
//  arg2 = (b2WheelJointDef *)jarg2; 
//  ((b2WheelJoint const *)arg1)->GetDefinition(arg2);
//}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2WheelJoint_GetAnchorA(void * jarg1) {
  void * jresult ;
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2WheelJoint *)jarg1; 
  result = ((b2WheelJoint const *)arg1)->GetAnchorA();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2WheelJoint_GetAnchorB(void * jarg1) {
  void * jresult ;
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2WheelJoint *)jarg1; 
  result = ((b2WheelJoint const *)arg1)->GetAnchorB();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2WheelJoint_GetReactionForce(void * jarg1, float jarg2) {
  void * jresult ;
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ;
  float32 arg2 ;
  b2Vec2 result;
  
  arg1 = (b2WheelJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  result = ((b2WheelJoint const *)arg1)->GetReactionForce(arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2WheelJoint_GetReactionTorque(void * jarg1, float jarg2) {
  float jresult ;
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ;
  float32 arg2 ;
  float32 result;
  
  arg1 = (b2WheelJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  result = (float32)((b2WheelJoint const *)arg1)->GetReactionTorque(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2WheelJoint_GetLocalAnchorA(void * jarg1) {
  void * jresult ;
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2WheelJoint *)jarg1; 
  result = (b2Vec2 *) &((b2WheelJoint const *)arg1)->GetLocalAnchorA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2WheelJoint_GetLocalAnchorB(void * jarg1) {
  void * jresult ;
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2WheelJoint *)jarg1; 
  result = (b2Vec2 *) &((b2WheelJoint const *)arg1)->GetLocalAnchorB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2WheelJoint_GetLocalAxisA(void * jarg1) {
  void * jresult ;
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2WheelJoint *)jarg1; 
  result = (b2Vec2 *) &((b2WheelJoint const *)arg1)->GetLocalAxisA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2WheelJoint_GetJointTranslation(void * jarg1) {
  float jresult ;
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ;
  float32 result;
  
  arg1 = (b2WheelJoint *)jarg1; 
  result = (float32)((b2WheelJoint const *)arg1)->GetJointTranslation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2WheelJoint_GetJointSpeed(void * jarg1) {
  float jresult ;
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ;
  float32 result;
  
  arg1 = (b2WheelJoint *)jarg1; 
  result = (float32)((b2WheelJoint const *)arg1)->GetJointSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2WheelJoint_IsMotorEnabled(void * jarg1) {
  unsigned int jresult ;
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ;
  bool result;
  
  arg1 = (b2WheelJoint *)jarg1; 
  result = (bool)((b2WheelJoint const *)arg1)->IsMotorEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2WheelJoint_EnableMotor(void * jarg1, unsigned int jarg2) {
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ;
  bool arg2 ;
  
  arg1 = (b2WheelJoint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->EnableMotor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2WheelJoint_SetMotorSpeed(void * jarg1, float jarg2) {
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2WheelJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetMotorSpeed(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2WheelJoint_GetMotorSpeed(void * jarg1) {
  float jresult ;
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ;
  float32 result;
  
  arg1 = (b2WheelJoint *)jarg1; 
  result = (float32)((b2WheelJoint const *)arg1)->GetMotorSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2WheelJoint_SetMaxMotorTorque(void * jarg1, float jarg2) {
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2WheelJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetMaxMotorTorque(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2WheelJoint_GetMaxMotorTorque(void * jarg1) {
  float jresult ;
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ;
  float32 result;
  
  arg1 = (b2WheelJoint *)jarg1; 
  result = (float32)((b2WheelJoint const *)arg1)->GetMaxMotorTorque();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2WheelJoint_GetMotorTorque(void * jarg1, float jarg2) {
  float jresult ;
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ;
  float32 arg2 ;
  float32 result;
  
  arg1 = (b2WheelJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  result = (float32)((b2WheelJoint const *)arg1)->GetMotorTorque(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2WheelJoint_SetSpringFrequencyHz(void * jarg1, float jarg2) {
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2WheelJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetSpringFrequencyHz(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2WheelJoint_GetSpringFrequencyHz(void * jarg1) {
  float jresult ;
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ;
  float32 result;
  
  arg1 = (b2WheelJoint *)jarg1; 
  result = (float32)((b2WheelJoint const *)arg1)->GetSpringFrequencyHz();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2WheelJoint_SetSpringDampingRatio(void * jarg1, float jarg2) {
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2WheelJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetSpringDampingRatio(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2WheelJoint_GetSpringDampingRatio(void * jarg1) {
  float jresult ;
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ;
  float32 result;
  
  arg1 = (b2WheelJoint *)jarg1; 
  result = (float32)((b2WheelJoint const *)arg1)->GetSpringDampingRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2WheelJoint_Dump(void * jarg1) {
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ;
  
  arg1 = (b2WheelJoint *)jarg1; 
  (arg1)->Dump();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2WheelJoint(void * jarg1) {
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ;
  
  arg1 = (b2WheelJoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2MouseJointDef() {
  void * jresult ;
  b2MouseJointDef *result = 0 ;
  
  result = (b2MouseJointDef *)new b2MouseJointDef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2MouseJointDef_target_set(void * jarg1, void * jarg2) {
  b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2MouseJointDef *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->target = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2MouseJointDef_target_get(void * jarg1) {
  void * jresult ;
  b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2MouseJointDef *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->target);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2MouseJointDef_maxForce_set(void * jarg1, float jarg2) {
  b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2MouseJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->maxForce = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2MouseJointDef_maxForce_get(void * jarg1) {
  float jresult ;
  b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2MouseJointDef *)jarg1; 
  result = (float32) ((arg1)->maxForce);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2MouseJointDef_frequencyHz_set(void * jarg1, float jarg2) {
  b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2MouseJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->frequencyHz = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2MouseJointDef_frequencyHz_get(void * jarg1) {
  float jresult ;
  b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2MouseJointDef *)jarg1; 
  result = (float32) ((arg1)->frequencyHz);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2MouseJointDef_dampingRatio_set(void * jarg1, float jarg2) {
  b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2MouseJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->dampingRatio = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2MouseJointDef_dampingRatio_get(void * jarg1) {
  float jresult ;
  b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2MouseJointDef *)jarg1; 
  result = (float32) ((arg1)->dampingRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2MouseJointDef(void * jarg1) {
  b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ;
  
  arg1 = (b2MouseJointDef *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2MouseJoint_GetAnchorA(void * jarg1) {
  void * jresult ;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2MouseJoint *)jarg1; 
  result = ((b2MouseJoint const *)arg1)->GetAnchorA();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2MouseJoint_GetAnchorB(void * jarg1) {
  void * jresult ;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2MouseJoint *)jarg1; 
  result = ((b2MouseJoint const *)arg1)->GetAnchorB();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2MouseJoint_GetReactionForce(void * jarg1, float jarg2) {
  void * jresult ;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ;
  float32 arg2 ;
  b2Vec2 result;
  
  arg1 = (b2MouseJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  result = ((b2MouseJoint const *)arg1)->GetReactionForce(arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2MouseJoint_GetReactionTorque(void * jarg1, float jarg2) {
  float jresult ;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ;
  float32 arg2 ;
  float32 result;
  
  arg1 = (b2MouseJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  result = (float32)((b2MouseJoint const *)arg1)->GetReactionTorque(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2MouseJoint_SetTarget(void * jarg1, void * jarg2) {
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ;
  b2Vec2 *arg2 = 0 ;
  
  arg1 = (b2MouseJoint *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  (arg1)->SetTarget((b2Vec2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2MouseJoint_GetTarget(void * jarg1) {
  void * jresult ;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2MouseJoint *)jarg1; 
  result = (b2Vec2 *) &((b2MouseJoint const *)arg1)->GetTarget();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2MouseJoint_SetMaxForce(void * jarg1, float jarg2) {
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2MouseJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetMaxForce(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2MouseJoint_GetMaxForce(void * jarg1) {
  float jresult ;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ;
  float32 result;
  
  arg1 = (b2MouseJoint *)jarg1; 
  result = (float32)((b2MouseJoint const *)arg1)->GetMaxForce();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2MouseJoint_SetFrequency(void * jarg1, float jarg2) {
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2MouseJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetFrequency(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2MouseJoint_GetFrequency(void * jarg1) {
  float jresult ;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ;
  float32 result;
  
  arg1 = (b2MouseJoint *)jarg1; 
  result = (float32)((b2MouseJoint const *)arg1)->GetFrequency();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2MouseJoint_SetDampingRatio(void * jarg1, float jarg2) {
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2MouseJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetDampingRatio(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2MouseJoint_GetDampingRatio(void * jarg1) {
  float jresult ;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ;
  float32 result;
  
  arg1 = (b2MouseJoint *)jarg1; 
  result = (float32)((b2MouseJoint const *)arg1)->GetDampingRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2MouseJoint_Dump(void * jarg1) {
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ;
  
  arg1 = (b2MouseJoint *)jarg1; 
  (arg1)->Dump();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2MouseJoint(void * jarg1) {
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ;
  
  arg1 = (b2MouseJoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2PrismaticJointDef() {
  void * jresult ;
  b2PrismaticJointDef *result = 0 ;
  
  result = (b2PrismaticJointDef *)new b2PrismaticJointDef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PrismaticJointDef_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ;
  b2Body *arg2 = (b2Body *) 0 ;
  b2Body *arg3 = (b2Body *) 0 ;
  b2Vec2 *arg4 = 0 ;
  b2Vec2 *arg5 = 0 ;
  
  arg1 = (b2PrismaticJointDef *)jarg1; 
  arg2 = (b2Body *)jarg2; 
  arg3 = (b2Body *)jarg3; 
  arg4 = (b2Vec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  arg5 = (b2Vec2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  (arg1)->Initialize(arg2,arg3,(b2Vec2 const &)*arg4,(b2Vec2 const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PrismaticJointDef_localAnchorA_set(void * jarg1, void * jarg2) {
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2PrismaticJointDef *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->localAnchorA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2PrismaticJointDef_localAnchorA_get(void * jarg1) {
  void * jresult ;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2PrismaticJointDef *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->localAnchorA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PrismaticJointDef_localAnchorB_set(void * jarg1, void * jarg2) {
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2PrismaticJointDef *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->localAnchorB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2PrismaticJointDef_localAnchorB_get(void * jarg1) {
  void * jresult ;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2PrismaticJointDef *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->localAnchorB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PrismaticJointDef_localAxisA_set(void * jarg1, void * jarg2) {
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2PrismaticJointDef *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->localAxisA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2PrismaticJointDef_localAxisA_get(void * jarg1) {
  void * jresult ;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2PrismaticJointDef *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->localAxisA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PrismaticJointDef_referenceAngle_set(void * jarg1, float jarg2) {
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2PrismaticJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->referenceAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2PrismaticJointDef_referenceAngle_get(void * jarg1) {
  float jresult ;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2PrismaticJointDef *)jarg1; 
  result = (float32) ((arg1)->referenceAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PrismaticJointDef_enableLimit_set(void * jarg1, unsigned int jarg2) {
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ;
  bool arg2 ;
  
  arg1 = (b2PrismaticJointDef *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enableLimit = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2PrismaticJointDef_enableLimit_get(void * jarg1) {
  unsigned int jresult ;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ;
  bool result;
  
  arg1 = (b2PrismaticJointDef *)jarg1; 
  result = (bool) ((arg1)->enableLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PrismaticJointDef_lowerTranslation_set(void * jarg1, float jarg2) {
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2PrismaticJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->lowerTranslation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2PrismaticJointDef_lowerTranslation_get(void * jarg1) {
  float jresult ;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2PrismaticJointDef *)jarg1; 
  result = (float32) ((arg1)->lowerTranslation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PrismaticJointDef_upperTranslation_set(void * jarg1, float jarg2) {
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2PrismaticJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->upperTranslation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2PrismaticJointDef_upperTranslation_get(void * jarg1) {
  float jresult ;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2PrismaticJointDef *)jarg1; 
  result = (float32) ((arg1)->upperTranslation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PrismaticJointDef_enableMotor_set(void * jarg1, unsigned int jarg2) {
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ;
  bool arg2 ;
  
  arg1 = (b2PrismaticJointDef *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enableMotor = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2PrismaticJointDef_enableMotor_get(void * jarg1) {
  unsigned int jresult ;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ;
  bool result;
  
  arg1 = (b2PrismaticJointDef *)jarg1; 
  result = (bool) ((arg1)->enableMotor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PrismaticJointDef_maxMotorForce_set(void * jarg1, float jarg2) {
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2PrismaticJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->maxMotorForce = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2PrismaticJointDef_maxMotorForce_get(void * jarg1) {
  float jresult ;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2PrismaticJointDef *)jarg1; 
  result = (float32) ((arg1)->maxMotorForce);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PrismaticJointDef_motorSpeed_set(void * jarg1, float jarg2) {
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2PrismaticJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->motorSpeed = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2PrismaticJointDef_motorSpeed_get(void * jarg1) {
  float jresult ;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2PrismaticJointDef *)jarg1; 
  result = (float32) ((arg1)->motorSpeed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2PrismaticJointDef(void * jarg1) {
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ;
  
  arg1 = (b2PrismaticJointDef *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2PrismaticJoint_GetAnchorA(void * jarg1) {
  void * jresult ;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2PrismaticJoint *)jarg1; 
  result = ((b2PrismaticJoint const *)arg1)->GetAnchorA();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2PrismaticJoint_GetAnchorB(void * jarg1) {
  void * jresult ;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2PrismaticJoint *)jarg1; 
  result = ((b2PrismaticJoint const *)arg1)->GetAnchorB();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2PrismaticJoint_GetReactionForce(void * jarg1, float jarg2) {
  void * jresult ;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ;
  float32 arg2 ;
  b2Vec2 result;
  
  arg1 = (b2PrismaticJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  result = ((b2PrismaticJoint const *)arg1)->GetReactionForce(arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2PrismaticJoint_GetReactionTorque(void * jarg1, float jarg2) {
  float jresult ;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ;
  float32 arg2 ;
  float32 result;
  
  arg1 = (b2PrismaticJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  result = (float32)((b2PrismaticJoint const *)arg1)->GetReactionTorque(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2PrismaticJoint_GetLocalAnchorA(void * jarg1) {
  void * jresult ;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2PrismaticJoint *)jarg1; 
  result = (b2Vec2 *) &((b2PrismaticJoint const *)arg1)->GetLocalAnchorA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2PrismaticJoint_GetLocalAnchorB(void * jarg1) {
  void * jresult ;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2PrismaticJoint *)jarg1; 
  result = (b2Vec2 *) &((b2PrismaticJoint const *)arg1)->GetLocalAnchorB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2PrismaticJoint_GetLocalAxisA(void * jarg1) {
  void * jresult ;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2PrismaticJoint *)jarg1; 
  result = (b2Vec2 *) &((b2PrismaticJoint const *)arg1)->GetLocalAxisA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2PrismaticJoint_GetReferenceAngle(void * jarg1) {
  float jresult ;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ;
  float32 result;
  
  arg1 = (b2PrismaticJoint *)jarg1; 
  result = (float32)((b2PrismaticJoint const *)arg1)->GetReferenceAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2PrismaticJoint_GetJointTranslation(void * jarg1) {
  float jresult ;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ;
  float32 result;
  
  arg1 = (b2PrismaticJoint *)jarg1; 
  result = (float32)((b2PrismaticJoint const *)arg1)->GetJointTranslation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2PrismaticJoint_GetJointSpeed(void * jarg1) {
  float jresult ;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ;
  float32 result;
  
  arg1 = (b2PrismaticJoint *)jarg1; 
  result = (float32)((b2PrismaticJoint const *)arg1)->GetJointSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2PrismaticJoint_IsLimitEnabled(void * jarg1) {
  unsigned int jresult ;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ;
  bool result;
  
  arg1 = (b2PrismaticJoint *)jarg1; 
  result = (bool)((b2PrismaticJoint const *)arg1)->IsLimitEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PrismaticJoint_EnableLimit(void * jarg1, unsigned int jarg2) {
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ;
  bool arg2 ;
  
  arg1 = (b2PrismaticJoint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->EnableLimit(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2PrismaticJoint_GetLowerLimit(void * jarg1) {
  float jresult ;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ;
  float32 result;
  
  arg1 = (b2PrismaticJoint *)jarg1; 
  result = (float32)((b2PrismaticJoint const *)arg1)->GetLowerLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2PrismaticJoint_GetUpperLimit(void * jarg1) {
  float jresult ;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ;
  float32 result;
  
  arg1 = (b2PrismaticJoint *)jarg1; 
  result = (float32)((b2PrismaticJoint const *)arg1)->GetUpperLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PrismaticJoint_SetLimits(void * jarg1, float jarg2, float jarg3) {
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  
  arg1 = (b2PrismaticJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (float32)jarg3; 
  (arg1)->SetLimits(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2PrismaticJoint_IsMotorEnabled(void * jarg1) {
  unsigned int jresult ;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ;
  bool result;
  
  arg1 = (b2PrismaticJoint *)jarg1; 
  result = (bool)((b2PrismaticJoint const *)arg1)->IsMotorEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PrismaticJoint_EnableMotor(void * jarg1, unsigned int jarg2) {
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ;
  bool arg2 ;
  
  arg1 = (b2PrismaticJoint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->EnableMotor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PrismaticJoint_SetMotorSpeed(void * jarg1, float jarg2) {
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2PrismaticJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetMotorSpeed(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2PrismaticJoint_GetMotorSpeed(void * jarg1) {
  float jresult ;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ;
  float32 result;
  
  arg1 = (b2PrismaticJoint *)jarg1; 
  result = (float32)((b2PrismaticJoint const *)arg1)->GetMotorSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PrismaticJoint_SetMaxMotorForce(void * jarg1, float jarg2) {
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2PrismaticJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetMaxMotorForce(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2PrismaticJoint_GetMaxMotorForce(void * jarg1) {
  float jresult ;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ;
  float32 result;
  
  arg1 = (b2PrismaticJoint *)jarg1; 
  result = (float32)((b2PrismaticJoint const *)arg1)->GetMaxMotorForce();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2PrismaticJoint_GetMotorForce(void * jarg1, float jarg2) {
  float jresult ;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ;
  float32 arg2 ;
  float32 result;
  
  arg1 = (b2PrismaticJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  result = (float32)((b2PrismaticJoint const *)arg1)->GetMotorForce(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PrismaticJoint_Dump(void * jarg1) {
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ;
  
  arg1 = (b2PrismaticJoint *)jarg1; 
  (arg1)->Dump();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2PrismaticJoint(void * jarg1) {
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ;
  
  arg1 = (b2PrismaticJoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2_minPulleyLength_get() {
  float jresult ;
  float32 result;
  
  result = (float32)(float32)b2_minPulleyLength;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2PulleyJointDef() {
  void * jresult ;
  b2PulleyJointDef *result = 0 ;
  
  result = (b2PulleyJointDef *)new b2PulleyJointDef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PulleyJointDef_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, float jarg8) {
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ;
  b2Body *arg2 = (b2Body *) 0 ;
  b2Body *arg3 = (b2Body *) 0 ;
  b2Vec2 *arg4 = 0 ;
  b2Vec2 *arg5 = 0 ;
  b2Vec2 *arg6 = 0 ;
  b2Vec2 *arg7 = 0 ;
  float32 arg8 ;
  
  arg1 = (b2PulleyJointDef *)jarg1; 
  arg2 = (b2Body *)jarg2; 
  arg3 = (b2Body *)jarg3; 
  arg4 = (b2Vec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  arg5 = (b2Vec2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  arg6 = (b2Vec2 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  arg7 = (b2Vec2 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  arg8 = (float32)jarg8; 
  (arg1)->Initialize(arg2,arg3,(b2Vec2 const &)*arg4,(b2Vec2 const &)*arg5,(b2Vec2 const &)*arg6,(b2Vec2 const &)*arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PulleyJointDef_groundAnchorA_set(void * jarg1, void * jarg2) {
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2PulleyJointDef *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->groundAnchorA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2PulleyJointDef_groundAnchorA_get(void * jarg1) {
  void * jresult ;
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2PulleyJointDef *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->groundAnchorA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PulleyJointDef_groundAnchorB_set(void * jarg1, void * jarg2) {
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2PulleyJointDef *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->groundAnchorB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2PulleyJointDef_groundAnchorB_get(void * jarg1) {
  void * jresult ;
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2PulleyJointDef *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->groundAnchorB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PulleyJointDef_localAnchorA_set(void * jarg1, void * jarg2) {
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2PulleyJointDef *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->localAnchorA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2PulleyJointDef_localAnchorA_get(void * jarg1) {
  void * jresult ;
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2PulleyJointDef *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->localAnchorA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PulleyJointDef_localAnchorB_set(void * jarg1, void * jarg2) {
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2PulleyJointDef *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->localAnchorB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2PulleyJointDef_localAnchorB_get(void * jarg1) {
  void * jresult ;
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2PulleyJointDef *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->localAnchorB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PulleyJointDef_lengthA_set(void * jarg1, float jarg2) {
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2PulleyJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->lengthA = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2PulleyJointDef_lengthA_get(void * jarg1) {
  float jresult ;
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2PulleyJointDef *)jarg1; 
  result = (float32) ((arg1)->lengthA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PulleyJointDef_lengthB_set(void * jarg1, float jarg2) {
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2PulleyJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->lengthB = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2PulleyJointDef_lengthB_get(void * jarg1) {
  float jresult ;
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2PulleyJointDef *)jarg1; 
  result = (float32) ((arg1)->lengthB);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PulleyJointDef_ratio_set(void * jarg1, float jarg2) {
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2PulleyJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->ratio = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2PulleyJointDef_ratio_get(void * jarg1) {
  float jresult ;
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2PulleyJointDef *)jarg1; 
  result = (float32) ((arg1)->ratio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2PulleyJointDef(void * jarg1) {
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ;
  
  arg1 = (b2PulleyJointDef *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2PulleyJoint_GetAnchorA(void * jarg1) {
  void * jresult ;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2PulleyJoint *)jarg1; 
  result = ((b2PulleyJoint const *)arg1)->GetAnchorA();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2PulleyJoint_GetAnchorB(void * jarg1) {
  void * jresult ;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2PulleyJoint *)jarg1; 
  result = ((b2PulleyJoint const *)arg1)->GetAnchorB();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2PulleyJoint_GetReactionForce(void * jarg1, float jarg2) {
  void * jresult ;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ;
  float32 arg2 ;
  b2Vec2 result;
  
  arg1 = (b2PulleyJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  result = ((b2PulleyJoint const *)arg1)->GetReactionForce(arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2PulleyJoint_GetReactionTorque(void * jarg1, float jarg2) {
  float jresult ;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ;
  float32 arg2 ;
  float32 result;
  
  arg1 = (b2PulleyJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  result = (float32)((b2PulleyJoint const *)arg1)->GetReactionTorque(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2PulleyJoint_GetGroundAnchorA(void * jarg1) {
  void * jresult ;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2PulleyJoint *)jarg1; 
  result = ((b2PulleyJoint const *)arg1)->GetGroundAnchorA();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2PulleyJoint_GetGroundAnchorB(void * jarg1) {
  void * jresult ;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2PulleyJoint *)jarg1; 
  result = ((b2PulleyJoint const *)arg1)->GetGroundAnchorB();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2PulleyJoint_GetLengthA(void * jarg1) {
  float jresult ;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ;
  float32 result;
  
  arg1 = (b2PulleyJoint *)jarg1; 
  result = (float32)((b2PulleyJoint const *)arg1)->GetLengthA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2PulleyJoint_GetLengthB(void * jarg1) {
  float jresult ;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ;
  float32 result;
  
  arg1 = (b2PulleyJoint *)jarg1; 
  result = (float32)((b2PulleyJoint const *)arg1)->GetLengthB();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2PulleyJoint_GetRatio(void * jarg1) {
  float jresult ;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ;
  float32 result;
  
  arg1 = (b2PulleyJoint *)jarg1; 
  result = (float32)((b2PulleyJoint const *)arg1)->GetRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2PulleyJoint_Dump(void * jarg1) {
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ;
  
  arg1 = (b2PulleyJoint *)jarg1; 
  (arg1)->Dump();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2PulleyJoint(void * jarg1) {
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ;
  
  arg1 = (b2PulleyJoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2RevoluteJointDef() {
  void * jresult ;
  b2RevoluteJointDef *result = 0 ;
  
  result = (b2RevoluteJointDef *)new b2RevoluteJointDef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2RevoluteJointDef_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  b2Body *arg2 = (b2Body *) 0 ;
  b2Body *arg3 = (b2Body *) 0 ;
  b2Vec2 *arg4 = 0 ;
  
  arg1 = (b2RevoluteJointDef *)jarg1; 
  arg2 = (b2Body *)jarg2; 
  arg3 = (b2Body *)jarg3; 
  arg4 = (b2Vec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  (arg1)->Initialize(arg2,arg3,(b2Vec2 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2RevoluteJointDef_localAnchorA_set(void * jarg1, void * jarg2) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2RevoluteJointDef *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->localAnchorA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2RevoluteJointDef_localAnchorA_get(void * jarg1) {
  void * jresult ;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2RevoluteJointDef *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->localAnchorA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2RevoluteJointDef_localAnchorB_set(void * jarg1, void * jarg2) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2RevoluteJointDef *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->localAnchorB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2RevoluteJointDef_localAnchorB_get(void * jarg1) {
  void * jresult ;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2RevoluteJointDef *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->localAnchorB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2RevoluteJointDef_referenceAngle_set(void * jarg1, float jarg2) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2RevoluteJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->referenceAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2RevoluteJointDef_referenceAngle_get(void * jarg1) {
  float jresult ;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2RevoluteJointDef *)jarg1; 
  result = (float32) ((arg1)->referenceAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2RevoluteJointDef_enableLimit_set(void * jarg1, unsigned int jarg2) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  bool arg2 ;
  
  arg1 = (b2RevoluteJointDef *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enableLimit = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2RevoluteJointDef_enableLimit_get(void * jarg1) {
  unsigned int jresult ;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  bool result;
  
  arg1 = (b2RevoluteJointDef *)jarg1; 
  result = (bool) ((arg1)->enableLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2RevoluteJointDef_lowerAngle_set(void * jarg1, float jarg2) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2RevoluteJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->lowerAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2RevoluteJointDef_lowerAngle_get(void * jarg1) {
  float jresult ;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2RevoluteJointDef *)jarg1; 
  result = (float32) ((arg1)->lowerAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2RevoluteJointDef_upperAngle_set(void * jarg1, float jarg2) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2RevoluteJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->upperAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2RevoluteJointDef_upperAngle_get(void * jarg1) {
  float jresult ;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2RevoluteJointDef *)jarg1; 
  result = (float32) ((arg1)->upperAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2RevoluteJointDef_enableMotor_set(void * jarg1, unsigned int jarg2) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  bool arg2 ;
  
  arg1 = (b2RevoluteJointDef *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enableMotor = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2RevoluteJointDef_enableMotor_get(void * jarg1) {
  unsigned int jresult ;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  bool result;
  
  arg1 = (b2RevoluteJointDef *)jarg1; 
  result = (bool) ((arg1)->enableMotor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2RevoluteJointDef_motorSpeed_set(void * jarg1, float jarg2) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2RevoluteJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->motorSpeed = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2RevoluteJointDef_motorSpeed_get(void * jarg1) {
  float jresult ;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2RevoluteJointDef *)jarg1; 
  result = (float32) ((arg1)->motorSpeed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2RevoluteJointDef_maxMotorTorque_set(void * jarg1, float jarg2) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2RevoluteJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->maxMotorTorque = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2RevoluteJointDef_maxMotorTorque_get(void * jarg1) {
  float jresult ;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2RevoluteJointDef *)jarg1; 
  result = (float32) ((arg1)->maxMotorTorque);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2RevoluteJointDef(void * jarg1) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  
  arg1 = (b2RevoluteJointDef *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2RevoluteJoint_GetAnchorA(void * jarg1) {
  void * jresult ;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2RevoluteJoint *)jarg1; 
  result = ((b2RevoluteJoint const *)arg1)->GetAnchorA();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2RevoluteJoint_GetAnchorB(void * jarg1) {
  void * jresult ;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2RevoluteJoint *)jarg1; 
  result = ((b2RevoluteJoint const *)arg1)->GetAnchorB();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2RevoluteJoint_GetLocalAnchorA(void * jarg1) {
  void * jresult ;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2RevoluteJoint *)jarg1; 
  result = (b2Vec2 *) &((b2RevoluteJoint const *)arg1)->GetLocalAnchorA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2RevoluteJoint_GetLocalAnchorB(void * jarg1) {
  void * jresult ;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2RevoluteJoint *)jarg1; 
  result = (b2Vec2 *) &((b2RevoluteJoint const *)arg1)->GetLocalAnchorB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2RevoluteJoint_GetReferenceAngle(void * jarg1) {
  float jresult ;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  float32 result;
  
  arg1 = (b2RevoluteJoint *)jarg1; 
  result = (float32)((b2RevoluteJoint const *)arg1)->GetReferenceAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2RevoluteJoint_GetJointAngle(void * jarg1) {
  float jresult ;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  float32 result;
  
  arg1 = (b2RevoluteJoint *)jarg1; 
  result = (float32)((b2RevoluteJoint const *)arg1)->GetJointAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2RevoluteJoint_GetJointSpeed(void * jarg1) {
  float jresult ;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  float32 result;
  
  arg1 = (b2RevoluteJoint *)jarg1; 
  result = (float32)((b2RevoluteJoint const *)arg1)->GetJointSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2RevoluteJoint_IsLimitEnabled(void * jarg1) {
  unsigned int jresult ;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  bool result;
  
  arg1 = (b2RevoluteJoint *)jarg1; 
  result = (bool)((b2RevoluteJoint const *)arg1)->IsLimitEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2RevoluteJoint_EnableLimit(void * jarg1, unsigned int jarg2) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  bool arg2 ;
  
  arg1 = (b2RevoluteJoint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->EnableLimit(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2RevoluteJoint_GetLowerLimit(void * jarg1) {
  float jresult ;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  float32 result;
  
  arg1 = (b2RevoluteJoint *)jarg1; 
  result = (float32)((b2RevoluteJoint const *)arg1)->GetLowerLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2RevoluteJoint_GetUpperLimit(void * jarg1) {
  float jresult ;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  float32 result;
  
  arg1 = (b2RevoluteJoint *)jarg1; 
  result = (float32)((b2RevoluteJoint const *)arg1)->GetUpperLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2RevoluteJoint_SetLimits(void * jarg1, float jarg2, float jarg3) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  
  arg1 = (b2RevoluteJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (float32)jarg3; 
  (arg1)->SetLimits(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2RevoluteJoint_IsMotorEnabled(void * jarg1) {
  unsigned int jresult ;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  bool result;
  
  arg1 = (b2RevoluteJoint *)jarg1; 
  result = (bool)((b2RevoluteJoint const *)arg1)->IsMotorEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2RevoluteJoint_EnableMotor(void * jarg1, unsigned int jarg2) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  bool arg2 ;
  
  arg1 = (b2RevoluteJoint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->EnableMotor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2RevoluteJoint_SetMotorSpeed(void * jarg1, float jarg2) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2RevoluteJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetMotorSpeed(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2RevoluteJoint_GetMotorSpeed(void * jarg1) {
  float jresult ;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  float32 result;
  
  arg1 = (b2RevoluteJoint *)jarg1; 
  result = (float32)((b2RevoluteJoint const *)arg1)->GetMotorSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2RevoluteJoint_SetMaxMotorTorque(void * jarg1, float jarg2) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2RevoluteJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetMaxMotorTorque(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2RevoluteJoint_GetMaxMotorTorque(void * jarg1) {
  float jresult ;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  float32 result;
  
  arg1 = (b2RevoluteJoint *)jarg1; 
  result = (float32)((b2RevoluteJoint const *)arg1)->GetMaxMotorTorque();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2RevoluteJoint_GetReactionForce(void * jarg1, float jarg2) {
  void * jresult ;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  float32 arg2 ;
  b2Vec2 result;
  
  arg1 = (b2RevoluteJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  result = ((b2RevoluteJoint const *)arg1)->GetReactionForce(arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2RevoluteJoint_GetReactionTorque(void * jarg1, float jarg2) {
  float jresult ;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  float32 arg2 ;
  float32 result;
  
  arg1 = (b2RevoluteJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  result = (float32)((b2RevoluteJoint const *)arg1)->GetReactionTorque(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2RevoluteJoint_GetMotorTorque(void * jarg1, float jarg2) {
  float jresult ;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  float32 arg2 ;
  float32 result;
  
  arg1 = (b2RevoluteJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  result = (float32)((b2RevoluteJoint const *)arg1)->GetMotorTorque(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2RevoluteJoint_Dump(void * jarg1) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  
  arg1 = (b2RevoluteJoint *)jarg1; 
  (arg1)->Dump();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2RevoluteJoint(void * jarg1) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  
  arg1 = (b2RevoluteJoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2RopeJointDef() {
  void * jresult ;
  b2RopeJointDef *result = 0 ;
  
  result = (b2RopeJointDef *)new b2RopeJointDef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2RopeJointDef_localAnchorA_set(void * jarg1, void * jarg2) {
  b2RopeJointDef *arg1 = (b2RopeJointDef *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2RopeJointDef *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->localAnchorA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2RopeJointDef_localAnchorA_get(void * jarg1) {
  void * jresult ;
  b2RopeJointDef *arg1 = (b2RopeJointDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2RopeJointDef *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->localAnchorA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2RopeJointDef_localAnchorB_set(void * jarg1, void * jarg2) {
  b2RopeJointDef *arg1 = (b2RopeJointDef *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2RopeJointDef *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->localAnchorB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2RopeJointDef_localAnchorB_get(void * jarg1) {
  void * jresult ;
  b2RopeJointDef *arg1 = (b2RopeJointDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2RopeJointDef *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->localAnchorB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2RopeJointDef_maxLength_set(void * jarg1, float jarg2) {
  b2RopeJointDef *arg1 = (b2RopeJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2RopeJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->maxLength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2RopeJointDef_maxLength_get(void * jarg1) {
  float jresult ;
  b2RopeJointDef *arg1 = (b2RopeJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2RopeJointDef *)jarg1; 
  result = (float32) ((arg1)->maxLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2RopeJointDef(void * jarg1) {
  b2RopeJointDef *arg1 = (b2RopeJointDef *) 0 ;
  
  arg1 = (b2RopeJointDef *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2RopeJoint_GetAnchorA(void * jarg1) {
  void * jresult ;
  b2RopeJoint *arg1 = (b2RopeJoint *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2RopeJoint *)jarg1; 
  result = ((b2RopeJoint const *)arg1)->GetAnchorA();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2RopeJoint_GetAnchorB(void * jarg1) {
  void * jresult ;
  b2RopeJoint *arg1 = (b2RopeJoint *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2RopeJoint *)jarg1; 
  result = ((b2RopeJoint const *)arg1)->GetAnchorB();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2RopeJoint_GetReactionForce(void * jarg1, float jarg2) {
  void * jresult ;
  b2RopeJoint *arg1 = (b2RopeJoint *) 0 ;
  float32 arg2 ;
  b2Vec2 result;
  
  arg1 = (b2RopeJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  result = ((b2RopeJoint const *)arg1)->GetReactionForce(arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2RopeJoint_GetReactionTorque(void * jarg1, float jarg2) {
  float jresult ;
  b2RopeJoint *arg1 = (b2RopeJoint *) 0 ;
  float32 arg2 ;
  float32 result;
  
  arg1 = (b2RopeJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  result = (float32)((b2RopeJoint const *)arg1)->GetReactionTorque(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2RopeJoint_GetLocalAnchorA(void * jarg1) {
  void * jresult ;
  b2RopeJoint *arg1 = (b2RopeJoint *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2RopeJoint *)jarg1; 
  result = (b2Vec2 *) &((b2RopeJoint const *)arg1)->GetLocalAnchorA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2RopeJoint_GetLocalAnchorB(void * jarg1) {
  void * jresult ;
  b2RopeJoint *arg1 = (b2RopeJoint *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2RopeJoint *)jarg1; 
  result = (b2Vec2 *) &((b2RopeJoint const *)arg1)->GetLocalAnchorB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2RopeJoint_SetMaxLength(void * jarg1, float jarg2) {
  b2RopeJoint *arg1 = (b2RopeJoint *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2RopeJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetMaxLength(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2RopeJoint_GetMaxLength(void * jarg1) {
  float jresult ;
  b2RopeJoint *arg1 = (b2RopeJoint *) 0 ;
  float32 result;
  
  arg1 = (b2RopeJoint *)jarg1; 
  result = (float32)((b2RopeJoint const *)arg1)->GetMaxLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2RopeJoint_GetLimitState(void * jarg1) {
  int jresult ;
  b2RopeJoint *arg1 = (b2RopeJoint *) 0 ;
  b2LimitState result;
  
  arg1 = (b2RopeJoint *)jarg1; 
  result = (b2LimitState)((b2RopeJoint const *)arg1)->GetLimitState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2RopeJoint_Dump(void * jarg1) {
  b2RopeJoint *arg1 = (b2RopeJoint *) 0 ;
  
  arg1 = (b2RopeJoint *)jarg1; 
  (arg1)->Dump();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2RopeJoint(void * jarg1) {
  b2RopeJoint *arg1 = (b2RopeJoint *) 0 ;
  
  arg1 = (b2RopeJoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_b2WeldJointDef() {
  void * jresult ;
  b2WeldJointDef *result = 0 ;
  
  result = (b2WeldJointDef *)new b2WeldJointDef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2WeldJointDef_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  b2WeldJointDef *arg1 = (b2WeldJointDef *) 0 ;
  b2Body *arg2 = (b2Body *) 0 ;
  b2Body *arg3 = (b2Body *) 0 ;
  b2Vec2 *arg4 = 0 ;
  
  arg1 = (b2WeldJointDef *)jarg1; 
  arg2 = (b2Body *)jarg2; 
  arg3 = (b2Body *)jarg3; 
  arg4 = (b2Vec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  (arg1)->Initialize(arg2,arg3,(b2Vec2 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2WeldJointDef_localAnchorA_set(void * jarg1, void * jarg2) {
  b2WeldJointDef *arg1 = (b2WeldJointDef *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2WeldJointDef *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->localAnchorA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2WeldJointDef_localAnchorA_get(void * jarg1) {
  void * jresult ;
  b2WeldJointDef *arg1 = (b2WeldJointDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2WeldJointDef *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->localAnchorA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2WeldJointDef_localAnchorB_set(void * jarg1, void * jarg2) {
  b2WeldJointDef *arg1 = (b2WeldJointDef *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2WeldJointDef *)jarg1; 
  arg2 = (b2Vec2 *)jarg2; 
  if (arg1) (arg1)->localAnchorB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2WeldJointDef_localAnchorB_get(void * jarg1) {
  void * jresult ;
  b2WeldJointDef *arg1 = (b2WeldJointDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2WeldJointDef *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->localAnchorB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2WeldJointDef_referenceAngle_set(void * jarg1, float jarg2) {
  b2WeldJointDef *arg1 = (b2WeldJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2WeldJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->referenceAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2WeldJointDef_referenceAngle_get(void * jarg1) {
  float jresult ;
  b2WeldJointDef *arg1 = (b2WeldJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2WeldJointDef *)jarg1; 
  result = (float32) ((arg1)->referenceAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2WeldJointDef_frequencyHz_set(void * jarg1, float jarg2) {
  b2WeldJointDef *arg1 = (b2WeldJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2WeldJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->frequencyHz = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2WeldJointDef_frequencyHz_get(void * jarg1) {
  float jresult ;
  b2WeldJointDef *arg1 = (b2WeldJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2WeldJointDef *)jarg1; 
  result = (float32) ((arg1)->frequencyHz);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2WeldJointDef_dampingRatio_set(void * jarg1, float jarg2) {
  b2WeldJointDef *arg1 = (b2WeldJointDef *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2WeldJointDef *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->dampingRatio = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2WeldJointDef_dampingRatio_get(void * jarg1) {
  float jresult ;
  b2WeldJointDef *arg1 = (b2WeldJointDef *) 0 ;
  float32 result;
  
  arg1 = (b2WeldJointDef *)jarg1; 
  result = (float32) ((arg1)->dampingRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2WeldJointDef(void * jarg1) {
  b2WeldJointDef *arg1 = (b2WeldJointDef *) 0 ;
  
  arg1 = (b2WeldJointDef *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2WeldJoint_GetAnchorA(void * jarg1) {
  void * jresult ;
  b2WeldJoint *arg1 = (b2WeldJoint *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2WeldJoint *)jarg1; 
  result = ((b2WeldJoint const *)arg1)->GetAnchorA();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2WeldJoint_GetAnchorB(void * jarg1) {
  void * jresult ;
  b2WeldJoint *arg1 = (b2WeldJoint *) 0 ;
  b2Vec2 result;
  
  arg1 = (b2WeldJoint *)jarg1; 
  result = ((b2WeldJoint const *)arg1)->GetAnchorB();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2WeldJoint_GetReactionForce(void * jarg1, float jarg2) {
  void * jresult ;
  b2WeldJoint *arg1 = (b2WeldJoint *) 0 ;
  float32 arg2 ;
  b2Vec2 result;
  
  arg1 = (b2WeldJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  result = ((b2WeldJoint const *)arg1)->GetReactionForce(arg2);
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2WeldJoint_GetReactionTorque(void * jarg1, float jarg2) {
  float jresult ;
  b2WeldJoint *arg1 = (b2WeldJoint *) 0 ;
  float32 arg2 ;
  float32 result;
  
  arg1 = (b2WeldJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  result = (float32)((b2WeldJoint const *)arg1)->GetReactionTorque(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2WeldJoint_GetLocalAnchorA(void * jarg1) {
  void * jresult ;
  b2WeldJoint *arg1 = (b2WeldJoint *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2WeldJoint *)jarg1; 
  result = (b2Vec2 *) &((b2WeldJoint const *)arg1)->GetLocalAnchorA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_b2WeldJoint_GetLocalAnchorB(void * jarg1) {
  void * jresult ;
  b2WeldJoint *arg1 = (b2WeldJoint *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2WeldJoint *)jarg1; 
  result = (b2Vec2 *) &((b2WeldJoint const *)arg1)->GetLocalAnchorB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2WeldJoint_GetReferenceAngle(void * jarg1) {
  float jresult ;
  b2WeldJoint *arg1 = (b2WeldJoint *) 0 ;
  float32 result;
  
  arg1 = (b2WeldJoint *)jarg1; 
  result = (float32)((b2WeldJoint const *)arg1)->GetReferenceAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2WeldJoint_SetFrequency(void * jarg1, float jarg2) {
  b2WeldJoint *arg1 = (b2WeldJoint *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2WeldJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetFrequency(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2WeldJoint_GetFrequency(void * jarg1) {
  float jresult ;
  b2WeldJoint *arg1 = (b2WeldJoint *) 0 ;
  float32 result;
  
  arg1 = (b2WeldJoint *)jarg1; 
  result = (float32)((b2WeldJoint const *)arg1)->GetFrequency();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2WeldJoint_SetDampingRatio(void * jarg1, float jarg2) {
  b2WeldJoint *arg1 = (b2WeldJoint *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2WeldJoint *)jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetDampingRatio(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2WeldJoint_GetDampingRatio(void * jarg1) {
  float jresult ;
  b2WeldJoint *arg1 = (b2WeldJoint *) 0 ;
  float32 result;
  
  arg1 = (b2WeldJoint *)jarg1; 
  result = (float32)((b2WeldJoint const *)arg1)->GetDampingRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2WeldJoint_Dump(void * jarg1) {
  b2WeldJoint *arg1 = (b2WeldJoint *) 0 ;
  
  arg1 = (b2WeldJoint *)jarg1; 
  (arg1)->Dump();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2WeldJoint(void * jarg1) {
  b2WeldJoint *arg1 = (b2WeldJoint *) 0 ;
  
  arg1 = (b2WeldJoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT b2Shape * SWIGSTDCALL CSharp_b2CircleShape_SWIGUpcast(b2CircleShape *jarg1) {
    return (b2Shape *)jarg1;
}

SWIGEXPORT b2Shape * SWIGSTDCALL CSharp_b2EdgeShape_SWIGUpcast(b2EdgeShape *jarg1) {
    return (b2Shape *)jarg1;
}

SWIGEXPORT b2Shape * SWIGSTDCALL CSharp_b2ChainShape_SWIGUpcast(b2ChainShape *jarg1) {
    return (b2Shape *)jarg1;
}

SWIGEXPORT b2Shape * SWIGSTDCALL CSharp_b2PolygonShape_SWIGUpcast(b2PolygonShape *jarg1) {
    return (b2Shape *)jarg1;
}

SWIGEXPORT b2JointDef * SWIGSTDCALL CSharp_b2DistanceJointDef_SWIGUpcast(b2DistanceJointDef *jarg1) {
    return (b2JointDef *)jarg1;
}

SWIGEXPORT b2Joint * SWIGSTDCALL CSharp_b2DistanceJoint_SWIGUpcast(b2DistanceJoint *jarg1) {
    return (b2Joint *)jarg1;
}

SWIGEXPORT b2JointDef * SWIGSTDCALL CSharp_b2FrictionJointDef_SWIGUpcast(b2FrictionJointDef *jarg1) {
    return (b2JointDef *)jarg1;
}

SWIGEXPORT b2Joint * SWIGSTDCALL CSharp_b2FrictionJoint_SWIGUpcast(b2FrictionJoint *jarg1) {
    return (b2Joint *)jarg1;
}

SWIGEXPORT b2JointDef * SWIGSTDCALL CSharp_b2GearJointDef_SWIGUpcast(b2GearJointDef *jarg1) {
    return (b2JointDef *)jarg1;
}

SWIGEXPORT b2Joint * SWIGSTDCALL CSharp_b2GearJoint_SWIGUpcast(b2GearJoint *jarg1) {
    return (b2Joint *)jarg1;
}

SWIGEXPORT b2JointDef * SWIGSTDCALL CSharp_b2WheelJointDef_SWIGUpcast(b2WheelJointDef *jarg1) {
    return (b2JointDef *)jarg1;
}

SWIGEXPORT b2Joint * SWIGSTDCALL CSharp_b2WheelJoint_SWIGUpcast(b2WheelJoint *jarg1) {
    return (b2Joint *)jarg1;
}

SWIGEXPORT b2JointDef * SWIGSTDCALL CSharp_b2MouseJointDef_SWIGUpcast(b2MouseJointDef *jarg1) {
    return (b2JointDef *)jarg1;
}

SWIGEXPORT b2Joint * SWIGSTDCALL CSharp_b2MouseJoint_SWIGUpcast(b2MouseJoint *jarg1) {
    return (b2Joint *)jarg1;
}

SWIGEXPORT b2JointDef * SWIGSTDCALL CSharp_b2PrismaticJointDef_SWIGUpcast(b2PrismaticJointDef *jarg1) {
    return (b2JointDef *)jarg1;
}

SWIGEXPORT b2Joint * SWIGSTDCALL CSharp_b2PrismaticJoint_SWIGUpcast(b2PrismaticJoint *jarg1) {
    return (b2Joint *)jarg1;
}

SWIGEXPORT b2JointDef * SWIGSTDCALL CSharp_b2PulleyJointDef_SWIGUpcast(b2PulleyJointDef *jarg1) {
    return (b2JointDef *)jarg1;
}

SWIGEXPORT b2Joint * SWIGSTDCALL CSharp_b2PulleyJoint_SWIGUpcast(b2PulleyJoint *jarg1) {
    return (b2Joint *)jarg1;
}

SWIGEXPORT b2JointDef * SWIGSTDCALL CSharp_b2RevoluteJointDef_SWIGUpcast(b2RevoluteJointDef *jarg1) {
    return (b2JointDef *)jarg1;
}

SWIGEXPORT b2Joint * SWIGSTDCALL CSharp_b2RevoluteJoint_SWIGUpcast(b2RevoluteJoint *jarg1) {
    return (b2Joint *)jarg1;
}

SWIGEXPORT b2JointDef * SWIGSTDCALL CSharp_b2RopeJointDef_SWIGUpcast(b2RopeJointDef *jarg1) {
    return (b2JointDef *)jarg1;
}

SWIGEXPORT b2Joint * SWIGSTDCALL CSharp_b2RopeJoint_SWIGUpcast(b2RopeJoint *jarg1) {
    return (b2Joint *)jarg1;
}

SWIGEXPORT b2JointDef * SWIGSTDCALL CSharp_b2WeldJointDef_SWIGUpcast(b2WeldJointDef *jarg1) {
    return (b2JointDef *)jarg1;
}

SWIGEXPORT b2Joint * SWIGSTDCALL CSharp_b2WeldJoint_SWIGUpcast(b2WeldJoint *jarg1) {
    return (b2Joint *)jarg1;
}

#ifdef __cplusplus
}
#endif

