/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Box2DCS {

using System;
using System.Runtime.InteropServices;

public class b2RevoluteJoint : b2Joint {
  private HandleRef swigCPtr;

  internal b2RevoluteJoint(IntPtr cPtr, bool cMemoryOwn) : base(Box2DPINVOKE.b2RevoluteJoint_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(b2RevoluteJoint obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~b2RevoluteJoint() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Box2DPINVOKE.delete_b2RevoluteJoint(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public override b2Vec2 GetAnchorA() {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2RevoluteJoint_GetAnchorA(swigCPtr), true);
    return ret;
  }

  public override b2Vec2 GetAnchorB() {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2RevoluteJoint_GetAnchorB(swigCPtr), true);
    return ret;
  }

  public b2Vec2 GetLocalAnchorA() {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2RevoluteJoint_GetLocalAnchorA(swigCPtr), false);
    return ret;
  }

  public b2Vec2 GetLocalAnchorB() {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2RevoluteJoint_GetLocalAnchorB(swigCPtr), false);
    return ret;
  }

  public float GetReferenceAngle() {
    float ret = Box2DPINVOKE.b2RevoluteJoint_GetReferenceAngle(swigCPtr);
    return ret;
  }

  public float GetJointAngle() {
    float ret = Box2DPINVOKE.b2RevoluteJoint_GetJointAngle(swigCPtr);
    return ret;
  }

  public float GetJointSpeed() {
    float ret = Box2DPINVOKE.b2RevoluteJoint_GetJointSpeed(swigCPtr);
    return ret;
  }

  public bool IsLimitEnabled() {
    bool ret = Box2DPINVOKE.b2RevoluteJoint_IsLimitEnabled(swigCPtr);
    return ret;
  }

  public void EnableLimit(bool flag) {
    Box2DPINVOKE.b2RevoluteJoint_EnableLimit(swigCPtr, flag);
  }

  public float GetLowerLimit() {
    float ret = Box2DPINVOKE.b2RevoluteJoint_GetLowerLimit(swigCPtr);
    return ret;
  }

  public float GetUpperLimit() {
    float ret = Box2DPINVOKE.b2RevoluteJoint_GetUpperLimit(swigCPtr);
    return ret;
  }

  public void SetLimits(float lower, float upper) {
    Box2DPINVOKE.b2RevoluteJoint_SetLimits(swigCPtr, lower, upper);
  }

  public bool IsMotorEnabled() {
    bool ret = Box2DPINVOKE.b2RevoluteJoint_IsMotorEnabled(swigCPtr);
    return ret;
  }

  public void EnableMotor(bool flag) {
    Box2DPINVOKE.b2RevoluteJoint_EnableMotor(swigCPtr, flag);
  }

  public void SetMotorSpeed(float speed) {
    Box2DPINVOKE.b2RevoluteJoint_SetMotorSpeed(swigCPtr, speed);
  }

  public float GetMotorSpeed() {
    float ret = Box2DPINVOKE.b2RevoluteJoint_GetMotorSpeed(swigCPtr);
    return ret;
  }

  public void SetMaxMotorTorque(float torque) {
    Box2DPINVOKE.b2RevoluteJoint_SetMaxMotorTorque(swigCPtr, torque);
  }

  public float GetMaxMotorTorque() {
    float ret = Box2DPINVOKE.b2RevoluteJoint_GetMaxMotorTorque(swigCPtr);
    return ret;
  }

  public override b2Vec2 GetReactionForce(float inv_dt) {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2RevoluteJoint_GetReactionForce(swigCPtr, inv_dt), true);
    return ret;
  }

  public override float GetReactionTorque(float inv_dt) {
    float ret = Box2DPINVOKE.b2RevoluteJoint_GetReactionTorque(swigCPtr, inv_dt);
    return ret;
  }

  public float GetMotorTorque(float inv_dt) {
    float ret = Box2DPINVOKE.b2RevoluteJoint_GetMotorTorque(swigCPtr, inv_dt);
    return ret;
  }

  public override void Dump() {
    Box2DPINVOKE.b2RevoluteJoint_Dump(swigCPtr);
  }

}

}
